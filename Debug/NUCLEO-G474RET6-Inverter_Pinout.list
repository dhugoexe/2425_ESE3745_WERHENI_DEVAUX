
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cddc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800cfc0  0800cfc0  0000dfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4c4  0800d4c4  0000f294  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4c4  0800d4c4  0000e4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4cc  0800d4cc  0000f294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4cc  0800d4cc  0000e4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4d0  0800d4d0  0000e4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800d4d4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000294  0800d768  0000f294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800d768  0000f860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9d1  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038fe  00000000  00000000  0002ac95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001131  00000000  00000000  0002fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a482  00000000  00000000  00030d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd58  00000000  00000000  0005b18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114777  00000000  00000000  00076ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b65a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000712c  00000000  00000000  0018b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001927cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000294 	.word	0x20000294
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cfa4 	.word	0x0800cfa4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000298 	.word	0x20000298
 800021c:	0800cfa4 	.word	0x0800cfa4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f009 ff5f 	bl	800ae84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fce:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fd0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fee:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001000:	4b24      	ldr	r3, [pc, #144]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001002:	2201      	movs	r2, #1
 8001004:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b23      	ldr	r3, [pc, #140]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800100e:	4b21      	ldr	r3, [pc, #132]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001010:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8001014:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001018:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001026:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <MX_ADC1_Init+0xec>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001034:	4817      	ldr	r0, [pc, #92]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001036:	f001 fe87 	bl	8002d48 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001040:	f000 fb2a 	bl	8001698 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4811      	ldr	r0, [pc, #68]	@ (8001094 <MX_ADC1_Init+0xec>)
 8001050:	f003 fb28 	bl	80046a4 <HAL_ADCEx_MultiModeConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800105a:	f000 fb1d 	bl	8001698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_ADC1_Init+0xf0>)
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001062:	2306      	movs	r3, #6
 8001064:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001066:	2304      	movs	r3, #4
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106a:	237f      	movs	r3, #127	@ 0x7f
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106e:	2304      	movs	r3, #4
 8001070:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	@ (8001094 <MX_ADC1_Init+0xec>)
 800107c:	f002 fbda 	bl	8003834 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001086:	f000 fb07 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002b0 	.word	0x200002b0
 8001098:	08600004 	.word	0x08600004

0800109c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2220      	movs	r2, #32
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f009 feeb 	bl	800ae84 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ae:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001160 <MX_ADC2_Init+0xc4>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010bc:	4b27      	ldr	r3, [pc, #156]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ce:	4b23      	ldr	r3, [pc, #140]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_ADC2_Init+0xc0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_ADC2_Init+0xc0>)
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_ADC2_Init+0xc0>)
 800110a:	2200      	movs	r2, #0
 800110c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_ADC2_Init+0xc0>)
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001116:	4811      	ldr	r0, [pc, #68]	@ (800115c <MX_ADC2_Init+0xc0>)
 8001118:	f001 fe16 	bl	8002d48 <HAL_ADC_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001122:	f000 fab9 	bl	8001698 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_ADC2_Init+0xc8>)
 8001128:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112a:	2306      	movs	r3, #6
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001132:	237f      	movs	r3, #127	@ 0x7f
 8001134:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001136:	2304      	movs	r3, #4
 8001138:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_ADC2_Init+0xc0>)
 8001144:	f002 fb76 	bl	8003834 <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800114e:	f000 faa3 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000031c 	.word	0x2000031c
 8001160:	50000100 	.word	0x50000100
 8001164:	19200040 	.word	0x19200040

08001168 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a4      	sub	sp, #144	@ 0x90
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001184:	2254      	movs	r2, #84	@ 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f009 fe7b 	bl	800ae84 <memset>
  if(adcHandle->Instance==ADC1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001196:	f040 80a8 	bne.w	80012ea <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800119a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80011a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 ff6c 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011b6:	f000 fa6f 	bl	8001698 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011ba:	4b81      	ldr	r3, [pc, #516]	@ (80013c0 <HAL_ADC_MspInit+0x258>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a7f      	ldr	r2, [pc, #508]	@ (80013c0 <HAL_ADC_MspInit+0x258>)
 80011c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011c4:	4b7e      	ldr	r3, [pc, #504]	@ (80013c0 <HAL_ADC_MspInit+0x258>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d10b      	bne.n	80011e4 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011cc:	4b7d      	ldr	r3, [pc, #500]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a7c      	ldr	r2, [pc, #496]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b7a      	ldr	r3, [pc, #488]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	4b77      	ldr	r3, [pc, #476]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a76      	ldr	r2, [pc, #472]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b74      	ldr	r3, [pc, #464]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b71      	ldr	r3, [pc, #452]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	4a70      	ldr	r2, [pc, #448]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001208:	4b6e      	ldr	r3, [pc, #440]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	4b6b      	ldr	r3, [pc, #428]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001218:	4a6a      	ldr	r2, [pc, #424]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001220:	4b68      	ldr	r3, [pc, #416]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800122c:	2304      	movs	r3, #4
 800122e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001240:	4619      	mov	r1, r3
 8001242:	4861      	ldr	r0, [pc, #388]	@ (80013c8 <HAL_ADC_MspInit+0x260>)
 8001244:	f003 ff48 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001248:	2302      	movs	r3, #2
 800124a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001262:	f003 ff39 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001266:	2303      	movs	r3, #3
 8001268:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800127a:	4619      	mov	r1, r3
 800127c:	4853      	ldr	r0, [pc, #332]	@ (80013cc <HAL_ADC_MspInit+0x264>)
 800127e:	f003 ff2b 	bl	80050d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001282:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 8001284:	4a53      	ldr	r2, [pc, #332]	@ (80013d4 <HAL_ADC_MspInit+0x26c>)
 8001286:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001288:	4b51      	ldr	r3, [pc, #324]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 800128a:	2205      	movs	r2, #5
 800128c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800128e:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001294:	4b4e      	ldr	r3, [pc, #312]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800129a:	4b4d      	ldr	r3, [pc, #308]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a0:	4b4b      	ldr	r3, [pc, #300]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012a8:	4b49      	ldr	r3, [pc, #292]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012b0:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012b6:	4b46      	ldr	r3, [pc, #280]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012bc:	4844      	ldr	r0, [pc, #272]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012be:	f003 fbd9 	bl	8004a74 <HAL_DMA_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80012c8:	f000 f9e6 	bl	8001698 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a40      	ldr	r2, [pc, #256]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80012d2:	4a3f      	ldr	r2, [pc, #252]	@ (80013d0 <HAL_ADC_MspInit+0x268>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2012      	movs	r0, #18
 80012de:	f003 fba1 	bl	8004a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012e2:	2012      	movs	r0, #18
 80012e4:	f003 fbb8 	bl	8004a58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012e8:	e066      	b.n	80013b8 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a3a      	ldr	r2, [pc, #232]	@ (80013d8 <HAL_ADC_MspInit+0x270>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d161      	bne.n	80013b8 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001304:	4618      	mov	r0, r3
 8001306:	f004 febf 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 8001310:	f000 f9c2 	bl	8001698 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001314:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <HAL_ADC_MspInit+0x258>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <HAL_ADC_MspInit+0x258>)
 800131c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <HAL_ADC_MspInit+0x258>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10b      	bne.n	800133e <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 800132c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a1a      	ldr	r2, [pc, #104]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_ADC_MspInit+0x25c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800136e:	230b      	movs	r3, #11
 8001370:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001372:	2303      	movs	r3, #3
 8001374:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001382:	4619      	mov	r1, r3
 8001384:	4810      	ldr	r0, [pc, #64]	@ (80013c8 <HAL_ADC_MspInit+0x260>)
 8001386:	f003 fea7 	bl	80050d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800138a:	2301      	movs	r3, #1
 800138c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138e:	2303      	movs	r3, #3
 8001390:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800139e:	4619      	mov	r1, r3
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a4:	f003 fe98 	bl	80050d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2012      	movs	r0, #18
 80013ae:	f003 fb39 	bl	8004a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013b2:	2012      	movs	r0, #18
 80013b4:	f003 fb50 	bl	8004a58 <HAL_NVIC_EnableIRQ>
}
 80013b8:	bf00      	nop
 80013ba:	3790      	adds	r7, #144	@ 0x90
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200003e8 	.word	0x200003e8
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000800 	.word	0x48000800
 80013cc:	48000400 	.word	0x48000400
 80013d0:	20000388 	.word	0x20000388
 80013d4:	40020008 	.word	0x40020008
 80013d8:	50000100 	.word	0x50000100

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_DMA_Init+0x50>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e6:	4a11      	ldr	r2, [pc, #68]	@ (800142c <MX_DMA_Init+0x50>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_DMA_Init+0x50>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_DMA_Init+0x50>)
 80013fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fe:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <MX_DMA_Init+0x50>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6493      	str	r3, [r2, #72]	@ 0x48
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_DMA_Init+0x50>)
 8001408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	200b      	movs	r0, #11
 8001418:	f003 fb04 	bl	8004a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800141c:	200b      	movs	r0, #11
 800141e:	f003 fb1b 	bl	8004a58 <HAL_NVIC_EnableIRQ>

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b3f      	ldr	r3, [pc, #252]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a3e      	ldr	r2, [pc, #248]	@ (8001544 <MX_GPIO_Init+0x114>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	4b39      	ldr	r3, [pc, #228]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a38      	ldr	r2, [pc, #224]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <MX_GPIO_Init+0x114>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a32      	ldr	r2, [pc, #200]	@ (8001544 <MX_GPIO_Init+0x114>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a2c      	ldr	r2, [pc, #176]	@ (8001544 <MX_GPIO_Init+0x114>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <MX_GPIO_Init+0x114>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <MX_GPIO_Init+0x114>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <MX_GPIO_Init+0x114>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <MX_GPIO_Init+0x114>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2120      	movs	r1, #32
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c6:	f003 ff89 	bl	80053dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2104      	movs	r1, #4
 80014ce:	481e      	ldr	r0, [pc, #120]	@ (8001548 <MX_GPIO_Init+0x118>)
 80014d0:	f003 ff84 	bl	80053dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_GPIO_Init+0x11c>)
 80014ec:	f003 fdf4 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014f0:	2320      	movs	r3, #32
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150a:	f003 fde5 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800150e:	2304      	movs	r3, #4
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	@ (8001548 <MX_GPIO_Init+0x118>)
 8001526:	f003 fdd7 	bl	80050d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2028      	movs	r0, #40	@ 0x28
 8001530:	f003 fa78 	bl	8004a24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001534:	2028      	movs	r0, #40	@ 0x28
 8001536:	f003 fa8f 	bl	8004a58 <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	@ 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	48000c00 	.word	0x48000c00
 800154c:	48000800 	.word	0x48000800

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f001 f90c 	bl	8002772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155a:	f000 f841 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155e:	f7ff ff67 	bl	8001430 <MX_GPIO_Init>
  MX_DMA_Init();
 8001562:	f7ff ff3b 	bl	80013dc <MX_DMA_Init>
  MX_ADC2_Init();
 8001566:	f7ff fd99 	bl	800109c <MX_ADC2_Init>
  MX_ADC1_Init();
 800156a:	f7ff fd1d 	bl	8000fa8 <MX_ADC1_Init>
  MX_TIM1_Init();
 800156e:	f000 fa6f 	bl	8001a50 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001572:	f000 fb1f 	bl	8001bb4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001576:	f000 fc5d 	bl	8001e34 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800157a:	f000 fca7 	bl	8001ecc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

	Shell_Init();
 800157e:	f000 fe11 	bl	80021a4 <Shell_Init>


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001582:	2100      	movs	r1, #0
 8001584:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <main+0x84>)
 8001586:	f005 f8ff 	bl	8006788 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800158a:	2100      	movs	r1, #0
 800158c:	4811      	ldr	r0, [pc, #68]	@ (80015d4 <main+0x84>)
 800158e:	f006 fa03 	bl	8007998 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001592:	2104      	movs	r1, #4
 8001594:	480f      	ldr	r0, [pc, #60]	@ (80015d4 <main+0x84>)
 8001596:	f005 f8f7 	bl	8006788 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800159a:	2104      	movs	r1, #4
 800159c:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <main+0x84>)
 800159e:	f006 f9fb 	bl	8007998 <HAL_TIMEx_PWMN_Start>
	TIM1->CCR1 =2550;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <main+0x88>)
 80015a4:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 80015a8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM1->CCR2 =TIM1->ARR-TIM1->CCR1;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <main+0x88>)
 80015ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <main+0x88>)
 80015b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b2:	4909      	ldr	r1, [pc, #36]	@ (80015d8 <main+0x88>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	638b      	str	r3, [r1, #56]	@ 0x38

	printf("Starting DMA... \r\n");
 80015b8:	4808      	ldr	r0, [pc, #32]	@ (80015dc <main+0x8c>)
 80015ba:	f009 fb2f 	bl	800ac1c <puts>



	uint32_t lastTick = HAL_GetTick();
 80015be:	f001 f903 	bl	80027c8 <HAL_GetTick>
 80015c2:	6078      	str	r0, [r7, #4]
	const uint32_t PRINT_INTERVAL = 1000;
 80015c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c8:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80015ca:	f000 fe2d 	bl	8002228 <Shell_Loop>
	{
 80015ce:	bf00      	nop
 80015d0:	e7fb      	b.n	80015ca <main+0x7a>
 80015d2:	bf00      	nop
 80015d4:	2000043c 	.word	0x2000043c
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	0800cfc0 	.word	0x0800cfc0

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	@ 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	2238      	movs	r2, #56	@ 0x38
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f009 fc48 	bl	800ae84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001602:	2000      	movs	r0, #0
 8001604:	f003 ff26 	bl	8005454 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001610:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	2303      	movs	r3, #3
 8001618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800161a:	2306      	movs	r3, #6
 800161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800161e:	2355      	movs	r3, #85	@ 0x55
 8001620:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001622:	2302      	movs	r3, #2
 8001624:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001626:	2302      	movs	r3, #2
 8001628:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800162a:	2302      	movs	r3, #2
 800162c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162e:	f107 0318 	add.w	r3, r7, #24
 8001632:	4618      	mov	r0, r3
 8001634:	f003 ffc2 	bl	80055bc <HAL_RCC_OscConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800163e:	f000 f82b 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001642:	230f      	movs	r3, #15
 8001644:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001646:	2303      	movs	r3, #3
 8001648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2104      	movs	r1, #4
 800165a:	4618      	mov	r0, r3
 800165c:	f004 fac6 	bl	8005bec <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001666:	f000 f817 	bl	8001698 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3750      	adds	r7, #80	@ 0x50
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001686:	f001 f88d 	bl	80027a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40001000 	.word	0x40001000

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <Error_Handler+0x8>

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_MspInit+0x44>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_MspInit+0x44>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <HAL_MspInit+0x44>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_MspInit+0x44>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016da:	f003 ff5f 	bl	800559c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016fc:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <HAL_InitTick+0xc4>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	4a2b      	ldr	r2, [pc, #172]	@ (80017b0 <HAL_InitTick+0xc4>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6593      	str	r3, [r2, #88]	@ 0x58
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <HAL_InitTick+0xc4>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001714:	f107 020c 	add.w	r2, r7, #12
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f004 fc3a 	bl	8005f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001724:	f004 fc0c 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8001728:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <HAL_InitTick+0xc8>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0c9b      	lsrs	r3, r3, #18
 8001734:	3b01      	subs	r3, #1
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_InitTick+0xcc>)
 800173a:	4a20      	ldr	r2, [pc, #128]	@ (80017bc <HAL_InitTick+0xd0>)
 800173c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800173e:	4b1e      	ldr	r3, [pc, #120]	@ (80017b8 <HAL_InitTick+0xcc>)
 8001740:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001744:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <HAL_InitTick+0xcc>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_InitTick+0xcc>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001752:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_InitTick+0xcc>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001758:	4817      	ldr	r0, [pc, #92]	@ (80017b8 <HAL_InitTick+0xcc>)
 800175a:	f004 fee3 	bl	8006524 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001764:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001768:	2b00      	cmp	r3, #0
 800176a:	d11b      	bne.n	80017a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800176c:	4812      	ldr	r0, [pc, #72]	@ (80017b8 <HAL_InitTick+0xcc>)
 800176e:	f004 ff3b 	bl	80065e8 <HAL_TIM_Base_Start_IT>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001778:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001780:	2036      	movs	r0, #54	@ 0x36
 8001782:	f003 f969 	bl	8004a58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d808      	bhi.n	800179e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	2036      	movs	r0, #54	@ 0x36
 8001792:	f003 f947 	bl	8004a24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_InitTick+0xd4>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	e002      	b.n	80017a4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3730      	adds	r7, #48	@ 0x30
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	431bde83 	.word	0x431bde83
 80017b8:	200003ec 	.word	0x200003ec
 80017bc:	40001000 	.word	0x40001000
 80017c0:	200000c4 	.word	0x200000c4

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <NMI_Handler+0x4>

080017cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <MemManage_Handler+0x4>

080017dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <BusFault_Handler+0x4>

080017e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <UsageFault_Handler+0x4>

080017ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <DMA1_Channel1_IRQHandler+0x10>)
 800182a:	f003 fb06 	bl	8004e3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000388 	.word	0x20000388

08001838 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <ADC1_2_IRQHandler+0x14>)
 800183e:	f001 fd7b 	bl	8003338 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001842:	4803      	ldr	r0, [pc, #12]	@ (8001850 <ADC1_2_IRQHandler+0x18>)
 8001844:	f001 fd78 	bl	8003338 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002b0 	.word	0x200002b0
 8001850:	2000031c 	.word	0x2000031c

08001854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <USART2_IRQHandler+0x10>)
 800185a:	f006 fcad 	bl	80081b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200004d4 	.word	0x200004d4

08001868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <USART3_IRQHandler+0x10>)
 800186e:	f006 fca3 	bl	80081b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000564 	.word	0x20000564

0800187c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001880:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001884:	f003 fdc2 	bl	800540c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM6_DAC_IRQHandler+0x10>)
 8001892:	f005 f9cd 	bl	8006c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003ec 	.word	0x200003ec

080018a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_kill>:

int _kill(int pid, int sig)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ba:	f009 fb91 	bl	800afe0 <__errno>
 80018be:	4603      	mov	r3, r0
 80018c0:	2216      	movs	r2, #22
 80018c2:	601a      	str	r2, [r3, #0]
  return -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_exit>:

void _exit (int status)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ffe7 	bl	80018b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e2:	bf00      	nop
 80018e4:	e7fd      	b.n	80018e2 <_exit+0x12>

080018e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e00a      	b.n	800190e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f8:	f3af 8000 	nop.w
 80018fc:	4601      	mov	r1, r0
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	60ba      	str	r2, [r7, #8]
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf0      	blt.n	80018f8 <_read+0x12>
  }

  return len;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e009      	b.n	8001946 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	dbf1      	blt.n	8001932 <_write+0x12>
  }
  return len;
 800194e:	687b      	ldr	r3, [r7, #4]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_close>:

int _close(int file)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001980:	605a      	str	r2, [r3, #4]
  return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_isatty>:

int _isatty(int file)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c8:	4a14      	ldr	r2, [pc, #80]	@ (8001a1c <_sbrk+0x5c>)
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <_sbrk+0x60>)
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d4:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <_sbrk+0x64>)
 80019de:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <_sbrk+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e2:	4b10      	ldr	r3, [pc, #64]	@ (8001a24 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f0:	f009 faf6 	bl	800afe0 <__errno>
 80019f4:	4603      	mov	r3, r0
 80019f6:	220c      	movs	r2, #12
 80019f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	e009      	b.n	8001a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a06:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <_sbrk+0x64>)
 8001a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20020000 	.word	0x20020000
 8001a20:	00000400 	.word	0x00000400
 8001a24:	20000438 	.word	0x20000438
 8001a28:	20000860 	.word	0x20000860

08001a2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <SystemInit+0x20>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a36:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <SystemInit+0x20>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b098      	sub	sp, #96	@ 0x60
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2234      	movs	r2, #52	@ 0x34
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f009 fa01 	bl	800ae84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a82:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001a84:	4a4a      	ldr	r2, [pc, #296]	@ (8001bb0 <MX_TIM1_Init+0x160>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a88:	4b48      	ldr	r3, [pc, #288]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001a90:	2220      	movs	r2, #32
 8001a92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001a94:	4b45      	ldr	r3, [pc, #276]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001a96:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b43      	ldr	r3, [pc, #268]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aa2:	4b42      	ldr	r3, [pc, #264]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b40      	ldr	r3, [pc, #256]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001aae:	483f      	ldr	r0, [pc, #252]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001ab0:	f004 fe12 	bl	80066d8 <HAL_TIM_PWM_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f7ff fded 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4836      	ldr	r0, [pc, #216]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001ad2:	f006 f881 	bl	8007bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001adc:	f7ff fddc 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae0:	2360      	movs	r3, #96	@ 0x60
 8001ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 2124;
 8001ae4:	f640 034c 	movw	r3, #2124	@ 0x84c
 8001ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aee:	2300      	movs	r3, #0
 8001af0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b02:	2200      	movs	r2, #0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4829      	ldr	r0, [pc, #164]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001b08:	f005 fa12 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001b12:	f7ff fdc1 	bl	8001698 <Error_Handler>
  }
  sConfigOC.Pulse = 1274;
 8001b16:	f240 43fa 	movw	r3, #1274	@ 0x4fa
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b1c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b20:	2204      	movs	r2, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4821      	ldr	r0, [pc, #132]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001b26:	f005 fa03 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001b30:	f7ff fdb2 	bl	8001698 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b38:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481a      	ldr	r0, [pc, #104]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001b42:	f005 f9f5 	bl	8006f30 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b4c:	f7ff fda4 	bl	8001698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 17;
 8001b5c:	2311      	movs	r3, #17
 8001b5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4807      	ldr	r0, [pc, #28]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001b8e:	f006 f8b9 	bl	8007d04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001b98:	f7ff fd7e 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b9c:	4803      	ldr	r0, [pc, #12]	@ (8001bac <MX_TIM1_Init+0x15c>)
 8001b9e:	f000 f8e1 	bl	8001d64 <HAL_TIM_MspPostInit>

}
 8001ba2:	bf00      	nop
 8001ba4:	3760      	adds	r7, #96	@ 0x60
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000043c 	.word	0x2000043c
 8001bb0:	40012c00 	.word	0x40012c00

08001bb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	@ 0x30
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f009 f95e 	bl	800ae84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001bd4:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <MX_TIM3_Init+0xa8>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c00:	2301      	movs	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c10:	2301      	movs	r3, #1
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c1c:	f107 030c 	add.w	r3, r7, #12
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001c24:	f004 ff5e 	bl	8006ae4 <HAL_TIM_Encoder_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c2e:	f7ff fd33 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <MX_TIM3_Init+0xa4>)
 8001c40:	f005 ffca 	bl	8007bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c4a:	f7ff fd25 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3730      	adds	r7, #48	@ 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000488 	.word	0x20000488
 8001c5c:	40000400 	.word	0x40000400

08001c60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_TIM_PWM_MspInit+0x38>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10b      	bne.n	8001c8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a26      	ldr	r2, [pc, #152]	@ (8001d58 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d145      	bne.n	8001d4e <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	4a25      	ldr	r2, [pc, #148]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cce:	4b23      	ldr	r3, [pc, #140]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	4a1f      	ldr	r2, [pc, #124]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_TIM_Encoder_MspInit+0xbc>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d0a:	2350      	movs	r3, #80	@ 0x50
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d28:	f003 f9d6 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001d4a:	f003 f9c5 	bl	80050d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000800 	.word	0x48000800

08001d64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	@ 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a29      	ldr	r2, [pc, #164]	@ (8001e28 <HAL_TIM_MspPostInit+0xc4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d14b      	bne.n	8001e1e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <HAL_TIM_MspPostInit+0xc8>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	4a28      	ldr	r2, [pc, #160]	@ (8001e2c <HAL_TIM_MspPostInit+0xc8>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <HAL_TIM_MspPostInit+0xc8>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <HAL_TIM_MspPostInit+0xc8>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	4a22      	ldr	r2, [pc, #136]	@ (8001e2c <HAL_TIM_MspPostInit+0xc8>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_TIM_MspPostInit+0xc8>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001db6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dc8:	2306      	movs	r3, #6
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4817      	ldr	r0, [pc, #92]	@ (8001e30 <HAL_TIM_MspPostInit+0xcc>)
 8001dd4:	f003 f980 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001dea:	2304      	movs	r3, #4
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	480e      	ldr	r0, [pc, #56]	@ (8001e30 <HAL_TIM_MspPostInit+0xcc>)
 8001df6:	f003 f96f 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001dfa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e1a:	f003 f95d 	bl	80050d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400

08001e34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e38:	4b22      	ldr	r3, [pc, #136]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ec8 <MX_USART2_UART_Init+0x94>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7c:	4811      	ldr	r0, [pc, #68]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e7e:	f006 f85e 	bl	8007f3e <HAL_UART_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e88:	f7ff fc06 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001e90:	f008 f801 	bl	8009e96 <HAL_UARTEx_SetTxFifoThreshold>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e9a:	f7ff fbfd 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001ea2:	f008 f836 	bl	8009f12 <HAL_UARTEx_SetRxFifoThreshold>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001eac:	f7ff fbf4 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	@ (8001ec4 <MX_USART2_UART_Init+0x90>)
 8001eb2:	f007 ffb7 	bl	8009e24 <HAL_UARTEx_DisableFifoMode>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ebc:	f7ff fbec 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200004d4 	.word	0x200004d4
 8001ec8:	40004400 	.word	0x40004400

08001ecc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ed2:	4a23      	ldr	r2, [pc, #140]	@ (8001f60 <MX_USART3_UART_Init+0x94>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f14:	4811      	ldr	r0, [pc, #68]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f16:	f006 f812 	bl	8007f3e <HAL_UART_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f20:	f7ff fbba 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f24:	2100      	movs	r1, #0
 8001f26:	480d      	ldr	r0, [pc, #52]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f28:	f007 ffb5 	bl	8009e96 <HAL_UARTEx_SetTxFifoThreshold>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f32:	f7ff fbb1 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f36:	2100      	movs	r1, #0
 8001f38:	4808      	ldr	r0, [pc, #32]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f3a:	f007 ffea 	bl	8009f12 <HAL_UARTEx_SetRxFifoThreshold>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f44:	f7ff fba8 	bl	8001698 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	@ (8001f5c <MX_USART3_UART_Init+0x90>)
 8001f4a:	f007 ff6b 	bl	8009e24 <HAL_UARTEx_DisableFifoMode>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f54:	f7ff fba0 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000564 	.word	0x20000564
 8001f60:	40004800 	.word	0x40004800

08001f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b0a0      	sub	sp, #128	@ 0x80
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	2254      	movs	r2, #84	@ 0x54
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f008 ff7d 	bl	800ae84 <memset>
  if(uartHandle->Instance==USART2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a45      	ldr	r2, [pc, #276]	@ (80020a4 <HAL_UART_MspInit+0x140>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d13f      	bne.n	8002014 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 f871 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fac:	f7ff fb74 	bl	8001698 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8001fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fcc:	4a36      	ldr	r2, [pc, #216]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffe:	f003 f86b 	bl	80050d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	2026      	movs	r0, #38	@ 0x26
 8002008:	f002 fd0c 	bl	8004a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800200c:	2026      	movs	r0, #38	@ 0x26
 800200e:	f002 fd23 	bl	8004a58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002012:	e043      	b.n	800209c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a24      	ldr	r2, [pc, #144]	@ (80020ac <HAL_UART_MspInit+0x148>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d13e      	bne.n	800209c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800201e:	2304      	movs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	4618      	mov	r0, r3
 800202c:	f004 f82c 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002036:	f7ff fb2f 	bl	8001698 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800203a:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002044:	6593      	str	r3, [r2, #88]	@ 0x58
 8002046:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_UART_MspInit+0x144>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800206a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800206e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800207c:	2307      	movs	r3, #7
 800207e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002080:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002084:	4619      	mov	r1, r3
 8002086:	480a      	ldr	r0, [pc, #40]	@ (80020b0 <HAL_UART_MspInit+0x14c>)
 8002088:	f003 f826 	bl	80050d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2100      	movs	r1, #0
 8002090:	2027      	movs	r0, #39	@ 0x27
 8002092:	f002 fcc7 	bl	8004a24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002096:	2027      	movs	r0, #39	@ 0x27
 8002098:	f002 fcde 	bl	8004a58 <HAL_NVIC_EnableIRQ>
}
 800209c:	bf00      	nop
 800209e:	3780      	adds	r7, #128	@ 0x80
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40004400 	.word	0x40004400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40004800 	.word	0x40004800
 80020b0:	48000800 	.word	0x48000800

080020b4 <setSpeed>:

static volatile uint16_t adc_buffer[ADC_BUF_SIZE];
static volatile uint16_t adcValue = 0;

int setSpeed(uint8_t speed)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
	if (speed >= currentSpeed)
 80020be:	79fa      	ldrb	r2, [r7, #7]
 80020c0:	4b35      	ldr	r3, [pc, #212]	@ (8002198 <setSpeed+0xe4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	db2e      	blt.n	8002126 <setSpeed+0x72>
	{
		while(currentSpeed != speed)
 80020c8:	e027      	b.n	800211a <setSpeed+0x66>
		{
			htim1.Instance->CCR1=(4250-1)*currentSpeed/100;
 80020ca:	4b33      	ldr	r3, [pc, #204]	@ (8002198 <setSpeed+0xe4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f241 0299 	movw	r2, #4249	@ 0x1099
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a31      	ldr	r2, [pc, #196]	@ (800219c <setSpeed+0xe8>)
 80020d8:	fb82 1203 	smull	r1, r2, r2, r3
 80020dc:	1152      	asrs	r2, r2, #5
 80020de:	17db      	asrs	r3, r3, #31
 80020e0:	1ad2      	subs	r2, r2, r3
 80020e2:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <setSpeed+0xec>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2=(4250-1)*(100-currentSpeed)/100;
 80020e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <setSpeed+0xe4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80020f0:	f241 0299 	movw	r2, #4249	@ 0x1099
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	4a28      	ldr	r2, [pc, #160]	@ (800219c <setSpeed+0xe8>)
 80020fa:	fb82 1203 	smull	r1, r2, r2, r3
 80020fe:	1152      	asrs	r2, r2, #5
 8002100:	17db      	asrs	r3, r3, #31
 8002102:	1ad2      	subs	r2, r2, r3
 8002104:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <setSpeed+0xec>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38
			currentSpeed++;
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <setSpeed+0xe4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	4a21      	ldr	r2, [pc, #132]	@ (8002198 <setSpeed+0xe4>)
 8002112:	6013      	str	r3, [r2, #0]
			HAL_Delay(100);
 8002114:	2064      	movs	r0, #100	@ 0x64
 8002116:	f000 fb63 	bl	80027e0 <HAL_Delay>
		while(currentSpeed != speed)
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <setSpeed+0xe4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d1d2      	bne.n	80020ca <setSpeed+0x16>
 8002124:	e032      	b.n	800218c <setSpeed+0xd8>

		}
	}
	else if (speed <= currentSpeed)
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <setSpeed+0xe4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	dc2d      	bgt.n	800218c <setSpeed+0xd8>
	{
		while(currentSpeed != speed)
 8002130:	e027      	b.n	8002182 <setSpeed+0xce>
		{
			htim1.Instance->CCR1=(4250-1)*currentSpeed/100;
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <setSpeed+0xe4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f241 0299 	movw	r2, #4249	@ 0x1099
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	4a17      	ldr	r2, [pc, #92]	@ (800219c <setSpeed+0xe8>)
 8002140:	fb82 1203 	smull	r1, r2, r2, r3
 8002144:	1152      	asrs	r2, r2, #5
 8002146:	17db      	asrs	r3, r3, #31
 8002148:	1ad2      	subs	r2, r2, r3
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <setSpeed+0xec>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2=(4250-1)*(100-currentSpeed)/100;
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <setSpeed+0xe4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8002158:	f241 0299 	movw	r2, #4249	@ 0x1099
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <setSpeed+0xe8>)
 8002162:	fb82 1203 	smull	r1, r2, r2, r3
 8002166:	1152      	asrs	r2, r2, #5
 8002168:	17db      	asrs	r3, r3, #31
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <setSpeed+0xec>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	639a      	str	r2, [r3, #56]	@ 0x38
			currentSpeed--;
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <setSpeed+0xe4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3b01      	subs	r3, #1
 8002178:	4a07      	ldr	r2, [pc, #28]	@ (8002198 <setSpeed+0xe4>)
 800217a:	6013      	str	r3, [r2, #0]
			HAL_Delay(100);
 800217c:	2064      	movs	r0, #100	@ 0x64
 800217e:	f000 fb2f 	bl	80027e0 <HAL_Delay>
		while(currentSpeed != speed)
 8002182:	79fa      	ldrb	r2, [r7, #7]
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <setSpeed+0xe4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d1d2      	bne.n	8002132 <setSpeed+0x7e>
		}
	}
	return currentSpeed;
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <setSpeed+0xe4>)
 800218e:	681b      	ldr	r3, [r3, #0]

}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200000c0 	.word	0x200000c0
 800219c:	51eb851f 	.word	0x51eb851f
 80021a0:	2000043c 	.word	0x2000043c

080021a4 <Shell_Init>:
		}
	}
}


void Shell_Init(void){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	2100      	movs	r1, #0
 80021ac:	4816      	ldr	r0, [pc, #88]	@ (8002208 <Shell_Init+0x64>)
 80021ae:	f008 fe69 	bl	800ae84 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	2100      	movs	r1, #0
 80021b6:	4815      	ldr	r0, [pc, #84]	@ (800220c <Shell_Init+0x68>)
 80021b8:	f008 fe64 	bl	800ae84 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <Shell_Init+0x6c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80021c2:	2240      	movs	r2, #64	@ 0x40
 80021c4:	2100      	movs	r1, #0
 80021c6:	4813      	ldr	r0, [pc, #76]	@ (8002214 <Shell_Init+0x70>)
 80021c8:	f008 fe5c 	bl	800ae84 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80021cc:	2201      	movs	r2, #1
 80021ce:	4910      	ldr	r1, [pc, #64]	@ (8002210 <Shell_Init+0x6c>)
 80021d0:	4811      	ldr	r0, [pc, #68]	@ (8002218 <Shell_Init+0x74>)
 80021d2:	f005 ff9b 	bl	800810c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80021d6:	4811      	ldr	r0, [pc, #68]	@ (800221c <Shell_Init+0x78>)
 80021d8:	f7fe f882 	bl	80002e0 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	b29a      	uxth	r2, r3
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	490d      	ldr	r1, [pc, #52]	@ (800221c <Shell_Init+0x78>)
 80021e6:	480c      	ldr	r0, [pc, #48]	@ (8002218 <Shell_Init+0x74>)
 80021e8:	f005 fef9 	bl	8007fde <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <Shell_Init+0x7c>)
 80021ee:	f7fe f877 	bl	80002e0 <strlen>
 80021f2:	4603      	mov	r3, r0
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	4909      	ldr	r1, [pc, #36]	@ (8002220 <Shell_Init+0x7c>)
 80021fc:	4806      	ldr	r0, [pc, #24]	@ (8002218 <Shell_Init+0x74>)
 80021fe:	f005 feee 	bl	8007fde <HAL_UART_Transmit>
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200006b8 	.word	0x200006b8
 800220c:	20000674 	.word	0x20000674
 8002210:	200005f8 	.word	0x200005f8
 8002214:	200005fc 	.word	0x200005fc
 8002218:	200004d4 	.word	0x200004d4
 800221c:	20000020 	.word	0x20000020
 8002220:	20000004 	.word	0x20000004
 8002224:	00000000 	.word	0x00000000

08002228 <Shell_Loop>:

void Shell_Loop(void){
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800222e:	4b9f      	ldr	r3, [pc, #636]	@ (80024ac <Shell_Loop+0x284>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d05b      	beq.n	80022ee <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8002236:	4b9e      	ldr	r3, [pc, #632]	@ (80024b0 <Shell_Loop+0x288>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d034      	beq.n	80022a8 <Shell_Loop+0x80>
 800223e:	2b0d      	cmp	r3, #13
 8002240:	d142      	bne.n	80022c8 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	2203      	movs	r2, #3
 8002248:	499a      	ldr	r1, [pc, #616]	@ (80024b4 <Shell_Loop+0x28c>)
 800224a:	489b      	ldr	r0, [pc, #620]	@ (80024b8 <Shell_Loop+0x290>)
 800224c:	f005 fec7 	bl	8007fde <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002250:	4b9a      	ldr	r3, [pc, #616]	@ (80024bc <Shell_Loop+0x294>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a9a      	ldr	r2, [pc, #616]	@ (80024c0 <Shell_Loop+0x298>)
 8002256:	2100      	movs	r1, #0
 8002258:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800225a:	4b9a      	ldr	r3, [pc, #616]	@ (80024c4 <Shell_Loop+0x29c>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002260:	4999      	ldr	r1, [pc, #612]	@ (80024c8 <Shell_Loop+0x2a0>)
 8002262:	4897      	ldr	r0, [pc, #604]	@ (80024c0 <Shell_Loop+0x298>)
 8002264:	f008 fe16 	bl	800ae94 <strtok>
 8002268:	4603      	mov	r3, r0
 800226a:	4a98      	ldr	r2, [pc, #608]	@ (80024cc <Shell_Loop+0x2a4>)
 800226c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800226e:	e010      	b.n	8002292 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8002270:	4b94      	ldr	r3, [pc, #592]	@ (80024c4 <Shell_Loop+0x29c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	4993      	ldr	r1, [pc, #588]	@ (80024c4 <Shell_Loop+0x29c>)
 8002278:	600a      	str	r2, [r1, #0]
 800227a:	4a94      	ldr	r2, [pc, #592]	@ (80024cc <Shell_Loop+0x2a4>)
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4994      	ldr	r1, [pc, #592]	@ (80024d0 <Shell_Loop+0x2a8>)
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002284:	4990      	ldr	r1, [pc, #576]	@ (80024c8 <Shell_Loop+0x2a0>)
 8002286:	2000      	movs	r0, #0
 8002288:	f008 fe04 	bl	800ae94 <strtok>
 800228c:	4603      	mov	r3, r0
 800228e:	4a8f      	ldr	r2, [pc, #572]	@ (80024cc <Shell_Loop+0x2a4>)
 8002290:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002292:	4b8e      	ldr	r3, [pc, #568]	@ (80024cc <Shell_Loop+0x2a4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ea      	bne.n	8002270 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800229a:	4b88      	ldr	r3, [pc, #544]	@ (80024bc <Shell_Loop+0x294>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80022a0:	4b8c      	ldr	r3, [pc, #560]	@ (80024d4 <Shell_Loop+0x2ac>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
			break;
 80022a6:	e01f      	b.n	80022e8 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80022a8:	4b84      	ldr	r3, [pc, #528]	@ (80024bc <Shell_Loop+0x294>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1e5a      	subs	r2, r3, #1
 80022ae:	4983      	ldr	r1, [pc, #524]	@ (80024bc <Shell_Loop+0x294>)
 80022b0:	600a      	str	r2, [r1, #0]
 80022b2:	4a83      	ldr	r2, [pc, #524]	@ (80024c0 <Shell_Loop+0x298>)
 80022b4:	2100      	movs	r1, #0
 80022b6:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	2204      	movs	r2, #4
 80022be:	4986      	ldr	r1, [pc, #536]	@ (80024d8 <Shell_Loop+0x2b0>)
 80022c0:	487d      	ldr	r0, [pc, #500]	@ (80024b8 <Shell_Loop+0x290>)
 80022c2:	f005 fe8c 	bl	8007fde <HAL_UART_Transmit>
			break;
 80022c6:	e00f      	b.n	80022e8 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80022c8:	4b7c      	ldr	r3, [pc, #496]	@ (80024bc <Shell_Loop+0x294>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	497b      	ldr	r1, [pc, #492]	@ (80024bc <Shell_Loop+0x294>)
 80022d0:	600a      	str	r2, [r1, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	@ (80024b0 <Shell_Loop+0x288>)
 80022d4:	7811      	ldrb	r1, [r2, #0]
 80022d6:	4a7a      	ldr	r2, [pc, #488]	@ (80024c0 <Shell_Loop+0x298>)
 80022d8:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	2201      	movs	r2, #1
 80022e0:	4973      	ldr	r1, [pc, #460]	@ (80024b0 <Shell_Loop+0x288>)
 80022e2:	4875      	ldr	r0, [pc, #468]	@ (80024b8 <Shell_Loop+0x290>)
 80022e4:	f005 fe7b 	bl	8007fde <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80022e8:	4b70      	ldr	r3, [pc, #448]	@ (80024ac <Shell_Loop+0x284>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80022ee:	4b79      	ldr	r3, [pc, #484]	@ (80024d4 <Shell_Loop+0x2ac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 818e 	beq.w	8002614 <Shell_Loop+0x3ec>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80022f8:	4b75      	ldr	r3, [pc, #468]	@ (80024d0 <Shell_Loop+0x2a8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4977      	ldr	r1, [pc, #476]	@ (80024dc <Shell_Loop+0x2b4>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff8e 	bl	8000220 <strcmp>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	221a      	movs	r2, #26
 8002310:	4973      	ldr	r1, [pc, #460]	@ (80024e0 <Shell_Loop+0x2b8>)
 8002312:	4869      	ldr	r0, [pc, #420]	@ (80024b8 <Shell_Loop+0x290>)
 8002314:	f005 fe63 	bl	8007fde <HAL_UART_Transmit>
 8002318:	e172      	b.n	8002600 <Shell_Loop+0x3d8>
		}
		else if(strcmp(argv[0],"help")==0){
 800231a:	4b6d      	ldr	r3, [pc, #436]	@ (80024d0 <Shell_Loop+0x2a8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4971      	ldr	r1, [pc, #452]	@ (80024e4 <Shell_Loop+0x2bc>)
 8002320:	4618      	mov	r0, r3
 8002322:	f7fd ff7d 	bl	8000220 <strcmp>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10e      	bne.n	800234a <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 800232c:	4a6e      	ldr	r2, [pc, #440]	@ (80024e8 <Shell_Loop+0x2c0>)
 800232e:	2140      	movs	r1, #64	@ 0x40
 8002330:	486e      	ldr	r0, [pc, #440]	@ (80024ec <Shell_Loop+0x2c4>)
 8002332:	f008 fc7b 	bl	800ac2c <sniprintf>
 8002336:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	b29a      	uxth	r2, r3
 800233c:	f04f 33ff 	mov.w	r3, #4294967295
 8002340:	496a      	ldr	r1, [pc, #424]	@ (80024ec <Shell_Loop+0x2c4>)
 8002342:	485d      	ldr	r0, [pc, #372]	@ (80024b8 <Shell_Loop+0x290>)
 8002344:	f005 fe4b 	bl	8007fde <HAL_UART_Transmit>
 8002348:	e15a      	b.n	8002600 <Shell_Loop+0x3d8>
		}

		else if (strcmp(argv[0],"speed")==0)
 800234a:	4b61      	ldr	r3, [pc, #388]	@ (80024d0 <Shell_Loop+0x2a8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4968      	ldr	r1, [pc, #416]	@ (80024f0 <Shell_Loop+0x2c8>)
 8002350:	4618      	mov	r0, r3
 8002352:	f7fd ff65 	bl	8000220 <strcmp>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d12f      	bne.n	80023bc <Shell_Loop+0x194>
		{

			speed_value=atoi(argv[1]);
 800235c:	4b5c      	ldr	r3, [pc, #368]	@ (80024d0 <Shell_Loop+0x2a8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4618      	mov	r0, r3
 8002362:	f007 fe63 	bl	800a02c <atoi>
 8002366:	4603      	mov	r3, r0
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b62      	ldr	r3, [pc, #392]	@ (80024f4 <Shell_Loop+0x2cc>)
 800236c:	801a      	strh	r2, [r3, #0]

			if (speed_value>MAX_SPEED)
 800236e:	4b61      	ldr	r3, [pc, #388]	@ (80024f4 <Shell_Loop+0x2cc>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	2b63      	cmp	r3, #99	@ 0x63
 8002374:	d903      	bls.n	800237e <Shell_Loop+0x156>
			{
				speed_value=MAX_SPEED;
 8002376:	4b5f      	ldr	r3, [pc, #380]	@ (80024f4 <Shell_Loop+0x2cc>)
 8002378:	2263      	movs	r2, #99	@ 0x63
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	e006      	b.n	800238c <Shell_Loop+0x164>
			}
			else if (speed_value<MIN_SPEED)
 800237e:	4b5d      	ldr	r3, [pc, #372]	@ (80024f4 <Shell_Loop+0x2cc>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <Shell_Loop+0x164>
			{
				speed_value=MIN_SPEED;
 8002386:	4b5b      	ldr	r3, [pc, #364]	@ (80024f4 <Shell_Loop+0x2cc>)
 8002388:	2201      	movs	r2, #1
 800238a:	801a      	strh	r2, [r3, #0]
			}


			currentSpeed = setSpeed(speed_value);
 800238c:	4b59      	ldr	r3, [pc, #356]	@ (80024f4 <Shell_Loop+0x2cc>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe8e 	bl	80020b4 <setSpeed>
 8002398:	4603      	mov	r3, r0
 800239a:	4a57      	ldr	r2, [pc, #348]	@ (80024f8 <Shell_Loop+0x2d0>)
 800239c:	6013      	str	r3, [r2, #0]
			//setPWM(speed_value);
			//htim1.Instance->CCR1=(4250-1)*speed_value/100;
			//htim1.Instance->CCR2=(4250-1)*(100-speed_value)/100;
			sprintf(speed,"Speed is changed to %i \r\n",speed_value);
 800239e:	4b55      	ldr	r3, [pc, #340]	@ (80024f4 <Shell_Loop+0x2cc>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4955      	ldr	r1, [pc, #340]	@ (80024fc <Shell_Loop+0x2d4>)
 80023a6:	4856      	ldr	r0, [pc, #344]	@ (8002500 <Shell_Loop+0x2d8>)
 80023a8:	f008 fc74 	bl	800ac94 <siprintf>
			HAL_UART_Transmit(&huart2, speed, sizeof(speed), HAL_MAX_DELAY);
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	2232      	movs	r2, #50	@ 0x32
 80023b2:	4953      	ldr	r1, [pc, #332]	@ (8002500 <Shell_Loop+0x2d8>)
 80023b4:	4840      	ldr	r0, [pc, #256]	@ (80024b8 <Shell_Loop+0x290>)
 80023b6:	f005 fe12 	bl	8007fde <HAL_UART_Transmit>
 80023ba:	e121      	b.n	8002600 <Shell_Loop+0x3d8>
		}
		else if (strcmp(argv[0],"stop")==0)
 80023bc:	4b44      	ldr	r3, [pc, #272]	@ (80024d0 <Shell_Loop+0x2a8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4950      	ldr	r1, [pc, #320]	@ (8002504 <Shell_Loop+0x2dc>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fd ff2c 	bl	8000220 <strcmp>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d110      	bne.n	80023f0 <Shell_Loop+0x1c8>
		{

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80023ce:	2100      	movs	r1, #0
 80023d0:	484d      	ldr	r0, [pc, #308]	@ (8002508 <Shell_Loop+0x2e0>)
 80023d2:	f004 faeb 	bl	80069ac <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80023d6:	2100      	movs	r1, #0
 80023d8:	484b      	ldr	r0, [pc, #300]	@ (8002508 <Shell_Loop+0x2e0>)
 80023da:	f005 fb9f 	bl	8007b1c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80023de:	2104      	movs	r1, #4
 80023e0:	4849      	ldr	r0, [pc, #292]	@ (8002508 <Shell_Loop+0x2e0>)
 80023e2:	f004 fae3 	bl	80069ac <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80023e6:	2104      	movs	r1, #4
 80023e8:	4847      	ldr	r0, [pc, #284]	@ (8002508 <Shell_Loop+0x2e0>)
 80023ea:	f005 fb97 	bl	8007b1c <HAL_TIMEx_PWMN_Stop>
 80023ee:	e107      	b.n	8002600 <Shell_Loop+0x3d8>
			//HAL_TIM_Base_Stop_IT(&htim1);
		}
		else if (strcmp(argv[0],"start")==0)
 80023f0:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <Shell_Loop+0x2a8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4945      	ldr	r1, [pc, #276]	@ (800250c <Shell_Loop+0x2e4>)
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fd ff12 	bl	8000220 <strcmp>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <Shell_Loop+0x216>
		{

			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002402:	2100      	movs	r1, #0
 8002404:	4840      	ldr	r0, [pc, #256]	@ (8002508 <Shell_Loop+0x2e0>)
 8002406:	f004 f9bf 	bl	8006788 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800240a:	2100      	movs	r1, #0
 800240c:	483e      	ldr	r0, [pc, #248]	@ (8002508 <Shell_Loop+0x2e0>)
 800240e:	f005 fac3 	bl	8007998 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002412:	2104      	movs	r1, #4
 8002414:	483c      	ldr	r0, [pc, #240]	@ (8002508 <Shell_Loop+0x2e0>)
 8002416:	f004 f9b7 	bl	8006788 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800241a:	2104      	movs	r1, #4
 800241c:	483a      	ldr	r0, [pc, #232]	@ (8002508 <Shell_Loop+0x2e0>)
 800241e:	f005 fabb 	bl	8007998 <HAL_TIMEx_PWMN_Start>
			//HAL_TIM_Base_Stop_IT(&htim1);

			htim1.Instance->CCR1=(4250-1)*DUTY_CYCLE_50/100;
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <Shell_Loop+0x2e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f640 024c 	movw	r2, #2124	@ 0x84c
 800242a:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2=(4250-1)*DUTY_CYCLE_50/100;
 800242c:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <Shell_Loop+0x2e0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f640 024c 	movw	r2, #2124	@ 0x84c
 8002434:	639a      	str	r2, [r3, #56]	@ 0x38

			currentSpeed = 50;
 8002436:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <Shell_Loop+0x2d0>)
 8002438:	2232      	movs	r2, #50	@ 0x32
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e0e0      	b.n	8002600 <Shell_Loop+0x3d8>
		}
		else if (strcmp(argv[0],"current")==0)
 800243e:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <Shell_Loop+0x2a8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4933      	ldr	r1, [pc, #204]	@ (8002510 <Shell_Loop+0x2e8>)
 8002444:	4618      	mov	r0, r3
 8002446:	f7fd feeb 	bl	8000220 <strcmp>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 80d0 	bne.w	80025f2 <Shell_Loop+0x3ca>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
			}
			*/


			sprintf(uartTxBuffer,"Calculating current... \r\n");
 8002452:	4930      	ldr	r1, [pc, #192]	@ (8002514 <Shell_Loop+0x2ec>)
 8002454:	4825      	ldr	r0, [pc, #148]	@ (80024ec <Shell_Loop+0x2c4>)
 8002456:	f008 fc1d 	bl	800ac94 <siprintf>
			HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	4922      	ldr	r1, [pc, #136]	@ (80024ec <Shell_Loop+0x2c4>)
 8002462:	4815      	ldr	r0, [pc, #84]	@ (80024b8 <Shell_Loop+0x290>)
 8002464:	f005 fdbb 	bl	8007fde <HAL_UART_Transmit>
			memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <Shell_Loop+0x288>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]

			//HAL_TIM_Base_Start(&htim1);
			HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800246e:	217f      	movs	r1, #127	@ 0x7f
 8002470:	4829      	ldr	r0, [pc, #164]	@ (8002518 <Shell_Loop+0x2f0>)
 8002472:	f002 f883 	bl	800457c <HAL_ADCEx_Calibration_Start>
			memset(adc_buffer, NULL, ADC_BUF_SIZE*sizeof(char));
 8002476:	2210      	movs	r2, #16
 8002478:	2100      	movs	r1, #0
 800247a:	4828      	ldr	r0, [pc, #160]	@ (800251c <Shell_Loop+0x2f4>)
 800247c:	f008 fd02 	bl	800ae84 <memset>
			if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUF_SIZE))
 8002480:	2210      	movs	r2, #16
 8002482:	4926      	ldr	r1, [pc, #152]	@ (800251c <Shell_Loop+0x2f4>)
 8002484:	4824      	ldr	r0, [pc, #144]	@ (8002518 <Shell_Loop+0x2f0>)
 8002486:	f000 fe21 	bl	80030cc <HAL_ADC_Start_DMA>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d049      	beq.n	8002524 <Shell_Loop+0x2fc>
			{
				sprintf(uartTxBuffer,"HAL_ERROR \r\n");
 8002490:	4923      	ldr	r1, [pc, #140]	@ (8002520 <Shell_Loop+0x2f8>)
 8002492:	4816      	ldr	r0, [pc, #88]	@ (80024ec <Shell_Loop+0x2c4>)
 8002494:	f008 fbfe 	bl	800ac94 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	2240      	movs	r2, #64	@ 0x40
 800249e:	4913      	ldr	r1, [pc, #76]	@ (80024ec <Shell_Loop+0x2c4>)
 80024a0:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <Shell_Loop+0x290>)
 80024a2:	f005 fd9c 	bl	8007fde <HAL_UART_Transmit>
				Error_Handler();
 80024a6:	f7ff f8f7 	bl	8001698 <Error_Handler>
 80024aa:	e046      	b.n	800253a <Shell_Loop+0x312>
 80024ac:	200005f4 	.word	0x200005f4
 80024b0:	200005f8 	.word	0x200005f8
 80024b4:	20000088 	.word	0x20000088
 80024b8:	200004d4 	.word	0x200004d4
 80024bc:	200006b4 	.word	0x200006b4
 80024c0:	20000674 	.word	0x20000674
 80024c4:	200006dc 	.word	0x200006dc
 80024c8:	0800cfd4 	.word	0x0800cfd4
 80024cc:	200006e0 	.word	0x200006e0
 80024d0:	200006b8 	.word	0x200006b8
 80024d4:	200006e4 	.word	0x200006e4
 80024d8:	2000008c 	.word	0x2000008c
 80024dc:	0800cfd8 	.word	0x0800cfd8
 80024e0:	200000a4 	.word	0x200000a4
 80024e4:	0800cfe8 	.word	0x0800cfe8
 80024e8:	0800cff0 	.word	0x0800cff0
 80024ec:	200005fc 	.word	0x200005fc
 80024f0:	0800d018 	.word	0x0800d018
 80024f4:	2000063c 	.word	0x2000063c
 80024f8:	200000c0 	.word	0x200000c0
 80024fc:	0800d020 	.word	0x0800d020
 8002500:	20000640 	.word	0x20000640
 8002504:	0800d03c 	.word	0x0800d03c
 8002508:	2000043c 	.word	0x2000043c
 800250c:	0800d044 	.word	0x0800d044
 8002510:	0800d04c 	.word	0x0800d04c
 8002514:	0800d054 	.word	0x0800d054
 8002518:	200002b0 	.word	0x200002b0
 800251c:	200006ec 	.word	0x200006ec
 8002520:	0800d070 	.word	0x0800d070
			}else{
				sprintf(uartTxBuffer,"HAL_OK \r\n");
 8002524:	4944      	ldr	r1, [pc, #272]	@ (8002638 <Shell_Loop+0x410>)
 8002526:	4845      	ldr	r0, [pc, #276]	@ (800263c <Shell_Loop+0x414>)
 8002528:	f008 fbb4 	bl	800ac94 <siprintf>
				HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	2240      	movs	r2, #64	@ 0x40
 8002532:	4942      	ldr	r1, [pc, #264]	@ (800263c <Shell_Loop+0x414>)
 8002534:	4842      	ldr	r0, [pc, #264]	@ (8002640 <Shell_Loop+0x418>)
 8002536:	f005 fd52 	bl	8007fde <HAL_UART_Transmit>
			}

			while(!conversionComplete){}
 800253a:	bf00      	nop
 800253c:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <Shell_Loop+0x41c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0fb      	beq.n	800253c <Shell_Loop+0x314>
			sprintf(uartTxBuffer,"Fin while \r\n");
 8002544:	4940      	ldr	r1, [pc, #256]	@ (8002648 <Shell_Loop+0x420>)
 8002546:	483d      	ldr	r0, [pc, #244]	@ (800263c <Shell_Loop+0x414>)
 8002548:	f008 fba4 	bl	800ac94 <siprintf>
							HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	2240      	movs	r2, #64	@ 0x40
 8002552:	493a      	ldr	r1, [pc, #232]	@ (800263c <Shell_Loop+0x414>)
 8002554:	483a      	ldr	r0, [pc, #232]	@ (8002640 <Shell_Loop+0x418>)
 8002556:	f005 fd42 	bl	8007fde <HAL_UART_Transmit>
			float u = (3.3*adcValue)/ADC_RESOLUTION;
 800255a:	4b3c      	ldr	r3, [pc, #240]	@ (800264c <Shell_Loop+0x424>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe f817 	bl	8000594 <__aeabi_i2d>
 8002566:	a32e      	add	r3, pc, #184	@ (adr r3, 8002620 <Shell_Loop+0x3f8>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe f87c 	bl	8000668 <__aeabi_dmul>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <Shell_Loop+0x428>)
 800257e:	f7fe f99d 	bl	80008bc <__aeabi_ddiv>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fb45 	bl	8000c18 <__aeabi_d2f>
 800258e:	4603      	mov	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]
			float i=(u-1.65)/0.05;
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7fe f810 	bl	80005b8 <__aeabi_f2d>
 8002598:	a323      	add	r3, pc, #140	@ (adr r3, 8002628 <Shell_Loop+0x400>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fd feab 	bl	80002f8 <__aeabi_dsub>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	a321      	add	r3, pc, #132	@ (adr r3, 8002630 <Shell_Loop+0x408>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f984 	bl	80008bc <__aeabi_ddiv>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fb2c 	bl	8000c18 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60bb      	str	r3, [r7, #8]
			memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <Shell_Loop+0x42c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
			sprintf(uartTxBuffer,"current: %.3f \r\n", i);
 80025ca:	68b8      	ldr	r0, [r7, #8]
 80025cc:	f7fd fff4 	bl	80005b8 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4920      	ldr	r1, [pc, #128]	@ (8002658 <Shell_Loop+0x430>)
 80025d6:	4819      	ldr	r0, [pc, #100]	@ (800263c <Shell_Loop+0x414>)
 80025d8:	f008 fb5c 	bl	800ac94 <siprintf>
			HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	2240      	movs	r2, #64	@ 0x40
 80025e2:	4916      	ldr	r1, [pc, #88]	@ (800263c <Shell_Loop+0x414>)
 80025e4:	4816      	ldr	r0, [pc, #88]	@ (8002640 <Shell_Loop+0x418>)
 80025e6:	f005 fcfa 	bl	8007fde <HAL_UART_Transmit>
			conversionComplete = 0;
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <Shell_Loop+0x41c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e006      	b.n	8002600 <Shell_Loop+0x3d8>

		}


		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	2214      	movs	r2, #20
 80025f8:	4918      	ldr	r1, [pc, #96]	@ (800265c <Shell_Loop+0x434>)
 80025fa:	4811      	ldr	r0, [pc, #68]	@ (8002640 <Shell_Loop+0x418>)
 80025fc:	f005 fcef 	bl	8007fde <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	221c      	movs	r2, #28
 8002606:	4916      	ldr	r1, [pc, #88]	@ (8002660 <Shell_Loop+0x438>)
 8002608:	480d      	ldr	r0, [pc, #52]	@ (8002640 <Shell_Loop+0x418>)
 800260a:	f005 fce8 	bl	8007fde <HAL_UART_Transmit>
		newCmdReady = 0;
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <Shell_Loop+0x43c>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
	}
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	f3af 8000 	nop.w
 8002620:	66666666 	.word	0x66666666
 8002624:	400a6666 	.word	0x400a6666
 8002628:	66666666 	.word	0x66666666
 800262c:	3ffa6666 	.word	0x3ffa6666
 8002630:	9999999a 	.word	0x9999999a
 8002634:	3fa99999 	.word	0x3fa99999
 8002638:	0800d080 	.word	0x0800d080
 800263c:	200005fc 	.word	0x200005fc
 8002640:	200004d4 	.word	0x200004d4
 8002644:	200006e8 	.word	0x200006e8
 8002648:	0800d08c 	.word	0x0800d08c
 800264c:	2000070c 	.word	0x2000070c
 8002650:	40b00000 	.word	0x40b00000
 8002654:	200005f8 	.word	0x200005f8
 8002658:	0800d09c 	.word	0x0800d09c
 800265c:	20000090 	.word	0x20000090
 8002660:	20000004 	.word	0x20000004
 8002664:	200006e4 	.word	0x200006e4

08002668 <HAL_UART_RxCpltCallback>:

    return sum / FILTER_SIZE;
}
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_UART_RxCpltCallback+0x20>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002676:	2201      	movs	r2, #1
 8002678:	4904      	ldr	r1, [pc, #16]	@ (800268c <HAL_UART_RxCpltCallback+0x24>)
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <HAL_UART_RxCpltCallback+0x28>)
 800267c:	f005 fd46 	bl	800810c <HAL_UART_Receive_IT>
}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200005f4 	.word	0x200005f4
 800268c:	200005f8 	.word	0x200005f8
 8002690:	200004d4 	.word	0x200004d4

08002694 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a4:	d129      	bne.n	80026fa <HAL_ADC_ConvCpltCallback+0x66>
	{
		sprintf(uartTxBuffer,"CC \r\n");
 80026a6:	4917      	ldr	r1, [pc, #92]	@ (8002704 <HAL_ADC_ConvCpltCallback+0x70>)
 80026a8:	4817      	ldr	r0, [pc, #92]	@ (8002708 <HAL_ADC_ConvCpltCallback+0x74>)
 80026aa:	f008 faf3 	bl	800ac94 <siprintf>
		HAL_UART_Transmit(&huart2, uartTxBuffer, sizeof(uartTxBuffer), HAL_MAX_DELAY);
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	4914      	ldr	r1, [pc, #80]	@ (8002708 <HAL_ADC_ConvCpltCallback+0x74>)
 80026b6:	4815      	ldr	r0, [pc, #84]	@ (800270c <HAL_ADC_ConvCpltCallback+0x78>)
 80026b8:	f005 fc91 	bl	8007fde <HAL_UART_Transmit>
		uint32_t sum = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
		for (uint16_t i = 0; i < ADC_BUF_SIZE; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	e00b      	b.n	80026de <HAL_ADC_ConvCpltCallback+0x4a>
		{
		sum += adc_buffer[i];
 80026c6:	897b      	ldrh	r3, [r7, #10]
 80026c8:	4a11      	ldr	r2, [pc, #68]	@ (8002710 <HAL_ADC_ConvCpltCallback+0x7c>)
 80026ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
		for (uint16_t i = 0; i < ADC_BUF_SIZE; i++)
 80026d8:	897b      	ldrh	r3, [r7, #10]
 80026da:	3301      	adds	r3, #1
 80026dc:	817b      	strh	r3, [r7, #10]
 80026de:	897b      	ldrh	r3, [r7, #10]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d9f0      	bls.n	80026c6 <HAL_ADC_ConvCpltCallback+0x32>
		}
		adcValue = sum / ADC_BUF_SIZE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <HAL_ADC_ConvCpltCallback+0x80>)
 80026ec:	801a      	strh	r2, [r3, #0]

		conversionComplete = 1;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_ADC_ConvCpltCallback+0x84>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 80026f4:	4809      	ldr	r0, [pc, #36]	@ (800271c <HAL_ADC_ConvCpltCallback+0x88>)
 80026f6:	f000 fdbd 	bl	8003274 <HAL_ADC_Stop_DMA>
	}
}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	0800d0b0 	.word	0x0800d0b0
 8002708:	200005fc 	.word	0x200005fc
 800270c:	200004d4 	.word	0x200004d4
 8002710:	200006ec 	.word	0x200006ec
 8002714:	2000070c 	.word	0x2000070c
 8002718:	200006e8 	.word	0x200006e8
 800271c:	200002b0 	.word	0x200002b0

08002720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002720:	480d      	ldr	r0, [pc, #52]	@ (8002758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002722:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480d      	ldr	r0, [pc, #52]	@ (800275c <LoopForever+0x6>)
  ldr r1, =_edata
 8002726:	490e      	ldr	r1, [pc, #56]	@ (8002760 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002728:	4a0e      	ldr	r2, [pc, #56]	@ (8002764 <LoopForever+0xe>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0b      	ldr	r2, [pc, #44]	@ (8002768 <LoopForever+0x12>)
  ldr r4, =_ebss
 800273c:	4c0b      	ldr	r4, [pc, #44]	@ (800276c <LoopForever+0x16>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800274a:	f7ff f96f 	bl	8001a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274e:	f008 fc4d 	bl	800afec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002752:	f7fe fefd 	bl	8001550 <main>

08002756 <LoopForever>:

LoopForever:
    b LoopForever
 8002756:	e7fe      	b.n	8002756 <LoopForever>
  ldr   r0, =_estack
 8002758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8002764:	0800d4d4 	.word	0x0800d4d4
  ldr r2, =_sbss
 8002768:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 800276c:	20000860 	.word	0x20000860

08002770 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC3_IRQHandler>

08002772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f002 f946 	bl	8004a0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002782:	200f      	movs	r0, #15
 8002784:	f7fe ffb2 	bl	80016ec <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	e001      	b.n	8002798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002794:	f7fe ff86 	bl	80016a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002798:	79fb      	ldrb	r3, [r7, #7]

}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_IncTick+0x1c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_IncTick+0x20>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a03      	ldr	r2, [pc, #12]	@ (80027c0 <HAL_IncTick+0x1c>)
 80027b4:	6013      	str	r3, [r2, #0]
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	20000710 	.word	0x20000710
 80027c4:	200000c8 	.word	0x200000c8

080027c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTick;
 80027cc:	4b03      	ldr	r3, [pc, #12]	@ (80027dc <HAL_GetTick+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000710 	.word	0x20000710

080027e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e8:	f7ff ffee 	bl	80027c8 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d004      	beq.n	8002804 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_Delay+0x40>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4413      	add	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002804:	bf00      	nop
 8002806:	f7ff ffdf 	bl	80027c8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	429a      	cmp	r2, r3
 8002814:	d8f7      	bhi.n	8002806 <HAL_Delay+0x26>
  {
  }
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200000c8 	.word	0x200000c8

08002824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3360      	adds	r3, #96	@ 0x60
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <LL_ADC_SetOffset+0x44>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	03fff000 	.word	0x03fff000

080028d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3360      	adds	r3, #96	@ 0x60
 80028e2:	461a      	mov	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3360      	adds	r3, #96	@ 0x60
 8002910:	461a      	mov	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3360      	adds	r3, #96	@ 0x60
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	431a      	orrs	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3360      	adds	r3, #96	@ 0x60
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	431a      	orrs	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	615a      	str	r2, [r3, #20]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3330      	adds	r3, #48	@ 0x30
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	211f      	movs	r1, #31
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	f003 011f 	and.w	r1, r3, #31
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	431a      	orrs	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	0e5b      	lsrs	r3, r3, #25
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	0d1b      	lsrs	r3, r3, #20
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2107      	movs	r1, #7
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0d1b      	lsrs	r3, r3, #20
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8002b10 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10a      	bne.n	8002aee <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002aec:	e00a      	b.n	8002b04 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	407f0000 	.word	0x407f0000

08002b14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 031f 	and.w	r3, r3, #31
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6093      	str	r3, [r2, #8]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b84:	d101      	bne.n	8002b8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c24:	f043 0202 	orr.w	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <LL_ADC_IsEnabled+0x18>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <LL_ADC_IsEnabled+0x1a>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_IsDisableOngoing+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_IsDisableOngoing+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c98:	f043 0204 	orr.w	r2, r3, #4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc0:	f043 0210 	orr.w	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d101      	bne.n	8002cec <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d0e:	f043 0220 	orr.w	r2, r3, #32
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d101      	bne.n	8002d3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1af      	b.n	80030c2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe f9f9 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fef1 	bl	8002b70 <LL_ADC_IsDeepPowerDownEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fed7 	bl	8002b4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff0c 	bl	8002bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fef0 	bl	8002b98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002db8:	4b9f      	ldr	r3, [pc, #636]	@ (8003038 <HAL_ADC_Init+0x2f0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	4a9f      	ldr	r2, [pc, #636]	@ (800303c <HAL_ADC_Init+0x2f4>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dcc:	e002      	b.n	8002dd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff feee 	bl	8002bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10d      	bne.n	8002e06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dee:	f043 0210 	orr.w	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff62 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8002e10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 8148 	bne.w	80030b0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 8144 	bne.w	80030b0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e30:	f043 0202 	orr.w	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fefb 	bl	8002c38 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d141      	bne.n	8002ecc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_Init+0x114>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7a      	ldr	r2, [pc, #488]	@ (8003040 <HAL_ADC_Init+0x2f8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d10f      	bne.n	8002e7c <HAL_ADC_Init+0x134>
 8002e5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e60:	f7ff feea 	bl	8002c38 <LL_ADC_IsEnabled>
 8002e64:	4604      	mov	r4, r0
 8002e66:	4876      	ldr	r0, [pc, #472]	@ (8003040 <HAL_ADC_Init+0x2f8>)
 8002e68:	f7ff fee6 	bl	8002c38 <LL_ADC_IsEnabled>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4323      	orrs	r3, r4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e012      	b.n	8002ea2 <HAL_ADC_Init+0x15a>
 8002e7c:	4871      	ldr	r0, [pc, #452]	@ (8003044 <HAL_ADC_Init+0x2fc>)
 8002e7e:	f7ff fedb 	bl	8002c38 <LL_ADC_IsEnabled>
 8002e82:	4604      	mov	r4, r0
 8002e84:	4870      	ldr	r0, [pc, #448]	@ (8003048 <HAL_ADC_Init+0x300>)
 8002e86:	f7ff fed7 	bl	8002c38 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	431c      	orrs	r4, r3
 8002e8e:	486f      	ldr	r0, [pc, #444]	@ (800304c <HAL_ADC_Init+0x304>)
 8002e90:	f7ff fed2 	bl	8002c38 <LL_ADC_IsEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4323      	orrs	r3, r4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d012      	beq.n	8002ecc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eae:	d004      	beq.n	8002eba <HAL_ADC_Init+0x172>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a62      	ldr	r2, [pc, #392]	@ (8003040 <HAL_ADC_Init+0x2f8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_Init+0x176>
 8002eba:	4a65      	ldr	r2, [pc, #404]	@ (8003050 <HAL_ADC_Init+0x308>)
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADC_Init+0x178>
 8002ebe:	4a65      	ldr	r2, [pc, #404]	@ (8003054 <HAL_ADC_Init+0x30c>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f7ff fcac 	bl	8002824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7f5b      	ldrb	r3, [r3, #29]
 8002ed0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002edc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ee2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eea:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d106      	bne.n	8002f08 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	045b      	lsls	r3, r3, #17
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003058 <HAL_ADC_Init+0x310>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff febe 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8002f58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fedf 	bl	8002d22 <LL_ADC_INJ_IsConversionOngoing>
 8002f64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d17f      	bne.n	800306c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d17c      	bne.n	800306c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f76:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f7e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f8e:	f023 0302 	bic.w	r3, r3, #2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	69b9      	ldr	r1, [r7, #24]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002fb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fbc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6911      	ldr	r1, [r2, #16]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002fd2:	e013      	b.n	8002ffc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fe2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ff8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003002:	2b01      	cmp	r3, #1
 8003004:	d12a      	bne.n	800305c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800301c:	4311      	orrs	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003022:	4311      	orrs	r1, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003028:	430a      	orrs	r2, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	e019      	b.n	800306c <HAL_ADC_Init+0x324>
 8003038:	20000000 	.word	0x20000000
 800303c:	053e2d63 	.word	0x053e2d63
 8003040:	50000100 	.word	0x50000100
 8003044:	50000400 	.word	0x50000400
 8003048:	50000500 	.word	0x50000500
 800304c:	50000600 	.word	0x50000600
 8003050:	50000300 	.word	0x50000300
 8003054:	50000700 	.word	0x50000700
 8003058:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10c      	bne.n	800308e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f023 010f 	bic.w	r1, r3, #15
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	1e5a      	subs	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	631a      	str	r2, [r3, #48]	@ 0x30
 800308c:	e007      	b.n	800309e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 020f 	bic.w	r2, r2, #15
 800309c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	f023 0303 	bic.w	r3, r3, #3
 80030a6:	f043 0201 	orr.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ae:	e007      	b.n	80030c0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3724      	adds	r7, #36	@ 0x24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}
 80030ca:	bf00      	nop

080030cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030e0:	d004      	beq.n	80030ec <HAL_ADC_Start_DMA+0x20>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003250 <HAL_ADC_Start_DMA+0x184>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_Start_DMA+0x24>
 80030ec:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <HAL_ADC_Start_DMA+0x188>)
 80030ee:	e000      	b.n	80030f2 <HAL_ADC_Start_DMA+0x26>
 80030f0:	4b59      	ldr	r3, [pc, #356]	@ (8003258 <HAL_ADC_Start_DMA+0x18c>)
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fd0e 	bl	8002b14 <LL_ADC_GetMultimode>
 80030f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fde8 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 809b 	bne.w	8003242 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADC_Start_DMA+0x4e>
 8003116:	2302      	movs	r3, #2
 8003118:	e096      	b.n	8003248 <HAL_ADC_Start_DMA+0x17c>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a4d      	ldr	r2, [pc, #308]	@ (800325c <HAL_ADC_Start_DMA+0x190>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d008      	beq.n	800313e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b05      	cmp	r3, #5
 8003136:	d002      	beq.n	800313e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b09      	cmp	r3, #9
 800313c:	d17a      	bne.n	8003234 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f001 f874 	bl	800422c <ADC_Enable>
 8003144:	4603      	mov	r3, r0
 8003146:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d16d      	bne.n	800322a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3a      	ldr	r2, [pc, #232]	@ (8003250 <HAL_ADC_Start_DMA+0x184>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_ADC_Start_DMA+0xb4>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3b      	ldr	r2, [pc, #236]	@ (8003260 <HAL_ADC_Start_DMA+0x194>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d002      	beq.n	800317c <HAL_ADC_Start_DMA+0xb0>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e003      	b.n	8003184 <HAL_ADC_Start_DMA+0xb8>
 800317c:	4b39      	ldr	r3, [pc, #228]	@ (8003264 <HAL_ADC_Start_DMA+0x198>)
 800317e:	e001      	b.n	8003184 <HAL_ADC_Start_DMA+0xb8>
 8003180:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	4293      	cmp	r3, r2
 800318a:	d002      	beq.n	8003192 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	f023 0206 	bic.w	r2, r3, #6
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80031b6:	e002      	b.n	80031be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	4a29      	ldr	r2, [pc, #164]	@ (8003268 <HAL_ADC_Start_DMA+0x19c>)
 80031c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	4a28      	ldr	r2, [pc, #160]	@ (800326c <HAL_ADC_Start_DMA+0x1a0>)
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d2:	4a27      	ldr	r2, [pc, #156]	@ (8003270 <HAL_ADC_Start_DMA+0x1a4>)
 80031d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	221c      	movs	r2, #28
 80031dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0210 	orr.w	r2, r2, #16
 80031f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3340      	adds	r3, #64	@ 0x40
 8003210:	4619      	mov	r1, r3
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f001 fcd5 	bl	8004bc4 <HAL_DMA_Start_IT>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fd2e 	bl	8002c84 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003228:	e00d      	b.n	8003246 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003232:	e008      	b.n	8003246 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003240:	e001      	b.n	8003246 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003246:	7dfb      	ldrb	r3, [r7, #23]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	50000100 	.word	0x50000100
 8003254:	50000300 	.word	0x50000300
 8003258:	50000700 	.word	0x50000700
 800325c:	50000600 	.word	0x50000600
 8003260:	50000500 	.word	0x50000500
 8003264:	50000400 	.word	0x50000400
 8003268:	080043af 	.word	0x080043af
 800326c:	08004487 	.word	0x08004487
 8003270:	080044a3 	.word	0x080044a3

08003274 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_ADC_Stop_DMA+0x16>
 8003286:	2302      	movs	r3, #2
 8003288:	e051      	b.n	800332e <HAL_ADC_Stop_DMA+0xba>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003292:	2103      	movs	r1, #3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 ff0d 	bl	80040b4 <ADC_ConversionStop>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d13f      	bne.n	8003324 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d10f      	bne.n	80032e2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fcf7 	bl	8004cba <HAL_DMA_Abort>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0210 	bic.w	r2, r2, #16
 80032f0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fff9 	bl	80042f0 <ADC_Disable>
 80032fe:	4603      	mov	r3, r0
 8003300:	73fb      	strb	r3, [r7, #15]
 8003302:	e002      	b.n	800330a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fff3 	bl	80042f0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003314:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800335c:	d004      	beq.n	8003368 <HAL_ADC_IRQHandler+0x30>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8e      	ldr	r2, [pc, #568]	@ (800359c <HAL_ADC_IRQHandler+0x264>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_ADC_IRQHandler+0x34>
 8003368:	4b8d      	ldr	r3, [pc, #564]	@ (80035a0 <HAL_ADC_IRQHandler+0x268>)
 800336a:	e000      	b.n	800336e <HAL_ADC_IRQHandler+0x36>
 800336c:	4b8d      	ldr	r3, [pc, #564]	@ (80035a4 <HAL_ADC_IRQHandler+0x26c>)
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fbd0 	bl	8002b14 <LL_ADC_GetMultimode>
 8003374:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d017      	beq.n	80033b0 <HAL_ADC_IRQHandler+0x78>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d012      	beq.n	80033b0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f001 f974 	bl	8004690 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2202      	movs	r2, #2
 80033ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d004      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x8c>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8094 	beq.w	80034f8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 808e 	beq.w	80034f8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fae5 	bl	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d072      	beq.n	80034ea <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a64      	ldr	r2, [pc, #400]	@ (800359c <HAL_ADC_IRQHandler+0x264>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_ADC_IRQHandler+0xea>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a65      	ldr	r2, [pc, #404]	@ (80035a8 <HAL_ADC_IRQHandler+0x270>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d002      	beq.n	800341e <HAL_ADC_IRQHandler+0xe6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	e003      	b.n	8003426 <HAL_ADC_IRQHandler+0xee>
 800341e:	4b63      	ldr	r3, [pc, #396]	@ (80035ac <HAL_ADC_IRQHandler+0x274>)
 8003420:	e001      	b.n	8003426 <HAL_ADC_IRQHandler+0xee>
 8003422:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	4293      	cmp	r3, r2
 800342c:	d008      	beq.n	8003440 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d002      	beq.n	8003440 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b09      	cmp	r3, #9
 800343e:	d104      	bne.n	800344a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	e014      	b.n	8003474 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	@ (800359c <HAL_ADC_IRQHandler+0x264>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d009      	beq.n	8003468 <HAL_ADC_IRQHandler+0x130>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a53      	ldr	r2, [pc, #332]	@ (80035a8 <HAL_ADC_IRQHandler+0x270>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d002      	beq.n	8003464 <HAL_ADC_IRQHandler+0x12c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e003      	b.n	800346c <HAL_ADC_IRQHandler+0x134>
 8003464:	4b51      	ldr	r3, [pc, #324]	@ (80035ac <HAL_ADC_IRQHandler+0x274>)
 8003466:	e001      	b.n	800346c <HAL_ADC_IRQHandler+0x134>
 8003468:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800346c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d135      	bne.n	80034ea <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d12e      	bne.n	80034ea <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fc1f 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d11a      	bne.n	80034d2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 020c 	bic.w	r2, r2, #12
 80034aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d112      	bne.n	80034ea <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034d0:	e00b      	b.n	80034ea <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d6:	f043 0210 	orr.w	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff f8d2 	bl	8002694 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	220c      	movs	r2, #12
 80034f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <HAL_ADC_IRQHandler+0x1d4>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80b3 	beq.w	800367e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80ad 	beq.w	800367e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fa80 	bl	8002a46 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003546:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fa3b 	bl	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003552:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a10      	ldr	r2, [pc, #64]	@ (800359c <HAL_ADC_IRQHandler+0x264>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_ADC_IRQHandler+0x23a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a11      	ldr	r2, [pc, #68]	@ (80035a8 <HAL_ADC_IRQHandler+0x270>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d002      	beq.n	800356e <HAL_ADC_IRQHandler+0x236>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	e003      	b.n	8003576 <HAL_ADC_IRQHandler+0x23e>
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <HAL_ADC_IRQHandler+0x274>)
 8003570:	e001      	b.n	8003576 <HAL_ADC_IRQHandler+0x23e>
 8003572:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	4293      	cmp	r3, r2
 800357c:	d008      	beq.n	8003590 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b06      	cmp	r3, #6
 8003588:	d002      	beq.n	8003590 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b07      	cmp	r3, #7
 800358e:	d10f      	bne.n	80035b0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	e01f      	b.n	80035da <HAL_ADC_IRQHandler+0x2a2>
 800359a:	bf00      	nop
 800359c:	50000100 	.word	0x50000100
 80035a0:	50000300 	.word	0x50000300
 80035a4:	50000700 	.word	0x50000700
 80035a8:	50000500 	.word	0x50000500
 80035ac:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a8b      	ldr	r2, [pc, #556]	@ (80037e4 <HAL_ADC_IRQHandler+0x4ac>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_ADC_IRQHandler+0x296>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a8a      	ldr	r2, [pc, #552]	@ (80037e8 <HAL_ADC_IRQHandler+0x4b0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d002      	beq.n	80035ca <HAL_ADC_IRQHandler+0x292>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	e003      	b.n	80035d2 <HAL_ADC_IRQHandler+0x29a>
 80035ca:	4b88      	ldr	r3, [pc, #544]	@ (80037ec <HAL_ADC_IRQHandler+0x4b4>)
 80035cc:	e001      	b.n	80035d2 <HAL_ADC_IRQHandler+0x29a>
 80035ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d047      	beq.n	8003670 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_ADC_IRQHandler+0x2c2>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03f      	beq.n	8003670 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d13a      	bne.n	8003670 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d133      	bne.n	8003670 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d12e      	bne.n	8003670 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fb83 	bl	8002d22 <LL_ADC_INJ_IsConversionOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11a      	bne.n	8003658 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003630:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d112      	bne.n	8003670 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003656:	e00b      	b.n	8003670 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	f043 0210 	orr.w	r2, r3, #16
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 ffe5 	bl	8004640 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2260      	movs	r2, #96	@ 0x60
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d011      	beq.n	80036ac <HAL_ADC_IRQHandler+0x374>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00c      	beq.n	80036ac <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8b4 	bl	800380c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2280      	movs	r2, #128	@ 0x80
 80036aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_ADC_IRQHandler+0x3a4>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 ffcb 	bl	8004668 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <HAL_ADC_IRQHandler+0x3d4>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 ffbd 	bl	800467c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d043      	beq.n	800379e <HAL_ADC_IRQHandler+0x466>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03e      	beq.n	800379e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003728:	2301      	movs	r3, #1
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	e021      	b.n	8003772 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800373c:	d004      	beq.n	8003748 <HAL_ADC_IRQHandler+0x410>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a28      	ldr	r2, [pc, #160]	@ (80037e4 <HAL_ADC_IRQHandler+0x4ac>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_ADC_IRQHandler+0x414>
 8003748:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <HAL_ADC_IRQHandler+0x4b8>)
 800374a:	e000      	b.n	800374e <HAL_ADC_IRQHandler+0x416>
 800374c:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_ADC_IRQHandler+0x4bc>)
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f9ee 	bl	8002b30 <LL_ADC_GetMultiDMATransfer>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800375a:	2301      	movs	r3, #1
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
 800375e:	e008      	b.n	8003772 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800376e:	2301      	movs	r3, #1
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10e      	bne.n	8003796 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003788:	f043 0202 	orr.w	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f845 	bl	8003820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2210      	movs	r2, #16
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d018      	beq.n	80037da <HAL_ADC_IRQHandler+0x4a2>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d013      	beq.n	80037da <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c2:	f043 0208 	orr.w	r2, r3, #8
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037d2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 ff3d 	bl	8004654 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80037da:	bf00      	nop
 80037dc:	3728      	adds	r7, #40	@ 0x28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	50000100 	.word	0x50000100
 80037e8:	50000500 	.word	0x50000500
 80037ec:	50000400 	.word	0x50000400
 80037f0:	50000300 	.word	0x50000300
 80037f4:	50000700 	.word	0x50000700

080037f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0b6      	sub	sp, #216	@ 0xd8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800384e:	2b01      	cmp	r3, #1
 8003850:	d102      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x24>
 8003852:	2302      	movs	r3, #2
 8003854:	f000 bc13 	b.w	800407e <HAL_ADC_ConfigChannel+0x84a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fa35 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 83f3 	bne.w	8004058 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	f7ff f8b5 	bl	80029ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fa23 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 800388e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fa43 	bl	8002d22 <LL_ADC_INJ_IsConversionOngoing>
 800389c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f040 81d9 	bne.w	8003c5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 81d4 	bne.w	8003c5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038bc:	d10f      	bne.n	80038de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7ff f8cf 	bl	8002a6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f863 	bl	80029a2 <LL_ADC_SetSamplingTimeCommonConfig>
 80038dc:	e00e      	b.n	80038fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f7ff f8be 	bl	8002a6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2100      	movs	r1, #0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff f853 	bl	80029a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	08db      	lsrs	r3, r3, #3
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d022      	beq.n	8003964 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800392e:	f7fe ffad 	bl	800288c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6919      	ldr	r1, [r3, #16]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fe fff9 	bl	8002936 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6919      	ldr	r1, [r3, #16]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	7f1b      	ldrb	r3, [r3, #28]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d102      	bne.n	800395a <HAL_ADC_ConfigChannel+0x126>
 8003954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003958:	e000      	b.n	800395c <HAL_ADC_ConfigChannel+0x128>
 800395a:	2300      	movs	r3, #0
 800395c:	461a      	mov	r2, r3
 800395e:	f7ff f805 	bl	800296c <LL_ADC_SetOffsetSaturation>
 8003962:	e17b      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe ffb2 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003970:	4603      	mov	r3, r0
 8003972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x15c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe ffa7 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003986:	4603      	mov	r3, r0
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	f003 021f 	and.w	r2, r3, #31
 800398e:	e01e      	b.n	80039ce <HAL_ADC_ConfigChannel+0x19a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe ff9c 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e004      	b.n	80039cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80039c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_ADC_ConfigChannel+0x1b2>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	0e9b      	lsrs	r3, r3, #26
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	e018      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x1e4>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80039fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	e004      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d106      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2200      	movs	r2, #0
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe ff6b 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe ff4f 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x222>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff44 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	f003 021f 	and.w	r2, r3, #31
 8003a54:	e01e      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x260>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe ff39 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	e004      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x278>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	0e9b      	lsrs	r3, r3, #26
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	e018      	b.n	8003ade <HAL_ADC_ConfigChannel+0x2aa>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003ac0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e004      	b.n	8003ade <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d106      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff08 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2102      	movs	r1, #2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe feec 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x2e8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe fee1 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	0e9b      	lsrs	r3, r3, #26
 8003b16:	f003 021f 	and.w	r2, r3, #31
 8003b1a:	e01e      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x326>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fed6 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	e004      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003b4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b52:	fab3 f383 	clz	r3, r3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x33e>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	0e9b      	lsrs	r3, r3, #26
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	e016      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x36c>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b92:	2320      	movs	r3, #32
 8003b94:	e004      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d106      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fea7 	bl	8002900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe fe8b 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x3aa>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2103      	movs	r1, #3
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fe80 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	0e9b      	lsrs	r3, r3, #26
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	e017      	b.n	8003c0e <HAL_ADC_ConfigChannel+0x3da>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2103      	movs	r1, #3
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe fe75 	bl	80028d4 <LL_ADC_GetOffsetChannel>
 8003bea:	4603      	mov	r3, r0
 8003bec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bf8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003c00:	2320      	movs	r3, #32
 8003c02:	e003      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x3f2>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	0e9b      	lsrs	r3, r3, #26
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	e011      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x416>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e003      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d106      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	2103      	movs	r1, #3
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fe52 	bl	8002900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe ffe9 	bl	8002c38 <LL_ADC_IsEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 813d 	bne.w	8003ee8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f7fe ff22 	bl	8002ac4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4aa2      	ldr	r2, [pc, #648]	@ (8003f10 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f040 812e 	bne.w	8003ee8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x480>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0e9b      	lsrs	r3, r3, #26
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	2b09      	cmp	r3, #9
 8003caa:	bf94      	ite	ls
 8003cac:	2301      	movls	r3, #1
 8003cae:	2300      	movhi	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e019      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x4b4>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cc4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ccc:	2320      	movs	r3, #32
 8003cce:	e003      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2b09      	cmp	r3, #9
 8003ce0:	bf94      	ite	ls
 8003ce2:	2301      	movls	r3, #1
 8003ce4:	2300      	movhi	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d079      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x4d4>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	3301      	adds	r3, #1
 8003d00:	069b      	lsls	r3, r3, #26
 8003d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d06:	e015      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x500>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d10:	fa93 f3a3 	rbit	r3, r3
 8003d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003d20:	2320      	movs	r3, #32
 8003d22:	e003      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	069b      	lsls	r3, r3, #26
 8003d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x520>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0e9b      	lsrs	r3, r3, #26
 8003d46:	3301      	adds	r3, #1
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	e017      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x550>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	ea42 0103 	orr.w	r1, r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x576>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f003 021f 	and.w	r2, r3, #31
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	051b      	lsls	r3, r3, #20
 8003da8:	e018      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x5a8>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e003      	b.n	8003dce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc8:	fab3 f383 	clz	r3, r3
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	e07e      	b.n	8003ede <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d107      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x5c8>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	0e9b      	lsrs	r3, r3, #26
 8003df2:	3301      	adds	r3, #1
 8003df4:	069b      	lsls	r3, r3, #26
 8003df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dfa:	e015      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x5f4>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003e14:	2320      	movs	r3, #32
 8003e16:	e003      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	069b      	lsls	r3, r3, #26
 8003e24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x614>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	0e9b      	lsrs	r3, r3, #26
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	e017      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x644>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	61fb      	str	r3, [r7, #28]
  return result;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e60:	2320      	movs	r3, #32
 8003e62:	e003      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	ea42 0103 	orr.w	r1, r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x670>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	0e9b      	lsrs	r3, r3, #26
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f003 021f 	and.w	r2, r3, #31
 8003e94:	4613      	mov	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b1e      	subs	r3, #30
 8003e9c:	051b      	lsls	r3, r3, #20
 8003e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ea2:	e01b      	b.n	8003edc <HAL_ADC_ConfigChannel+0x6a8>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	613b      	str	r3, [r7, #16]
  return result;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003ebc:	2320      	movs	r3, #32
 8003ebe:	e003      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f003 021f 	and.w	r2, r3, #31
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3b1e      	subs	r3, #30
 8003ed6:	051b      	lsls	r3, r3, #20
 8003ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003edc:	430b      	orrs	r3, r1
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	6892      	ldr	r2, [r2, #8]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f7fe fdc2 	bl	8002a6c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_ADC_ConfigChannel+0x6e0>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80be 	beq.w	8004072 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efe:	d004      	beq.n	8003f0a <HAL_ADC_ConfigChannel+0x6d6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a04      	ldr	r2, [pc, #16]	@ (8003f18 <HAL_ADC_ConfigChannel+0x6e4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10a      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x6ec>
 8003f0a:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <HAL_ADC_ConfigChannel+0x6e8>)
 8003f0c:	e009      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x6ee>
 8003f0e:	bf00      	nop
 8003f10:	407f0000 	.word	0x407f0000
 8003f14:	80080000 	.word	0x80080000
 8003f18:	50000100 	.word	0x50000100
 8003f1c:	50000300 	.word	0x50000300
 8003f20:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <HAL_ADC_ConfigChannel+0x854>)
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fca4 	bl	8002870 <LL_ADC_GetCommonPathInternalCh>
 8003f28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a56      	ldr	r2, [pc, #344]	@ (800408c <HAL_ADC_ConfigChannel+0x858>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0x70c>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a55      	ldr	r2, [pc, #340]	@ (8004090 <HAL_ADC_ConfigChannel+0x85c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d13a      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d134      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f54:	d005      	beq.n	8003f62 <HAL_ADC_ConfigChannel+0x72e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004094 <HAL_ADC_ConfigChannel+0x860>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	f040 8085 	bne.w	800406c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f6a:	d004      	beq.n	8003f76 <HAL_ADC_ConfigChannel+0x742>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a49      	ldr	r2, [pc, #292]	@ (8004098 <HAL_ADC_ConfigChannel+0x864>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x746>
 8003f76:	4a49      	ldr	r2, [pc, #292]	@ (800409c <HAL_ADC_ConfigChannel+0x868>)
 8003f78:	e000      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x748>
 8003f7a:	4a43      	ldr	r2, [pc, #268]	@ (8004088 <HAL_ADC_ConfigChannel+0x854>)
 8003f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f7fe fc5f 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f8c:	4b44      	ldr	r3, [pc, #272]	@ (80040a0 <HAL_ADC_ConfigChannel+0x86c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	4a44      	ldr	r2, [pc, #272]	@ (80040a4 <HAL_ADC_ConfigChannel+0x870>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fa6:	e002      	b.n	8003fae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f9      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fb4:	e05a      	b.n	800406c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	@ (80040a8 <HAL_ADC_ConfigChannel+0x874>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d125      	bne.n	800400c <HAL_ADC_ConfigChannel+0x7d8>
 8003fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d11f      	bne.n	800400c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a31      	ldr	r2, [pc, #196]	@ (8004098 <HAL_ADC_ConfigChannel+0x864>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d104      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x7ac>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a34      	ldr	r2, [pc, #208]	@ (80040ac <HAL_ADC_ConfigChannel+0x878>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d047      	beq.n	8004070 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe8:	d004      	beq.n	8003ff4 <HAL_ADC_ConfigChannel+0x7c0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2a      	ldr	r2, [pc, #168]	@ (8004098 <HAL_ADC_ConfigChannel+0x864>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x7c4>
 8003ff4:	4a29      	ldr	r2, [pc, #164]	@ (800409c <HAL_ADC_ConfigChannel+0x868>)
 8003ff6:	e000      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x7c6>
 8003ff8:	4a23      	ldr	r2, [pc, #140]	@ (8004088 <HAL_ADC_ConfigChannel+0x854>)
 8003ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f7fe fc20 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800400a:	e031      	b.n	8004070 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a27      	ldr	r2, [pc, #156]	@ (80040b0 <HAL_ADC_ConfigChannel+0x87c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12d      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d127      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1c      	ldr	r2, [pc, #112]	@ (8004098 <HAL_ADC_ConfigChannel+0x864>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004034:	d004      	beq.n	8004040 <HAL_ADC_ConfigChannel+0x80c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a17      	ldr	r2, [pc, #92]	@ (8004098 <HAL_ADC_ConfigChannel+0x864>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x810>
 8004040:	4a16      	ldr	r2, [pc, #88]	@ (800409c <HAL_ADC_ConfigChannel+0x868>)
 8004042:	e000      	b.n	8004046 <HAL_ADC_ConfigChannel+0x812>
 8004044:	4a10      	ldr	r2, [pc, #64]	@ (8004088 <HAL_ADC_ConfigChannel+0x854>)
 8004046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800404a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fe fbfa 	bl	800284a <LL_ADC_SetCommonPathInternalCh>
 8004056:	e00c      	b.n	8004072 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405c:	f043 0220 	orr.w	r2, r3, #32
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800406a:	e002      	b.n	8004072 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004070:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800407a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800407e:	4618      	mov	r0, r3
 8004080:	37d8      	adds	r7, #216	@ 0xd8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	50000700 	.word	0x50000700
 800408c:	c3210000 	.word	0xc3210000
 8004090:	90c00010 	.word	0x90c00010
 8004094:	50000600 	.word	0x50000600
 8004098:	50000100 	.word	0x50000100
 800409c:	50000300 	.word	0x50000300
 80040a0:	20000000 	.word	0x20000000
 80040a4:	053e2d63 	.word	0x053e2d63
 80040a8:	c7520000 	.word	0xc7520000
 80040ac:	50000500 	.word	0x50000500
 80040b0:	cb840000 	.word	0xcb840000

080040b4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fe02 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 80040d0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fe23 	bl	8002d22 <LL_ADC_INJ_IsConversionOngoing>
 80040dc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d103      	bne.n	80040ec <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8098 	beq.w	800421c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d02a      	beq.n	8004150 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7f5b      	ldrb	r3, [r3, #29]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d126      	bne.n	8004150 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	7f1b      	ldrb	r3, [r3, #28]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d122      	bne.n	8004150 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800410a:	2301      	movs	r3, #1
 800410c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800410e:	e014      	b.n	800413a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4a45      	ldr	r2, [pc, #276]	@ (8004228 <ADC_ConversionStop+0x174>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d90d      	bls.n	8004134 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411c:	f043 0210 	orr.w	r2, r3, #16
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004128:	f043 0201 	orr.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e074      	b.n	800421e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d1e3      	bne.n	8004110 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2240      	movs	r2, #64	@ 0x40
 800414e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d014      	beq.n	8004180 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fdba 	bl	8002cd4 <LL_ADC_REG_IsConversionOngoing>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd77 	bl	8002c5e <LL_ADC_IsDisableOngoing>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fd96 	bl	8002cac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d014      	beq.n	80041b0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fdc9 	bl	8002d22 <LL_ADC_INJ_IsConversionOngoing>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fd5f 	bl	8002c5e <LL_ADC_IsDisableOngoing>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fda5 	bl	8002cfa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d005      	beq.n	80041c2 <ADC_ConversionStop+0x10e>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d105      	bne.n	80041c8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80041bc:	230c      	movs	r3, #12
 80041be:	617b      	str	r3, [r7, #20]
        break;
 80041c0:	e005      	b.n	80041ce <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80041c2:	2308      	movs	r3, #8
 80041c4:	617b      	str	r3, [r7, #20]
        break;
 80041c6:	e002      	b.n	80041ce <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80041c8:	2304      	movs	r3, #4
 80041ca:	617b      	str	r3, [r7, #20]
        break;
 80041cc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80041ce:	f7fe fafb 	bl	80027c8 <HAL_GetTick>
 80041d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041d4:	e01b      	b.n	800420e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041d6:	f7fe faf7 	bl	80027c8 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d914      	bls.n	800420e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	f043 0210 	orr.w	r2, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e007      	b.n	800421e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1dc      	bne.n	80041d6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	a33fffff 	.word	0xa33fffff

0800422c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7fe fcfd 	bl	8002c38 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d14d      	bne.n	80042e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <ADC_Enable+0xc0>)
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	f043 0210 	orr.w	r2, r3, #16
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004262:	f043 0201 	orr.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e039      	b.n	80042e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fcb8 	bl	8002be8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004278:	f7fe faa6 	bl	80027c8 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800427e:	e028      	b.n	80042d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fcd7 	bl	8002c38 <LL_ADC_IsEnabled>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe fca7 	bl	8002be8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800429a:	f7fe fa95 	bl	80027c8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d914      	bls.n	80042d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d00d      	beq.n	80042d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	f043 0210 	orr.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c6:	f043 0201 	orr.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e007      	b.n	80042e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d1cf      	bne.n	8004280 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	8000003f 	.word	0x8000003f

080042f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe fcae 	bl	8002c5e <LL_ADC_IsDisableOngoing>
 8004302:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fc95 	bl	8002c38 <LL_ADC_IsEnabled>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d047      	beq.n	80043a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d144      	bne.n	80043a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030d 	and.w	r3, r3, #13
 8004324:	2b01      	cmp	r3, #1
 8004326:	d10c      	bne.n	8004342 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fc6f 	bl	8002c10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2203      	movs	r2, #3
 8004338:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800433a:	f7fe fa45 	bl	80027c8 <HAL_GetTick>
 800433e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004340:	e029      	b.n	8004396 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004346:	f043 0210 	orr.w	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004352:	f043 0201 	orr.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e023      	b.n	80043a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800435e:	f7fe fa33 	bl	80027c8 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d914      	bls.n	8004396 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437e:	f043 0210 	orr.w	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e007      	b.n	80043a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1dc      	bne.n	800435e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d14b      	bne.n	8004460 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d021      	beq.n	8004426 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe faee 	bl	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d032      	beq.n	8004458 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d12b      	bne.n	8004458 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11f      	bne.n	8004458 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441c:	f043 0201 	orr.w	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004424:	e018      	b.n	8004458 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d111      	bne.n	8004458 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004438:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7fe f91b 	bl	8002694 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800445e:	e00e      	b.n	800447e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff f9d7 	bl	8003820 <HAL_ADC_ErrorCallback>
}
 8004472:	e004      	b.n	800447e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff f9af 	bl	80037f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c0:	f043 0204 	orr.w	r2, r3, #4
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff f9a9 	bl	8003820 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <LL_ADC_IsEnabled>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <LL_ADC_IsEnabled+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_ADC_IsEnabled+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_StartCalibration>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800450e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004518:	4313      	orrs	r3, r2
 800451a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_ADC_IsCalibrationOnGoing>:
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800453e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004542:	d101      	bne.n	8004548 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_ADC_REG_IsConversionOngoing>:
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b04      	cmp	r3, #4
 8004568:	d101      	bne.n	800456e <LL_ADC_REG_IsConversionOngoing+0x18>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_ADCEx_Calibration_Start+0x1c>
 8004594:	2302      	movs	r3, #2
 8004596:	e04d      	b.n	8004634 <HAL_ADCEx_Calibration_Start+0xb8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fea5 	bl	80042f0 <ADC_Disable>
 80045a6:	4603      	mov	r3, r0
 80045a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d136      	bne.n	800461e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045b8:	f023 0302 	bic.w	r3, r3, #2
 80045bc:	f043 0202 	orr.w	r2, r3, #2
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ff96 	bl	80044fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045d0:	e014      	b.n	80045fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a18      	ldr	r2, [pc, #96]	@ (800463c <HAL_ADCEx_Calibration_Start+0xc0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d90d      	bls.n	80045fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	f023 0312 	bic.w	r3, r3, #18
 80045e8:	f043 0210 	orr.w	r2, r3, #16
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e01b      	b.n	8004634 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff ff94 	bl	800452e <LL_ADC_IsCalibrationOnGoing>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e2      	bne.n	80045d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800461c:	e005      	b.n	800462a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	0004de01 	.word	0x0004de01

08004640 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b0a1      	sub	sp, #132	@ 0x84
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0e7      	b.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80046ca:	2300      	movs	r3, #0
 80046cc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80046ce:	2300      	movs	r3, #0
 80046d0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046da:	d102      	bne.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046dc:	4b6f      	ldr	r3, [pc, #444]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	e009      	b.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6e      	ldr	r2, [pc, #440]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d102      	bne.n	80046f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80046ec:	4b6d      	ldr	r3, [pc, #436]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	e001      	b.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046f2:	2300      	movs	r3, #0
 80046f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0be      	b.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff1d 	bl	8004556 <LL_ADC_REG_IsConversionOngoing>
 800471c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff17 	bl	8004556 <LL_ADC_REG_IsConversionOngoing>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 80a0 	bne.w	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 809c 	bne.w	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004740:	d004      	beq.n	800474c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a55      	ldr	r2, [pc, #340]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d101      	bne.n	8004750 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800474c:	4b56      	ldr	r3, [pc, #344]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800474e:	e000      	b.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004750:	4b56      	ldr	r3, [pc, #344]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004752:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d04b      	beq.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800475c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800476e:	035b      	lsls	r3, r3, #13
 8004770:	430b      	orrs	r3, r1
 8004772:	431a      	orrs	r2, r3
 8004774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004776:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004780:	d004      	beq.n	800478c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a45      	ldr	r2, [pc, #276]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10f      	bne.n	80047ac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800478c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004790:	f7ff fea1 	bl	80044d6 <LL_ADC_IsEnabled>
 8004794:	4604      	mov	r4, r0
 8004796:	4841      	ldr	r0, [pc, #260]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004798:	f7ff fe9d 	bl	80044d6 <LL_ADC_IsEnabled>
 800479c:	4603      	mov	r3, r0
 800479e:	4323      	orrs	r3, r4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e012      	b.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80047ac:	483c      	ldr	r0, [pc, #240]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047ae:	f7ff fe92 	bl	80044d6 <LL_ADC_IsEnabled>
 80047b2:	4604      	mov	r4, r0
 80047b4:	483b      	ldr	r0, [pc, #236]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047b6:	f7ff fe8e 	bl	80044d6 <LL_ADC_IsEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	431c      	orrs	r4, r3
 80047be:	483c      	ldr	r0, [pc, #240]	@ (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047c0:	f7ff fe89 	bl	80044d6 <LL_ADC_IsEnabled>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4323      	orrs	r3, r4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d056      	beq.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047de:	f023 030f 	bic.w	r3, r3, #15
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	6811      	ldr	r1, [r2, #0]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	6892      	ldr	r2, [r2, #8]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	431a      	orrs	r2, r3
 80047ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047f2:	e047      	b.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004808:	d004      	beq.n	8004814 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a23      	ldr	r2, [pc, #140]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d10f      	bne.n	8004834 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004814:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004818:	f7ff fe5d 	bl	80044d6 <LL_ADC_IsEnabled>
 800481c:	4604      	mov	r4, r0
 800481e:	481f      	ldr	r0, [pc, #124]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004820:	f7ff fe59 	bl	80044d6 <LL_ADC_IsEnabled>
 8004824:	4603      	mov	r3, r0
 8004826:	4323      	orrs	r3, r4
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e012      	b.n	800485a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004834:	481a      	ldr	r0, [pc, #104]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004836:	f7ff fe4e 	bl	80044d6 <LL_ADC_IsEnabled>
 800483a:	4604      	mov	r4, r0
 800483c:	4819      	ldr	r0, [pc, #100]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800483e:	f7ff fe4a 	bl	80044d6 <LL_ADC_IsEnabled>
 8004842:	4603      	mov	r3, r0
 8004844:	431c      	orrs	r4, r3
 8004846:	481a      	ldr	r0, [pc, #104]	@ (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004848:	f7ff fe45 	bl	80044d6 <LL_ADC_IsEnabled>
 800484c:	4603      	mov	r3, r0
 800484e:	4323      	orrs	r3, r4
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d012      	beq.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800485e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004866:	f023 030f 	bic.w	r3, r3, #15
 800486a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800486c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800486e:	e009      	b.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004882:	e000      	b.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004884:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800488e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004892:	4618      	mov	r0, r3
 8004894:	3784      	adds	r7, #132	@ 0x84
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}
 800489a:	bf00      	nop
 800489c:	50000100 	.word	0x50000100
 80048a0:	50000400 	.word	0x50000400
 80048a4:	50000500 	.word	0x50000500
 80048a8:	50000300 	.word	0x50000300
 80048ac:	50000700 	.word	0x50000700
 80048b0:	50000600 	.word	0x50000600

080048b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e6:	4a04      	ldr	r2, [pc, #16]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	60d3      	str	r3, [r2, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <__NVIC_GetPriorityGrouping+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 0307 	and.w	r3, r3, #7
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	2b00      	cmp	r3, #0
 8004928:	db0b      	blt.n	8004942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4907      	ldr	r1, [pc, #28]	@ (8004950 <__NVIC_EnableIRQ+0x38>)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2001      	movs	r0, #1
 800493a:	fa00 f202 	lsl.w	r2, r0, r2
 800493e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e100 	.word	0xe000e100

08004954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	6039      	str	r1, [r7, #0]
 800495e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004964:	2b00      	cmp	r3, #0
 8004966:	db0a      	blt.n	800497e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	490c      	ldr	r1, [pc, #48]	@ (80049a0 <__NVIC_SetPriority+0x4c>)
 800496e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	440b      	add	r3, r1
 8004978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800497c:	e00a      	b.n	8004994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	4908      	ldr	r1, [pc, #32]	@ (80049a4 <__NVIC_SetPriority+0x50>)
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	3b04      	subs	r3, #4
 800498c:	0112      	lsls	r2, r2, #4
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	440b      	add	r3, r1
 8004992:	761a      	strb	r2, [r3, #24]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000e100 	.word	0xe000e100
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f1c3 0307 	rsb	r3, r3, #7
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	bf28      	it	cs
 80049c6:	2304      	movcs	r3, #4
 80049c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d902      	bls.n	80049d8 <NVIC_EncodePriority+0x30>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3b03      	subs	r3, #3
 80049d6:	e000      	b.n	80049da <NVIC_EncodePriority+0x32>
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43da      	mvns	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	401a      	ands	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f0:	f04f 31ff 	mov.w	r1, #4294967295
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	43d9      	mvns	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	4313      	orrs	r3, r2
         );
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	@ 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff ff4c 	bl	80048b4 <__NVIC_SetPriorityGrouping>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a32:	f7ff ff63 	bl	80048fc <__NVIC_GetPriorityGrouping>
 8004a36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	6978      	ldr	r0, [r7, #20]
 8004a3e:	f7ff ffb3 	bl	80049a8 <NVIC_EncodePriority>
 8004a42:	4602      	mov	r2, r0
 8004a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff82 	bl	8004954 <__NVIC_SetPriority>
}
 8004a50:	bf00      	nop
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff56 	bl	8004918 <__NVIC_EnableIRQ>
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e08d      	b.n	8004ba2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <HAL_DMA_Init+0x138>)
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d80f      	bhi.n	8004ab2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b45      	ldr	r3, [pc, #276]	@ (8004bb0 <HAL_DMA_Init+0x13c>)
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4a45      	ldr	r2, [pc, #276]	@ (8004bb4 <HAL_DMA_Init+0x140>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	009a      	lsls	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <HAL_DMA_Init+0x144>)
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ab0:	e00e      	b.n	8004ad0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	4b40      	ldr	r3, [pc, #256]	@ (8004bbc <HAL_DMA_Init+0x148>)
 8004aba:	4413      	add	r3, r2
 8004abc:	4a3d      	ldr	r2, [pc, #244]	@ (8004bb4 <HAL_DMA_Init+0x140>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	009a      	lsls	r2, r3, #2
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc0 <HAL_DMA_Init+0x14c>)
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fa76 	bl	8005014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b30:	d102      	bne.n	8004b38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d010      	beq.n	8004b78 <HAL_DMA_Init+0x104>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d80c      	bhi.n	8004b78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa96 	bl	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	e008      	b.n	8004b8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40020407 	.word	0x40020407
 8004bb0:	bffdfff8 	.word	0xbffdfff8
 8004bb4:	cccccccd 	.word	0xcccccccd
 8004bb8:	40020000 	.word	0x40020000
 8004bbc:	bffdfbf8 	.word	0xbffdfbf8
 8004bc0:	40020400 	.word	0x40020400

08004bc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_DMA_Start_IT+0x20>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e066      	b.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d155      	bne.n	8004ca4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f9bb 	bl	8004f98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 020e 	orr.w	r2, r2, #14
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e00f      	b.n	8004c5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0204 	bic.w	r2, r2, #4
 8004c4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 020a 	orr.w	r2, r2, #10
 8004c5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e005      	b.n	8004cb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
 8004cae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d005      	beq.n	8004cde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e037      	b.n	8004d4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 020e 	bic.w	r2, r2, #14
 8004cec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cfc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	f003 021f 	and.w	r2, r3, #31
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00c      	beq.n	8004d4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d00d      	beq.n	8004da0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2204      	movs	r2, #4
 8004d88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
 8004d9e:	e047      	b.n	8004e30 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 020e 	bic.w	r2, r2, #14
 8004dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd4:	f003 021f 	and.w	r2, r3, #31
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ddc:	2101      	movs	r1, #1
 8004dde:	fa01 f202 	lsl.w	r2, r1, r2
 8004de2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00c      	beq.n	8004e10 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e04:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e0e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
    }
  }
  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d026      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x7a>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d021      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d107      	bne.n	8004e8e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0204 	bic.w	r2, r2, #4
 8004e8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	f003 021f 	and.w	r2, r3, #31
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d071      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004eb2:	e06c      	b.n	8004f8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02e      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d029      	beq.n	8004f26 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 020a 	bic.w	r2, r2, #10
 8004eee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efc:	f003 021f 	and.w	r2, r3, #31
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f04:	2102      	movs	r1, #2
 8004f06:	fa01 f202 	lsl.w	r2, r1, r2
 8004f0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d038      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f24:	e033      	b.n	8004f8e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2208      	movs	r2, #8
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02a      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d025      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 020e 	bic.w	r2, r2, #14
 8004f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f58:	f003 021f 	and.w	r2, r3, #31
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f202 	lsl.w	r2, r1, r2
 8004f66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
}
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	f003 021f 	and.w	r2, r3, #31
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d108      	bne.n	8004ff8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ff6:	e007      	b.n	8005008 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	4b16      	ldr	r3, [pc, #88]	@ (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005024:	429a      	cmp	r2, r3
 8005026:	d802      	bhi.n	800502e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005028:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e001      	b.n	8005032 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005030:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	3b08      	subs	r3, #8
 800503e:	4a12      	ldr	r2, [pc, #72]	@ (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504c:	089b      	lsrs	r3, r3, #2
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a0b      	ldr	r2, [pc, #44]	@ (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800505e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40020407 	.word	0x40020407
 8005080:	40020800 	.word	0x40020800
 8005084:	40020820 	.word	0x40020820
 8005088:	cccccccd 	.word	0xcccccccd
 800508c:	40020880 	.word	0x40020880

08005090 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	461a      	mov	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2201      	movs	r2, #1
 80050be:	409a      	lsls	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	1000823f 	.word	0x1000823f
 80050d4:	40020940 	.word	0x40020940

080050d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050e6:	e15a      	b.n	800539e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	4013      	ands	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 814c 	beq.w	8005398 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d005      	beq.n	8005118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005114:	2b02      	cmp	r3, #2
 8005116:	d130      	bne.n	800517a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2203      	movs	r2, #3
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800514e:	2201      	movs	r2, #1
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 0201 	and.w	r2, r3, #1
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d017      	beq.n	80051b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4013      	ands	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d123      	bne.n	800520a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	08da      	lsrs	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3208      	adds	r2, #8
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	220f      	movs	r2, #15
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	08da      	lsrs	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3208      	adds	r2, #8
 8005204:	6939      	ldr	r1, [r7, #16]
 8005206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4013      	ands	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0203 	and.w	r2, r3, #3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80a6 	beq.w	8005398 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524c:	4b5b      	ldr	r3, [pc, #364]	@ (80053bc <HAL_GPIO_Init+0x2e4>)
 800524e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005250:	4a5a      	ldr	r2, [pc, #360]	@ (80053bc <HAL_GPIO_Init+0x2e4>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6613      	str	r3, [r2, #96]	@ 0x60
 8005258:	4b58      	ldr	r3, [pc, #352]	@ (80053bc <HAL_GPIO_Init+0x2e4>)
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005264:	4a56      	ldr	r2, [pc, #344]	@ (80053c0 <HAL_GPIO_Init+0x2e8>)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	3302      	adds	r3, #2
 800526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	220f      	movs	r2, #15
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800528e:	d01f      	beq.n	80052d0 <HAL_GPIO_Init+0x1f8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a4c      	ldr	r2, [pc, #304]	@ (80053c4 <HAL_GPIO_Init+0x2ec>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d019      	beq.n	80052cc <HAL_GPIO_Init+0x1f4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a4b      	ldr	r2, [pc, #300]	@ (80053c8 <HAL_GPIO_Init+0x2f0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <HAL_GPIO_Init+0x1f0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a4a      	ldr	r2, [pc, #296]	@ (80053cc <HAL_GPIO_Init+0x2f4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00d      	beq.n	80052c4 <HAL_GPIO_Init+0x1ec>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a49      	ldr	r2, [pc, #292]	@ (80053d0 <HAL_GPIO_Init+0x2f8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <HAL_GPIO_Init+0x1e8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a48      	ldr	r2, [pc, #288]	@ (80053d4 <HAL_GPIO_Init+0x2fc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d101      	bne.n	80052bc <HAL_GPIO_Init+0x1e4>
 80052b8:	2305      	movs	r3, #5
 80052ba:	e00a      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052bc:	2306      	movs	r3, #6
 80052be:	e008      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052c0:	2304      	movs	r3, #4
 80052c2:	e006      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052c4:	2303      	movs	r3, #3
 80052c6:	e004      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e002      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052d0:	2300      	movs	r3, #0
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	f002 0203 	and.w	r2, r2, #3
 80052d8:	0092      	lsls	r2, r2, #2
 80052da:	4093      	lsls	r3, r2
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e2:	4937      	ldr	r1, [pc, #220]	@ (80053c0 <HAL_GPIO_Init+0x2e8>)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	3302      	adds	r3, #2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f0:	4b39      	ldr	r3, [pc, #228]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4013      	ands	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005314:	4a30      	ldr	r2, [pc, #192]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800531a:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	43db      	mvns	r3, r3
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4013      	ands	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800533e:	4a26      	ldr	r2, [pc, #152]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005344:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	43db      	mvns	r3, r3
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4013      	ands	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005368:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800536e:	4b1a      	ldr	r3, [pc, #104]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005392:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f ae9d 	bne.w	80050e8 <HAL_GPIO_Init+0x10>
  }
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40010000 	.word	0x40010000
 80053c4:	48000400 	.word	0x48000400
 80053c8:	48000800 	.word	0x48000800
 80053cc:	48000c00 	.word	0x48000c00
 80053d0:	48001000 	.word	0x48001000
 80053d4:	48001400 	.word	0x48001400
 80053d8:	40010400 	.word	0x40010400

080053dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	807b      	strh	r3, [r7, #2]
 80053e8:	4613      	mov	r3, r2
 80053ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ec:	787b      	ldrb	r3, [r7, #1]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053f8:	e002      	b.n	8005400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053fa:	887a      	ldrh	r2, [r7, #2]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d006      	beq.n	8005430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005422:	4a05      	ldr	r2, [pc, #20]	@ (8005438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f806 	bl	800543c <HAL_GPIO_EXTI_Callback>
  }
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40010400 	.word	0x40010400

0800543c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d141      	bne.n	80054e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005462:	4b4b      	ldr	r3, [pc, #300]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546e:	d131      	bne.n	80054d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005470:	4b47      	ldr	r3, [pc, #284]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005476:	4a46      	ldr	r2, [pc, #280]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800547c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005480:	4b43      	ldr	r3, [pc, #268]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005488:	4a41      	ldr	r2, [pc, #260]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800548e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005490:	4b40      	ldr	r3, [pc, #256]	@ (8005594 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2232      	movs	r2, #50	@ 0x32
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	4a3f      	ldr	r2, [pc, #252]	@ (8005598 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	0c9b      	lsrs	r3, r3, #18
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054a6:	e002      	b.n	80054ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ae:	4b38      	ldr	r3, [pc, #224]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ba:	d102      	bne.n	80054c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f2      	bne.n	80054a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054c2:	4b33      	ldr	r3, [pc, #204]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ce:	d158      	bne.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e057      	b.n	8005584 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054da:	4a2d      	ldr	r2, [pc, #180]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054e4:	e04d      	b.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ec:	d141      	bne.n	8005572 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ee:	4b28      	ldr	r3, [pc, #160]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054fa:	d131      	bne.n	8005560 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054fc:	4b24      	ldr	r3, [pc, #144]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005502:	4a23      	ldr	r2, [pc, #140]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005508:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800550c:	4b20      	ldr	r3, [pc, #128]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005514:	4a1e      	ldr	r2, [pc, #120]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800551a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800551c:	4b1d      	ldr	r3, [pc, #116]	@ (8005594 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2232      	movs	r2, #50	@ 0x32
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	0c9b      	lsrs	r3, r3, #18
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005532:	e002      	b.n	800553a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3b01      	subs	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800553a:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005546:	d102      	bne.n	800554e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f2      	bne.n	8005534 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800554e:	4b10      	ldr	r3, [pc, #64]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555a:	d112      	bne.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e011      	b.n	8005584 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005560:	4b0b      	ldr	r3, [pc, #44]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005566:	4a0a      	ldr	r2, [pc, #40]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800556c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005570:	e007      	b.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005572:	4b07      	ldr	r3, [pc, #28]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800557a:	4a05      	ldr	r2, [pc, #20]	@ (8005590 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800557c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005580:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40007000 	.word	0x40007000
 8005594:	20000000 	.word	0x20000000
 8005598:	431bde83 	.word	0x431bde83

0800559c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055a0:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a04      	ldr	r2, [pc, #16]	@ (80055b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055aa:	6093      	str	r3, [r2, #8]
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40007000 	.word	0x40007000

080055bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e306      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d075      	beq.n	80056c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055da:	4b97      	ldr	r3, [pc, #604]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055e4:	4b94      	ldr	r3, [pc, #592]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_OscConfig+0x3e>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d002      	beq.n	8005600 <HAL_RCC_OscConfig+0x44>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d10b      	bne.n	8005618 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	4b8d      	ldr	r3, [pc, #564]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05b      	beq.n	80056c4 <HAL_RCC_OscConfig+0x108>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d157      	bne.n	80056c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e2e1      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005620:	d106      	bne.n	8005630 <HAL_RCC_OscConfig+0x74>
 8005622:	4b85      	ldr	r3, [pc, #532]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a84      	ldr	r2, [pc, #528]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e01d      	b.n	800566c <HAL_RCC_OscConfig+0xb0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x98>
 800563a:	4b7f      	ldr	r3, [pc, #508]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a7e      	ldr	r2, [pc, #504]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b7c      	ldr	r3, [pc, #496]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a7b      	ldr	r2, [pc, #492]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0xb0>
 8005654:	4b78      	ldr	r3, [pc, #480]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a77      	ldr	r2, [pc, #476]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 800565a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b75      	ldr	r3, [pc, #468]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a74      	ldr	r2, [pc, #464]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800566a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d013      	beq.n	800569c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fd f8a8 	bl	80027c8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567c:	f7fd f8a4 	bl	80027c8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	@ 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e2a6      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800568e:	4b6a      	ldr	r3, [pc, #424]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0xc0>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fd f894 	bl	80027c8 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fd f890 	bl	80027c8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	@ 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e292      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056b6:	4b60      	ldr	r3, [pc, #384]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0xe8>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d075      	beq.n	80057be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d2:	4b59      	ldr	r3, [pc, #356]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056dc:	4b56      	ldr	r3, [pc, #344]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b0c      	cmp	r3, #12
 80056ea:	d102      	bne.n	80056f2 <HAL_RCC_OscConfig+0x136>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d002      	beq.n	80056f8 <HAL_RCC_OscConfig+0x13c>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d11f      	bne.n	8005738 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_OscConfig+0x154>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e265      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005710:	4b49      	ldr	r3, [pc, #292]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	4946      	ldr	r1, [pc, #280]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005724:	4b45      	ldr	r3, [pc, #276]	@ (800583c <HAL_RCC_OscConfig+0x280>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7fb ffdf 	bl	80016ec <HAL_InitTick>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d043      	beq.n	80057bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e251      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d023      	beq.n	8005788 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005740:	4b3d      	ldr	r3, [pc, #244]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a3c      	ldr	r2, [pc, #240]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fd f83c 	bl	80027c8 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005754:	f7fd f838 	bl	80027c8 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e23a      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005766:	4b34      	ldr	r3, [pc, #208]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	061b      	lsls	r3, r3, #24
 8005780:	492d      	ldr	r1, [pc, #180]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]
 8005786:	e01a      	b.n	80057be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005788:	4b2b      	ldr	r3, [pc, #172]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2a      	ldr	r2, [pc, #168]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 800578e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005794:	f7fd f818 	bl	80027c8 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800579c:	f7fd f814 	bl	80027c8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e216      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ae:	4b22      	ldr	r3, [pc, #136]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x1e0>
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d041      	beq.n	800584e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01c      	beq.n	800580c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d2:	4b19      	ldr	r3, [pc, #100]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80057d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d8:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fc fff1 	bl	80027c8 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ea:	f7fc ffed 	bl	80027c8 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e1ef      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0ef      	beq.n	80057ea <HAL_RCC_OscConfig+0x22e>
 800580a:	e020      	b.n	800584e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580c:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 800580e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <HAL_RCC_OscConfig+0x27c>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fc ffd4 	bl	80027c8 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005822:	e00d      	b.n	8005840 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005824:	f7fc ffd0 	bl	80027c8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d906      	bls.n	8005840 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e1d2      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005840:	4b8c      	ldr	r3, [pc, #560]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1ea      	bne.n	8005824 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 80a6 	beq.w	80059a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585c:	2300      	movs	r3, #0
 800585e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005860:	4b84      	ldr	r3, [pc, #528]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_OscConfig+0x2b4>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x2b6>
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00d      	beq.n	8005892 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005876:	4b7f      	ldr	r3, [pc, #508]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005880:	6593      	str	r3, [r2, #88]	@ 0x58
 8005882:	4b7c      	ldr	r3, [pc, #496]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800588e:	2301      	movs	r3, #1
 8005890:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005892:	4b79      	ldr	r3, [pc, #484]	@ (8005a78 <HAL_RCC_OscConfig+0x4bc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d118      	bne.n	80058d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800589e:	4b76      	ldr	r3, [pc, #472]	@ (8005a78 <HAL_RCC_OscConfig+0x4bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a75      	ldr	r2, [pc, #468]	@ (8005a78 <HAL_RCC_OscConfig+0x4bc>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058aa:	f7fc ff8d 	bl	80027c8 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fc ff89 	bl	80027c8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e18b      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a78 <HAL_RCC_OscConfig+0x4bc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d108      	bne.n	80058ea <HAL_RCC_OscConfig+0x32e>
 80058d8:	4b66      	ldr	r3, [pc, #408]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058de:	4a65      	ldr	r2, [pc, #404]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058e8:	e024      	b.n	8005934 <HAL_RCC_OscConfig+0x378>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d110      	bne.n	8005914 <HAL_RCC_OscConfig+0x358>
 80058f2:	4b60      	ldr	r3, [pc, #384]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80058fa:	f043 0304 	orr.w	r3, r3, #4
 80058fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005902:	4b5c      	ldr	r3, [pc, #368]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005908:	4a5a      	ldr	r2, [pc, #360]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005912:	e00f      	b.n	8005934 <HAL_RCC_OscConfig+0x378>
 8005914:	4b57      	ldr	r3, [pc, #348]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	4a56      	ldr	r2, [pc, #344]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005924:	4b53      	ldr	r3, [pc, #332]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592a:	4a52      	ldr	r2, [pc, #328]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d016      	beq.n	800596a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fc ff44 	bl	80027c8 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005942:	e00a      	b.n	800595a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005944:	f7fc ff40 	bl	80027c8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e140      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595a:	4b46      	ldr	r3, [pc, #280]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0ed      	beq.n	8005944 <HAL_RCC_OscConfig+0x388>
 8005968:	e015      	b.n	8005996 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596a:	f7fc ff2d 	bl	80027c8 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005970:	e00a      	b.n	8005988 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005972:	f7fc ff29 	bl	80027c8 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e129      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005988:	4b3a      	ldr	r3, [pc, #232]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ed      	bne.n	8005972 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005996:	7ffb      	ldrb	r3, [r7, #31]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d105      	bne.n	80059a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599c:	4b35      	ldr	r3, [pc, #212]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 800599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a0:	4a34      	ldr	r2, [pc, #208]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80059a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d03c      	beq.n	8005a2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01c      	beq.n	80059f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80059be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fc fefc 	bl	80027c8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059d4:	f7fc fef8 	bl	80027c8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e0fa      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80059e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ef      	beq.n	80059d4 <HAL_RCC_OscConfig+0x418>
 80059f4:	e01b      	b.n	8005a2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80059f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fedf 	bl	80027c8 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a0e:	f7fc fedb 	bl	80027c8 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e0dd      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a20:	4b14      	ldr	r3, [pc, #80]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ef      	bne.n	8005a0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80d1 	beq.w	8005bda <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a38:	4b0e      	ldr	r3, [pc, #56]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b0c      	cmp	r3, #12
 8005a42:	f000 808b 	beq.w	8005b5c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d15e      	bne.n	8005b0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	4b09      	ldr	r3, [pc, #36]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a08      	ldr	r2, [pc, #32]	@ (8005a74 <HAL_RCC_OscConfig+0x4b8>)
 8005a54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5a:	f7fc feb5 	bl	80027c8 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a60:	e00c      	b.n	8005a7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a62:	f7fc feb1 	bl	80027c8 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d905      	bls.n	8005a7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e0b3      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7c:	4b59      	ldr	r3, [pc, #356]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ec      	bne.n	8005a62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a88:	4b56      	ldr	r3, [pc, #344]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	4b56      	ldr	r3, [pc, #344]	@ (8005be8 <HAL_RCC_OscConfig+0x62c>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6a11      	ldr	r1, [r2, #32]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	0112      	lsls	r2, r2, #4
 8005a9c:	4311      	orrs	r1, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005aa2:	0212      	lsls	r2, r2, #8
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005aaa:	0852      	lsrs	r2, r2, #1
 8005aac:	3a01      	subs	r2, #1
 8005aae:	0552      	lsls	r2, r2, #21
 8005ab0:	4311      	orrs	r1, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ab6:	0852      	lsrs	r2, r2, #1
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	0652      	lsls	r2, r2, #25
 8005abc:	4311      	orrs	r1, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ac2:	06d2      	lsls	r2, r2, #27
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	4947      	ldr	r1, [pc, #284]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005acc:	4b45      	ldr	r3, [pc, #276]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a44      	ldr	r2, [pc, #272]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ad6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ad8:	4b42      	ldr	r3, [pc, #264]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4a41      	ldr	r2, [pc, #260]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ae2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fc fe70 	bl	80027c8 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aec:	f7fc fe6c 	bl	80027c8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e06e      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afe:	4b39      	ldr	r3, [pc, #228]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0x530>
 8005b0a:	e066      	b.n	8005bda <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0c:	4b35      	ldr	r3, [pc, #212]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a34      	ldr	r2, [pc, #208]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b16:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b18:	4b32      	ldr	r3, [pc, #200]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4a31      	ldr	r2, [pc, #196]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b1e:	f023 0303 	bic.w	r3, r3, #3
 8005b22:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b24:	4b2f      	ldr	r3, [pc, #188]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a2e      	ldr	r2, [pc, #184]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b2a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fc fe48 	bl	80027c8 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fc fe44 	bl	80027c8 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e046      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4e:	4b25      	ldr	r3, [pc, #148]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0x580>
 8005b5a:	e03e      	b.n	8005bda <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e039      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b68:	4b1e      	ldr	r3, [pc, #120]	@ (8005be4 <HAL_RCC_OscConfig+0x628>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 0203 	and.w	r2, r3, #3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d12c      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	3b01      	subs	r3, #1
 8005b88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d123      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b98:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d11b      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d113      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	085b      	lsrs	r3, r3, #1
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d109      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bcc:	085b      	lsrs	r3, r3, #1
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d001      	beq.n	8005bda <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40021000 	.word	0x40021000
 8005be8:	019f800c 	.word	0x019f800c

08005bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e11e      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b91      	ldr	r3, [pc, #580]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 030f 	and.w	r3, r3, #15
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d910      	bls.n	8005c34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b8e      	ldr	r3, [pc, #568]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 020f 	bic.w	r2, r3, #15
 8005c1a:	498c      	ldr	r1, [pc, #560]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	4b8a      	ldr	r3, [pc, #552]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d001      	beq.n	8005c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e106      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d073      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d129      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c48:	4b81      	ldr	r3, [pc, #516]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e0f4      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c58:	f000 f9d0 	bl	8005ffc <RCC_GetSysClockFreqFromPLLSource>
 8005c5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4a7c      	ldr	r2, [pc, #496]	@ (8005e54 <HAL_RCC_ClockConfig+0x268>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d93f      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c66:	4b7a      	ldr	r3, [pc, #488]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d033      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d12f      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c86:	4b72      	ldr	r3, [pc, #456]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c8e:	4a70      	ldr	r2, [pc, #448]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e024      	b.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d107      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0c6      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb4:	4b66      	ldr	r3, [pc, #408]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0be      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005cc4:	f000 f8ce 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4a61      	ldr	r2, [pc, #388]	@ (8005e54 <HAL_RCC_ClockConfig+0x268>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d909      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cda:	4a5d      	ldr	r2, [pc, #372]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f023 0203 	bic.w	r2, r3, #3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4957      	ldr	r1, [pc, #348]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf8:	f7fc fd66 	bl	80027c8 <HAL_GetTick>
 8005cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d00:	f7fc fd62 	bl	80027c8 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e095      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d16:	4b4e      	ldr	r3, [pc, #312]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 020c 	and.w	r2, r3, #12
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d1eb      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d023      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d40:	4b43      	ldr	r3, [pc, #268]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4a42      	ldr	r2, [pc, #264]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d58:	4b3d      	ldr	r3, [pc, #244]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d60:	4a3b      	ldr	r2, [pc, #236]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d68:	4b39      	ldr	r3, [pc, #228]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4936      	ldr	r1, [pc, #216]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b80      	cmp	r3, #128	@ 0x80
 8005d80:	d105      	bne.n	8005d8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d82:	4b33      	ldr	r3, [pc, #204]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	4a32      	ldr	r2, [pc, #200]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005d88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d21d      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f023 020f 	bic.w	r2, r3, #15
 8005da4:	4929      	ldr	r1, [pc, #164]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dac:	f7fc fd0c 	bl	80027c8 <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fc fd08 	bl	80027c8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e03b      	b.n	8005e42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dca:	4b20      	ldr	r3, [pc, #128]	@ (8005e4c <HAL_RCC_ClockConfig+0x260>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d1ed      	bne.n	8005db4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4917      	ldr	r1, [pc, #92]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b13      	ldr	r3, [pc, #76]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490f      	ldr	r1, [pc, #60]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e16:	f000 f825 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e50 <HAL_RCC_ClockConfig+0x264>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490c      	ldr	r1, [pc, #48]	@ (8005e58 <HAL_RCC_ClockConfig+0x26c>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e32:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <HAL_RCC_ClockConfig+0x270>)
 8005e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e36:	4b0a      	ldr	r3, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x274>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fb fc56 	bl	80016ec <HAL_InitTick>
 8005e40:	4603      	mov	r3, r0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40022000 	.word	0x40022000
 8005e50:	40021000 	.word	0x40021000
 8005e54:	04c4b400 	.word	0x04c4b400
 8005e58:	0800d0b8 	.word	0x0800d0b8
 8005e5c:	20000000 	.word	0x20000000
 8005e60:	200000c4 	.word	0x200000c4

08005e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d102      	bne.n	8005e7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e76:	4b2a      	ldr	r3, [pc, #168]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e047      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e7c:	4b27      	ldr	r3, [pc, #156]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 030c 	and.w	r3, r3, #12
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d102      	bne.n	8005e8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e88:	4b26      	ldr	r3, [pc, #152]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	e03e      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e8e:	4b23      	ldr	r3, [pc, #140]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d136      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e9a:	4b20      	ldr	r3, [pc, #128]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	4a16      	ldr	r2, [pc, #88]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec2:	68d2      	ldr	r2, [r2, #12]
 8005ec4:	0a12      	lsrs	r2, r2, #8
 8005ec6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	617b      	str	r3, [r7, #20]
      break;
 8005ed0:	e00c      	b.n	8005eec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ed2:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	4a10      	ldr	r2, [pc, #64]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005edc:	68d2      	ldr	r2, [r2, #12]
 8005ede:	0a12      	lsrs	r2, r2, #8
 8005ee0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
      break;
 8005eea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005eec:	4b0b      	ldr	r3, [pc, #44]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	0e5b      	lsrs	r3, r3, #25
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	e001      	b.n	8005f0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f0c:	693b      	ldr	r3, [r7, #16]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	00f42400 	.word	0x00f42400
 8005f24:	016e3600 	.word	0x016e3600

08005f28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f2c:	4b03      	ldr	r3, [pc, #12]	@ (8005f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000000 	.word	0x20000000

08005f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f44:	f7ff fff0 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b06      	ldr	r3, [pc, #24]	@ (8005f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4904      	ldr	r1, [pc, #16]	@ (8005f68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40021000 	.word	0x40021000
 8005f68:	0800d0c8 	.word	0x0800d0c8

08005f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f70:	f7ff ffda 	bl	8005f28 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b06      	ldr	r3, [pc, #24]	@ (8005f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0adb      	lsrs	r3, r3, #11
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4904      	ldr	r1, [pc, #16]	@ (8005f94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40021000 	.word	0x40021000
 8005f94:	0800d0c8 	.word	0x0800d0c8

08005f98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005fa8:	4b12      	ldr	r3, [pc, #72]	@ (8005ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f003 0203 	and.w	r2, r3, #3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005fcc:	4b09      	ldr	r3, [pc, #36]	@ (8005ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fda:	4b07      	ldr	r3, [pc, #28]	@ (8005ff8 <HAL_RCC_GetClockConfig+0x60>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	601a      	str	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40022000 	.word	0x40022000

08005ffc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006002:	4b1e      	ldr	r3, [pc, #120]	@ (800607c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800600c:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 030f 	and.w	r3, r3, #15
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b03      	cmp	r3, #3
 800601e:	d10c      	bne.n	800603a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006020:	4a17      	ldr	r2, [pc, #92]	@ (8006080 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800602a:	68d2      	ldr	r2, [r2, #12]
 800602c:	0a12      	lsrs	r2, r2, #8
 800602e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	617b      	str	r3, [r7, #20]
    break;
 8006038:	e00c      	b.n	8006054 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800603a:	4a12      	ldr	r2, [pc, #72]	@ (8006084 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	4a0e      	ldr	r2, [pc, #56]	@ (800607c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006044:	68d2      	ldr	r2, [r2, #12]
 8006046:	0a12      	lsrs	r2, r2, #8
 8006048:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800604c:	fb02 f303 	mul.w	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]
    break;
 8006052:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006054:	4b09      	ldr	r3, [pc, #36]	@ (800607c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	0e5b      	lsrs	r3, r3, #25
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	3301      	adds	r3, #1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800606e:	687b      	ldr	r3, [r7, #4]
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40021000 	.word	0x40021000
 8006080:	016e3600 	.word	0x016e3600
 8006084:	00f42400 	.word	0x00f42400

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006090:	2300      	movs	r3, #0
 8006092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006094:	2300      	movs	r3, #0
 8006096:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8098 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a6:	2300      	movs	r3, #0
 80060a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060aa:	4b43      	ldr	r3, [pc, #268]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10d      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060b6:	4b40      	ldr	r3, [pc, #256]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ba:	4a3f      	ldr	r2, [pc, #252]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c2:	4b3d      	ldr	r3, [pc, #244]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ce:	2301      	movs	r3, #1
 80060d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060d2:	4b3a      	ldr	r3, [pc, #232]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a39      	ldr	r2, [pc, #228]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060de:	f7fc fb73 	bl	80027c8 <HAL_GetTick>
 80060e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060e4:	e009      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e6:	f7fc fb6f 	bl	80027c8 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d902      	bls.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	74fb      	strb	r3, [r7, #19]
        break;
 80060f8:	e005      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060fa:	4b30      	ldr	r3, [pc, #192]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0ef      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006106:	7cfb      	ldrb	r3, [r7, #19]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d159      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800610c:	4b2a      	ldr	r3, [pc, #168]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006116:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01e      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	429a      	cmp	r2, r3
 8006126:	d019      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006128:	4b23      	ldr	r3, [pc, #140]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006132:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006134:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	4a1f      	ldr	r2, [pc, #124]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800613c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006144:	4b1c      	ldr	r3, [pc, #112]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800614c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006154:	4a18      	ldr	r2, [pc, #96]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fc fb2f 	bl	80027c8 <HAL_GetTick>
 800616a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800616c:	e00b      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fc fb2b 	bl	80027c8 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d902      	bls.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	74fb      	strb	r3, [r7, #19]
            break;
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006186:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0ec      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006194:	7cfb      	ldrb	r3, [r7, #19]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800619a:	4b07      	ldr	r3, [pc, #28]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	4903      	ldr	r1, [pc, #12]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80061b0:	e008      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061b2:	7cfb      	ldrb	r3, [r7, #19]
 80061b4:	74bb      	strb	r3, [r7, #18]
 80061b6:	e005      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061c4:	7c7b      	ldrb	r3, [r7, #17]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ca:	4ba7      	ldr	r3, [pc, #668]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061ce:	4aa6      	ldr	r2, [pc, #664]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061e2:	4ba1      	ldr	r3, [pc, #644]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e8:	f023 0203 	bic.w	r2, r3, #3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	499d      	ldr	r1, [pc, #628]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006204:	4b98      	ldr	r3, [pc, #608]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f023 020c 	bic.w	r2, r3, #12
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	4995      	ldr	r1, [pc, #596]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006226:	4b90      	ldr	r3, [pc, #576]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	498c      	ldr	r1, [pc, #560]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006248:	4b87      	ldr	r3, [pc, #540]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	4984      	ldr	r1, [pc, #528]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800626a:	4b7f      	ldr	r3, [pc, #508]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	497b      	ldr	r1, [pc, #492]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800628c:	4b76      	ldr	r3, [pc, #472]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006292:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	4973      	ldr	r1, [pc, #460]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800629c:	4313      	orrs	r3, r2
 800629e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062ae:	4b6e      	ldr	r3, [pc, #440]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	496a      	ldr	r1, [pc, #424]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062d0:	4b65      	ldr	r3, [pc, #404]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	4962      	ldr	r1, [pc, #392]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062f2:	4b5d      	ldr	r3, [pc, #372]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	4959      	ldr	r1, [pc, #356]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00a      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006314:	4b54      	ldr	r3, [pc, #336]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800631a:	f023 0203 	bic.w	r2, r3, #3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	4951      	ldr	r1, [pc, #324]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006336:	4b4c      	ldr	r3, [pc, #304]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800633c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	4948      	ldr	r1, [pc, #288]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006354:	2b00      	cmp	r3, #0
 8006356:	d015      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006358:	4b43      	ldr	r3, [pc, #268]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006366:	4940      	ldr	r1, [pc, #256]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006376:	d105      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006378:	4b3b      	ldr	r3, [pc, #236]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a3a      	ldr	r2, [pc, #232]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006382:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006390:	4b35      	ldr	r3, [pc, #212]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639e:	4932      	ldr	r1, [pc, #200]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063ae:	d105      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d015      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80063c8:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d6:	4924      	ldr	r1, [pc, #144]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063e6:	d105      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d015      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006400:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640e:	4916      	ldr	r1, [pc, #88]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800641e:	d105      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006420:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4a10      	ldr	r2, [pc, #64]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800642a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d019      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800643e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	4908      	ldr	r1, [pc, #32]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006448:	4313      	orrs	r3, r2
 800644a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006456:	d109      	bne.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006458:	4b03      	ldr	r3, [pc, #12]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4a02      	ldr	r2, [pc, #8]	@ (8006468 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800645e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006462:	60d3      	str	r3, [r2, #12]
 8006464:	e002      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d015      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006478:	4b29      	ldr	r3, [pc, #164]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006486:	4926      	ldr	r1, [pc, #152]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006496:	d105      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006498:	4b21      	ldr	r3, [pc, #132]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4a20      	ldr	r2, [pc, #128]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800649e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d015      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80064b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064be:	4918      	ldr	r1, [pc, #96]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ce:	d105      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064d0:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4a12      	ldr	r2, [pc, #72]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f6:	490a      	ldr	r1, [pc, #40]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006502:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006506:	d105      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006508:	4b05      	ldr	r3, [pc, #20]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	4a04      	ldr	r2, [pc, #16]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800650e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006512:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006514:	7cbb      	ldrb	r3, [r7, #18]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40021000 	.word	0x40021000

08006524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e049      	b.n	80065ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f841 	bl	80065d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3304      	adds	r3, #4
 8006560:	4619      	mov	r1, r3
 8006562:	4610      	mov	r0, r2
 8006564:	f000 fe20 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
	...

080065e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d001      	beq.n	8006600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e054      	b.n	80066aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a26      	ldr	r2, [pc, #152]	@ (80066b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d022      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800662a:	d01d      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a22      	ldr	r2, [pc, #136]	@ (80066bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a21      	ldr	r2, [pc, #132]	@ (80066c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1f      	ldr	r2, [pc, #124]	@ (80066c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1e      	ldr	r2, [pc, #120]	@ (80066c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1c      	ldr	r2, [pc, #112]	@ (80066cc <HAL_TIM_Base_Start_IT+0xe4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIM_Base_Start_IT+0x80>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1b      	ldr	r2, [pc, #108]	@ (80066d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d115      	bne.n	8006694 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	4b19      	ldr	r3, [pc, #100]	@ (80066d4 <HAL_TIM_Base_Start_IT+0xec>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b06      	cmp	r3, #6
 8006678:	d015      	beq.n	80066a6 <HAL_TIM_Base_Start_IT+0xbe>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006680:	d011      	beq.n	80066a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0201 	orr.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006692:	e008      	b.n	80066a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e000      	b.n	80066a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40013400 	.word	0x40013400
 80066cc:	40014000 	.word	0x40014000
 80066d0:	40015000 	.word	0x40015000
 80066d4:	00010007 	.word	0x00010007

080066d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e049      	b.n	800677e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fb faae 	bl	8001c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f000 fd46 	bl	80071a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d109      	bne.n	80067ac <HAL_TIM_PWM_Start+0x24>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e03c      	b.n	8006826 <HAL_TIM_PWM_Start+0x9e>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d109      	bne.n	80067c6 <HAL_TIM_PWM_Start+0x3e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	bf14      	ite	ne
 80067be:	2301      	movne	r3, #1
 80067c0:	2300      	moveq	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	e02f      	b.n	8006826 <HAL_TIM_PWM_Start+0x9e>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d109      	bne.n	80067e0 <HAL_TIM_PWM_Start+0x58>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	e022      	b.n	8006826 <HAL_TIM_PWM_Start+0x9e>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b0c      	cmp	r3, #12
 80067e4:	d109      	bne.n	80067fa <HAL_TIM_PWM_Start+0x72>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	bf14      	ite	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	2300      	moveq	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	e015      	b.n	8006826 <HAL_TIM_PWM_Start+0x9e>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d109      	bne.n	8006814 <HAL_TIM_PWM_Start+0x8c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b01      	cmp	r3, #1
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	e008      	b.n	8006826 <HAL_TIM_PWM_Start+0x9e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e0a6      	b.n	800697c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <HAL_TIM_PWM_Start+0xb6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800683c:	e023      	b.n	8006886 <HAL_TIM_PWM_Start+0xfe>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d104      	bne.n	800684e <HAL_TIM_PWM_Start+0xc6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800684c:	e01b      	b.n	8006886 <HAL_TIM_PWM_Start+0xfe>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d104      	bne.n	800685e <HAL_TIM_PWM_Start+0xd6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800685c:	e013      	b.n	8006886 <HAL_TIM_PWM_Start+0xfe>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b0c      	cmp	r3, #12
 8006862:	d104      	bne.n	800686e <HAL_TIM_PWM_Start+0xe6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800686c:	e00b      	b.n	8006886 <HAL_TIM_PWM_Start+0xfe>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b10      	cmp	r3, #16
 8006872:	d104      	bne.n	800687e <HAL_TIM_PWM_Start+0xf6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800687c:	e003      	b.n	8006886 <HAL_TIM_PWM_Start+0xfe>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2201      	movs	r2, #1
 800688c:	6839      	ldr	r1, [r7, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f001 f85c 	bl	800794c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a3a      	ldr	r2, [pc, #232]	@ (8006984 <HAL_TIM_PWM_Start+0x1fc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d018      	beq.n	80068d0 <HAL_TIM_PWM_Start+0x148>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a39      	ldr	r2, [pc, #228]	@ (8006988 <HAL_TIM_PWM_Start+0x200>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d013      	beq.n	80068d0 <HAL_TIM_PWM_Start+0x148>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a37      	ldr	r2, [pc, #220]	@ (800698c <HAL_TIM_PWM_Start+0x204>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIM_PWM_Start+0x148>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a36      	ldr	r2, [pc, #216]	@ (8006990 <HAL_TIM_PWM_Start+0x208>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d009      	beq.n	80068d0 <HAL_TIM_PWM_Start+0x148>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a34      	ldr	r2, [pc, #208]	@ (8006994 <HAL_TIM_PWM_Start+0x20c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d004      	beq.n	80068d0 <HAL_TIM_PWM_Start+0x148>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a33      	ldr	r2, [pc, #204]	@ (8006998 <HAL_TIM_PWM_Start+0x210>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d101      	bne.n	80068d4 <HAL_TIM_PWM_Start+0x14c>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <HAL_TIM_PWM_Start+0x14e>
 80068d4:	2300      	movs	r3, #0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d007      	beq.n	80068ea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a25      	ldr	r2, [pc, #148]	@ (8006984 <HAL_TIM_PWM_Start+0x1fc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fc:	d01d      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a26      	ldr	r2, [pc, #152]	@ (800699c <HAL_TIM_PWM_Start+0x214>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a24      	ldr	r2, [pc, #144]	@ (80069a0 <HAL_TIM_PWM_Start+0x218>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a23      	ldr	r2, [pc, #140]	@ (80069a4 <HAL_TIM_PWM_Start+0x21c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a19      	ldr	r2, [pc, #100]	@ (8006988 <HAL_TIM_PWM_Start+0x200>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a18      	ldr	r2, [pc, #96]	@ (800698c <HAL_TIM_PWM_Start+0x204>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_TIM_PWM_Start+0x1b2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a18      	ldr	r2, [pc, #96]	@ (8006998 <HAL_TIM_PWM_Start+0x210>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d115      	bne.n	8006966 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	4b19      	ldr	r3, [pc, #100]	@ (80069a8 <HAL_TIM_PWM_Start+0x220>)
 8006942:	4013      	ands	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b06      	cmp	r3, #6
 800694a:	d015      	beq.n	8006978 <HAL_TIM_PWM_Start+0x1f0>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006952:	d011      	beq.n	8006978 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006964:	e008      	b.n	8006978 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f042 0201 	orr.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e000      	b.n	800697a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006978:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40013400 	.word	0x40013400
 800698c:	40014000 	.word	0x40014000
 8006990:	40014400 	.word	0x40014400
 8006994:	40014800 	.word	0x40014800
 8006998:	40015000 	.word	0x40015000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	00010007 	.word	0x00010007

080069ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ffc4 	bl	800794c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a40      	ldr	r2, [pc, #256]	@ (8006acc <HAL_TIM_PWM_Stop+0x120>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d018      	beq.n	8006a00 <HAL_TIM_PWM_Stop+0x54>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad0 <HAL_TIM_PWM_Stop+0x124>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d013      	beq.n	8006a00 <HAL_TIM_PWM_Stop+0x54>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ad4 <HAL_TIM_PWM_Stop+0x128>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00e      	beq.n	8006a00 <HAL_TIM_PWM_Stop+0x54>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ad8 <HAL_TIM_PWM_Stop+0x12c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d009      	beq.n	8006a00 <HAL_TIM_PWM_Stop+0x54>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a3a      	ldr	r2, [pc, #232]	@ (8006adc <HAL_TIM_PWM_Stop+0x130>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_TIM_PWM_Stop+0x54>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a39      	ldr	r2, [pc, #228]	@ (8006ae0 <HAL_TIM_PWM_Stop+0x134>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_PWM_Stop+0x58>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_TIM_PWM_Stop+0x5a>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d017      	beq.n	8006a3a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
 8006a10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a14:	4013      	ands	r3, r2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10f      	bne.n	8006a3a <HAL_TIM_PWM_Stop+0x8e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6a1a      	ldr	r2, [r3, #32]
 8006a20:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006a24:	4013      	ands	r3, r2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d107      	bne.n	8006a3a <HAL_TIM_PWM_Stop+0x8e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006a44:	4013      	ands	r3, r2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10f      	bne.n	8006a6a <HAL_TIM_PWM_Stop+0xbe>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <HAL_TIM_PWM_Stop+0xbe>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_PWM_Stop+0xce>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a78:	e023      	b.n	8006ac2 <HAL_TIM_PWM_Stop+0x116>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_PWM_Stop+0xde>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a88:	e01b      	b.n	8006ac2 <HAL_TIM_PWM_Stop+0x116>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d104      	bne.n	8006a9a <HAL_TIM_PWM_Stop+0xee>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a98:	e013      	b.n	8006ac2 <HAL_TIM_PWM_Stop+0x116>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d104      	bne.n	8006aaa <HAL_TIM_PWM_Stop+0xfe>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006aa8:	e00b      	b.n	8006ac2 <HAL_TIM_PWM_Stop+0x116>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d104      	bne.n	8006aba <HAL_TIM_PWM_Stop+0x10e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ab8:	e003      	b.n	8006ac2 <HAL_TIM_PWM_Stop+0x116>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40012c00 	.word	0x40012c00
 8006ad0:	40013400 	.word	0x40013400
 8006ad4:	40014000 	.word	0x40014000
 8006ad8:	40014400 	.word	0x40014400
 8006adc:	40014800 	.word	0x40014800
 8006ae0:	40015000 	.word	0x40015000

08006ae4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e097      	b.n	8006c28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fb f8c7 	bl	8001ca0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006b28:	f023 0307 	bic.w	r3, r3, #7
 8006b2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f000 fb35 	bl	80071a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b66:	f023 0303 	bic.w	r3, r3, #3
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	4313      	orrs	r3, r2
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b84:	f023 030c 	bic.w	r3, r3, #12
 8006b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	011a      	lsls	r2, r3, #4
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	031b      	lsls	r3, r3, #12
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006bca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d122      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d11b      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0202 	mvn.w	r2, #2
 8006c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa7a 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006c78:	e005      	b.n	8006c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa6c 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fa7d 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d122      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d11b      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0204 	mvn.w	r2, #4
 8006cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa50 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006ccc:	e005      	b.n	8006cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa42 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fa53 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d122      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d11b      	bne.n	8006d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0208 	mvn.w	r2, #8
 8006d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa26 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006d20:	e005      	b.n	8006d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa18 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa29 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d122      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0310 	and.w	r3, r3, #16
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d11b      	bne.n	8006d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f06f 0210 	mvn.w	r2, #16
 8006d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f9fc 	bl	800716c <HAL_TIM_IC_CaptureCallback>
 8006d74:	e005      	b.n	8006d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9ee 	bl	8007158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f9ff 	bl	8007180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d10e      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d107      	bne.n	8006db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0201 	mvn.w	r2, #1
 8006dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fa fc60 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbe:	2b80      	cmp	r3, #128	@ 0x80
 8006dc0:	d10e      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dcc:	2b80      	cmp	r3, #128	@ 0x80
 8006dce:	d107      	bne.n	8006de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f84e 	bl	8007e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dee:	d10e      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	d107      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f841 	bl	8007e90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e18:	2b40      	cmp	r3, #64	@ 0x40
 8006e1a:	d10e      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d107      	bne.n	8006e3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f9ad 	bl	8007194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d10e      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d107      	bne.n	8006e66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f06f 0220 	mvn.w	r2, #32
 8006e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f801 	bl	8007e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e74:	d10f      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e84:	d107      	bne.n	8006e96 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 f807 	bl	8007ea4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ea4:	d10f      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006eb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb4:	d107      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fff9 	bl	8007eb8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 ffeb 	bl	8007ecc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f04:	d10f      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f14:	d107      	bne.n	8006f26 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 ffdd 	bl	8007ee0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e0ff      	b.n	800714e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b14      	cmp	r3, #20
 8006f5a:	f200 80f0 	bhi.w	800713e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006fb9 	.word	0x08006fb9
 8006f68:	0800713f 	.word	0x0800713f
 8006f6c:	0800713f 	.word	0x0800713f
 8006f70:	0800713f 	.word	0x0800713f
 8006f74:	08006ff9 	.word	0x08006ff9
 8006f78:	0800713f 	.word	0x0800713f
 8006f7c:	0800713f 	.word	0x0800713f
 8006f80:	0800713f 	.word	0x0800713f
 8006f84:	0800703b 	.word	0x0800703b
 8006f88:	0800713f 	.word	0x0800713f
 8006f8c:	0800713f 	.word	0x0800713f
 8006f90:	0800713f 	.word	0x0800713f
 8006f94:	0800707b 	.word	0x0800707b
 8006f98:	0800713f 	.word	0x0800713f
 8006f9c:	0800713f 	.word	0x0800713f
 8006fa0:	0800713f 	.word	0x0800713f
 8006fa4:	080070bd 	.word	0x080070bd
 8006fa8:	0800713f 	.word	0x0800713f
 8006fac:	0800713f 	.word	0x0800713f
 8006fb0:	0800713f 	.word	0x0800713f
 8006fb4:	080070fd 	.word	0x080070fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f99a 	bl	80072f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0208 	orr.w	r2, r2, #8
 8006fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699a      	ldr	r2, [r3, #24]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0204 	bic.w	r2, r2, #4
 8006fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6999      	ldr	r1, [r3, #24]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	619a      	str	r2, [r3, #24]
      break;
 8006ff6:	e0a5      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fa14 	bl	800742c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6999      	ldr	r1, [r3, #24]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	021a      	lsls	r2, r3, #8
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	619a      	str	r2, [r3, #24]
      break;
 8007038:	e084      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fa87 	bl	8007554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69da      	ldr	r2, [r3, #28]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0208 	orr.w	r2, r2, #8
 8007054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0204 	bic.w	r2, r2, #4
 8007064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69d9      	ldr	r1, [r3, #28]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	61da      	str	r2, [r3, #28]
      break;
 8007078:	e064      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 faf9 	bl	8007678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69d9      	ldr	r1, [r3, #28]
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	021a      	lsls	r2, r3, #8
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	61da      	str	r2, [r3, #28]
      break;
 80070ba:	e043      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fb6c 	bl	80077a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0208 	orr.w	r2, r2, #8
 80070d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0204 	bic.w	r2, r2, #4
 80070e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	691a      	ldr	r2, [r3, #16]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80070fa:	e023      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	4618      	mov	r0, r3
 8007104:	f000 fbb6 	bl	8007874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007116:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007126:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	021a      	lsls	r2, r3, #8
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800713c:	e002      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	75fb      	strb	r3, [r7, #23]
      break;
 8007142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800714c:	7dfb      	ldrb	r3, [r7, #23]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop

08007158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a46      	ldr	r2, [pc, #280]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d017      	beq.n	80071f0 <TIM_Base_SetConfig+0x48>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c6:	d013      	beq.n	80071f0 <TIM_Base_SetConfig+0x48>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a43      	ldr	r2, [pc, #268]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00f      	beq.n	80071f0 <TIM_Base_SetConfig+0x48>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a42      	ldr	r2, [pc, #264]	@ (80072dc <TIM_Base_SetConfig+0x134>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00b      	beq.n	80071f0 <TIM_Base_SetConfig+0x48>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a41      	ldr	r2, [pc, #260]	@ (80072e0 <TIM_Base_SetConfig+0x138>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d007      	beq.n	80071f0 <TIM_Base_SetConfig+0x48>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a40      	ldr	r2, [pc, #256]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_Base_SetConfig+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a3f      	ldr	r2, [pc, #252]	@ (80072e8 <TIM_Base_SetConfig+0x140>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d108      	bne.n	8007202 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a33      	ldr	r2, [pc, #204]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d023      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007210:	d01f      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a30      	ldr	r2, [pc, #192]	@ (80072d8 <TIM_Base_SetConfig+0x130>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01b      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a2f      	ldr	r2, [pc, #188]	@ (80072dc <TIM_Base_SetConfig+0x134>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d017      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2e      	ldr	r2, [pc, #184]	@ (80072e0 <TIM_Base_SetConfig+0x138>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a2d      	ldr	r2, [pc, #180]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00f      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2d      	ldr	r2, [pc, #180]	@ (80072ec <TIM_Base_SetConfig+0x144>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00b      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2c      	ldr	r2, [pc, #176]	@ (80072f0 <TIM_Base_SetConfig+0x148>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d007      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2b      	ldr	r2, [pc, #172]	@ (80072f4 <TIM_Base_SetConfig+0x14c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d003      	beq.n	8007252 <TIM_Base_SetConfig+0xaa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a26      	ldr	r2, [pc, #152]	@ (80072e8 <TIM_Base_SetConfig+0x140>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d108      	bne.n	8007264 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a12      	ldr	r2, [pc, #72]	@ (80072d4 <TIM_Base_SetConfig+0x12c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <TIM_Base_SetConfig+0x110>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a14      	ldr	r2, [pc, #80]	@ (80072e4 <TIM_Base_SetConfig+0x13c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00f      	beq.n	80072b8 <TIM_Base_SetConfig+0x110>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a14      	ldr	r2, [pc, #80]	@ (80072ec <TIM_Base_SetConfig+0x144>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00b      	beq.n	80072b8 <TIM_Base_SetConfig+0x110>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a13      	ldr	r2, [pc, #76]	@ (80072f0 <TIM_Base_SetConfig+0x148>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d007      	beq.n	80072b8 <TIM_Base_SetConfig+0x110>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a12      	ldr	r2, [pc, #72]	@ (80072f4 <TIM_Base_SetConfig+0x14c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_Base_SetConfig+0x110>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a0d      	ldr	r2, [pc, #52]	@ (80072e8 <TIM_Base_SetConfig+0x140>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d103      	bne.n	80072c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	615a      	str	r2, [r3, #20]
}
 80072c6:	bf00      	nop
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40012c00 	.word	0x40012c00
 80072d8:	40000400 	.word	0x40000400
 80072dc:	40000800 	.word	0x40000800
 80072e0:	40000c00 	.word	0x40000c00
 80072e4:	40013400 	.word	0x40013400
 80072e8:	40015000 	.word	0x40015000
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800

080072f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f023 0201 	bic.w	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f023 0302 	bic.w	r3, r3, #2
 8007344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a30      	ldr	r2, [pc, #192]	@ (8007414 <TIM_OC1_SetConfig+0x11c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d013      	beq.n	8007380 <TIM_OC1_SetConfig+0x88>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a2f      	ldr	r2, [pc, #188]	@ (8007418 <TIM_OC1_SetConfig+0x120>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00f      	beq.n	8007380 <TIM_OC1_SetConfig+0x88>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a2e      	ldr	r2, [pc, #184]	@ (800741c <TIM_OC1_SetConfig+0x124>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d00b      	beq.n	8007380 <TIM_OC1_SetConfig+0x88>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a2d      	ldr	r2, [pc, #180]	@ (8007420 <TIM_OC1_SetConfig+0x128>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d007      	beq.n	8007380 <TIM_OC1_SetConfig+0x88>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a2c      	ldr	r2, [pc, #176]	@ (8007424 <TIM_OC1_SetConfig+0x12c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d003      	beq.n	8007380 <TIM_OC1_SetConfig+0x88>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a2b      	ldr	r2, [pc, #172]	@ (8007428 <TIM_OC1_SetConfig+0x130>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d10c      	bne.n	800739a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0308 	bic.w	r3, r3, #8
 8007386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f023 0304 	bic.w	r3, r3, #4
 8007398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1d      	ldr	r2, [pc, #116]	@ (8007414 <TIM_OC1_SetConfig+0x11c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <TIM_OC1_SetConfig+0xd2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007418 <TIM_OC1_SetConfig+0x120>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00f      	beq.n	80073ca <TIM_OC1_SetConfig+0xd2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1b      	ldr	r2, [pc, #108]	@ (800741c <TIM_OC1_SetConfig+0x124>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <TIM_OC1_SetConfig+0xd2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007420 <TIM_OC1_SetConfig+0x128>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <TIM_OC1_SetConfig+0xd2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a19      	ldr	r2, [pc, #100]	@ (8007424 <TIM_OC1_SetConfig+0x12c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC1_SetConfig+0xd2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a18      	ldr	r2, [pc, #96]	@ (8007428 <TIM_OC1_SetConfig+0x130>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d111      	bne.n	80073ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	621a      	str	r2, [r3, #32]
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40012c00 	.word	0x40012c00
 8007418:	40013400 	.word	0x40013400
 800741c:	40014000 	.word	0x40014000
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800
 8007428:	40015000 	.word	0x40015000

0800742c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f023 0210 	bic.w	r2, r3, #16
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800745a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007466:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f023 0320 	bic.w	r3, r3, #32
 800747a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	011b      	lsls	r3, r3, #4
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a2c      	ldr	r2, [pc, #176]	@ (800753c <TIM_OC2_SetConfig+0x110>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_OC2_SetConfig+0x74>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a2b      	ldr	r2, [pc, #172]	@ (8007540 <TIM_OC2_SetConfig+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_OC2_SetConfig+0x74>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a2a      	ldr	r2, [pc, #168]	@ (8007544 <TIM_OC2_SetConfig+0x118>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10d      	bne.n	80074bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1f      	ldr	r2, [pc, #124]	@ (800753c <TIM_OC2_SetConfig+0x110>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d013      	beq.n	80074ec <TIM_OC2_SetConfig+0xc0>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007540 <TIM_OC2_SetConfig+0x114>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00f      	beq.n	80074ec <TIM_OC2_SetConfig+0xc0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007548 <TIM_OC2_SetConfig+0x11c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00b      	beq.n	80074ec <TIM_OC2_SetConfig+0xc0>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a1d      	ldr	r2, [pc, #116]	@ (800754c <TIM_OC2_SetConfig+0x120>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d007      	beq.n	80074ec <TIM_OC2_SetConfig+0xc0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a1c      	ldr	r2, [pc, #112]	@ (8007550 <TIM_OC2_SetConfig+0x124>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC2_SetConfig+0xc0>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a17      	ldr	r2, [pc, #92]	@ (8007544 <TIM_OC2_SetConfig+0x118>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d113      	bne.n	8007514 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40012c00 	.word	0x40012c00
 8007540:	40013400 	.word	0x40013400
 8007544:	40015000 	.word	0x40015000
 8007548:	40014000 	.word	0x40014000
 800754c:	40014400 	.word	0x40014400
 8007550:	40014800 	.word	0x40014800

08007554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0303 	bic.w	r3, r3, #3
 800758e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007660 <TIM_OC3_SetConfig+0x10c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d007      	beq.n	80075c6 <TIM_OC3_SetConfig+0x72>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007664 <TIM_OC3_SetConfig+0x110>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d003      	beq.n	80075c6 <TIM_OC3_SetConfig+0x72>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a29      	ldr	r2, [pc, #164]	@ (8007668 <TIM_OC3_SetConfig+0x114>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d10d      	bne.n	80075e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007660 <TIM_OC3_SetConfig+0x10c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <TIM_OC3_SetConfig+0xbe>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007664 <TIM_OC3_SetConfig+0x110>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <TIM_OC3_SetConfig+0xbe>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1d      	ldr	r2, [pc, #116]	@ (800766c <TIM_OC3_SetConfig+0x118>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00b      	beq.n	8007612 <TIM_OC3_SetConfig+0xbe>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007670 <TIM_OC3_SetConfig+0x11c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <TIM_OC3_SetConfig+0xbe>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1b      	ldr	r2, [pc, #108]	@ (8007674 <TIM_OC3_SetConfig+0x120>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_OC3_SetConfig+0xbe>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a16      	ldr	r2, [pc, #88]	@ (8007668 <TIM_OC3_SetConfig+0x114>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d113      	bne.n	800763a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4313      	orrs	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	621a      	str	r2, [r3, #32]
}
 8007654:	bf00      	nop
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40013400 	.word	0x40013400
 8007668:	40015000 	.word	0x40015000
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800

08007678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	031b      	lsls	r3, r3, #12
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007788 <TIM_OC4_SetConfig+0x110>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d007      	beq.n	80076ec <TIM_OC4_SetConfig+0x74>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a2b      	ldr	r2, [pc, #172]	@ (800778c <TIM_OC4_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d003      	beq.n	80076ec <TIM_OC4_SetConfig+0x74>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a2a      	ldr	r2, [pc, #168]	@ (8007790 <TIM_OC4_SetConfig+0x118>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d10d      	bne.n	8007708 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	031b      	lsls	r3, r3, #12
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007706:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <TIM_OC4_SetConfig+0x110>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d013      	beq.n	8007738 <TIM_OC4_SetConfig+0xc0>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a1e      	ldr	r2, [pc, #120]	@ (800778c <TIM_OC4_SetConfig+0x114>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00f      	beq.n	8007738 <TIM_OC4_SetConfig+0xc0>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a1e      	ldr	r2, [pc, #120]	@ (8007794 <TIM_OC4_SetConfig+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00b      	beq.n	8007738 <TIM_OC4_SetConfig+0xc0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a1d      	ldr	r2, [pc, #116]	@ (8007798 <TIM_OC4_SetConfig+0x120>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d007      	beq.n	8007738 <TIM_OC4_SetConfig+0xc0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <TIM_OC4_SetConfig+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_OC4_SetConfig+0xc0>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <TIM_OC4_SetConfig+0x118>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d113      	bne.n	8007760 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800773e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007746:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	019b      	lsls	r3, r3, #6
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	4313      	orrs	r3, r2
 8007752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	019b      	lsls	r3, r3, #6
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	4313      	orrs	r3, r2
 800775e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40015000 	.word	0x40015000
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800

080077a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a19      	ldr	r2, [pc, #100]	@ (800785c <TIM_OC5_SetConfig+0xbc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <TIM_OC5_SetConfig+0x82>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a18      	ldr	r2, [pc, #96]	@ (8007860 <TIM_OC5_SetConfig+0xc0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00f      	beq.n	8007822 <TIM_OC5_SetConfig+0x82>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a17      	ldr	r2, [pc, #92]	@ (8007864 <TIM_OC5_SetConfig+0xc4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00b      	beq.n	8007822 <TIM_OC5_SetConfig+0x82>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a16      	ldr	r2, [pc, #88]	@ (8007868 <TIM_OC5_SetConfig+0xc8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d007      	beq.n	8007822 <TIM_OC5_SetConfig+0x82>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a15      	ldr	r2, [pc, #84]	@ (800786c <TIM_OC5_SetConfig+0xcc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <TIM_OC5_SetConfig+0x82>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a14      	ldr	r2, [pc, #80]	@ (8007870 <TIM_OC5_SetConfig+0xd0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d109      	bne.n	8007836 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	621a      	str	r2, [r3, #32]
}
 8007850:	bf00      	nop
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40014000 	.word	0x40014000
 8007868:	40014400 	.word	0x40014400
 800786c:	40014800 	.word	0x40014800
 8007870:	40015000 	.word	0x40015000

08007874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	051b      	lsls	r3, r3, #20
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <TIM_OC6_SetConfig+0xc0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d013      	beq.n	80078f8 <TIM_OC6_SetConfig+0x84>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a19      	ldr	r2, [pc, #100]	@ (8007938 <TIM_OC6_SetConfig+0xc4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00f      	beq.n	80078f8 <TIM_OC6_SetConfig+0x84>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a18      	ldr	r2, [pc, #96]	@ (800793c <TIM_OC6_SetConfig+0xc8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00b      	beq.n	80078f8 <TIM_OC6_SetConfig+0x84>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a17      	ldr	r2, [pc, #92]	@ (8007940 <TIM_OC6_SetConfig+0xcc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d007      	beq.n	80078f8 <TIM_OC6_SetConfig+0x84>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a16      	ldr	r2, [pc, #88]	@ (8007944 <TIM_OC6_SetConfig+0xd0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC6_SetConfig+0x84>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a15      	ldr	r2, [pc, #84]	@ (8007948 <TIM_OC6_SetConfig+0xd4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d109      	bne.n	800790c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	029b      	lsls	r3, r3, #10
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40013400 	.word	0x40013400
 800793c:	40014000 	.word	0x40014000
 8007940:	40014400 	.word	0x40014400
 8007944:	40014800 	.word	0x40014800
 8007948:	40015000 	.word	0x40015000

0800794c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	2201      	movs	r2, #1
 8007960:	fa02 f303 	lsl.w	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1a      	ldr	r2, [r3, #32]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	43db      	mvns	r3, r3
 800796e:	401a      	ands	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1a      	ldr	r2, [r3, #32]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 031f 	and.w	r3, r3, #31
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	fa01 f303 	lsl.w	r3, r1, r3
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]
}
 800798a:	bf00      	nop
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
	...

08007998 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d109      	bne.n	80079bc <HAL_TIMEx_PWMN_Start+0x24>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	bf14      	ite	ne
 80079b4:	2301      	movne	r3, #1
 80079b6:	2300      	moveq	r3, #0
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	e022      	b.n	8007a02 <HAL_TIMEx_PWMN_Start+0x6a>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d109      	bne.n	80079d6 <HAL_TIMEx_PWMN_Start+0x3e>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	bf14      	ite	ne
 80079ce:	2301      	movne	r3, #1
 80079d0:	2300      	moveq	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	e015      	b.n	8007a02 <HAL_TIMEx_PWMN_Start+0x6a>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d109      	bne.n	80079f0 <HAL_TIMEx_PWMN_Start+0x58>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	bf14      	ite	ne
 80079e8:	2301      	movne	r3, #1
 80079ea:	2300      	moveq	r3, #0
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	e008      	b.n	8007a02 <HAL_TIMEx_PWMN_Start+0x6a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e073      	b.n	8007af2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIMEx_PWMN_Start+0x82>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a18:	e013      	b.n	8007a42 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d104      	bne.n	8007a2a <HAL_TIMEx_PWMN_Start+0x92>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a28:	e00b      	b.n	8007a42 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d104      	bne.n	8007a3a <HAL_TIMEx_PWMN_Start+0xa2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a38:	e003      	b.n	8007a42 <HAL_TIMEx_PWMN_Start+0xaa>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2204      	movs	r2, #4
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fa52 	bl	8007ef4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a25      	ldr	r2, [pc, #148]	@ (8007afc <HAL_TIMEx_PWMN_Start+0x164>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d022      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a72:	d01d      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a21      	ldr	r2, [pc, #132]	@ (8007b00 <HAL_TIMEx_PWMN_Start+0x168>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d018      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a20      	ldr	r2, [pc, #128]	@ (8007b04 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d013      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b08 <HAL_TIMEx_PWMN_Start+0x170>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00e      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1d      	ldr	r2, [pc, #116]	@ (8007b0c <HAL_TIMEx_PWMN_Start+0x174>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b10 <HAL_TIMEx_PWMN_Start+0x178>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d004      	beq.n	8007ab0 <HAL_TIMEx_PWMN_Start+0x118>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8007b14 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d115      	bne.n	8007adc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	4b18      	ldr	r3, [pc, #96]	@ (8007b18 <HAL_TIMEx_PWMN_Start+0x180>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b06      	cmp	r3, #6
 8007ac0:	d015      	beq.n	8007aee <HAL_TIMEx_PWMN_Start+0x156>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ac8:	d011      	beq.n	8007aee <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0201 	orr.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	e008      	b.n	8007aee <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e000      	b.n	8007af0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40012c00 	.word	0x40012c00
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	40000c00 	.word	0x40000c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40015000 	.word	0x40015000
 8007b18:	00010007 	.word	0x00010007

08007b1c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 f9e0 	bl	8007ef4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10f      	bne.n	8007b64 <HAL_TIMEx_PWMN_Stop+0x48>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6a1a      	ldr	r2, [r3, #32]
 8007b4a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b4e:	4013      	ands	r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d107      	bne.n	8007b64 <HAL_TIMEx_PWMN_Stop+0x48>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10f      	bne.n	8007b94 <HAL_TIMEx_PWMN_Stop+0x78>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6a1a      	ldr	r2, [r3, #32]
 8007b7a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <HAL_TIMEx_PWMN_Stop+0x78>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0201 	bic.w	r2, r2, #1
 8007b92:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d104      	bne.n	8007ba4 <HAL_TIMEx_PWMN_Stop+0x88>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba2:	e013      	b.n	8007bcc <HAL_TIMEx_PWMN_Stop+0xb0>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d104      	bne.n	8007bb4 <HAL_TIMEx_PWMN_Stop+0x98>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bb2:	e00b      	b.n	8007bcc <HAL_TIMEx_PWMN_Stop+0xb0>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d104      	bne.n	8007bc4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bc2:	e003      	b.n	8007bcc <HAL_TIMEx_PWMN_Stop+0xb0>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e074      	b.n	8007cda <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a34      	ldr	r2, [pc, #208]	@ (8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a33      	ldr	r2, [pc, #204]	@ (8007cec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a31      	ldr	r2, [pc, #196]	@ (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a21      	ldr	r2, [pc, #132]	@ (8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d022      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c70:	d01d      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d018      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d013      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00e      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a15      	ldr	r2, [pc, #84]	@ (8007cec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a11      	ldr	r2, [pc, #68]	@ (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d10c      	bne.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40012c00 	.word	0x40012c00
 8007cec:	40013400 	.word	0x40013400
 8007cf0:	40015000 	.word	0x40015000
 8007cf4:	40000400 	.word	0x40000400
 8007cf8:	40000800 	.word	0x40000800
 8007cfc:	40000c00 	.word	0x40000c00
 8007d00:	40014000 	.word	0x40014000

08007d04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e096      	b.n	8007e4e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8007e5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a2c      	ldr	r2, [pc, #176]	@ (8007e64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d106      	bne.n	8007dc6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a24      	ldr	r2, [pc, #144]	@ (8007e5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a22      	ldr	r2, [pc, #136]	@ (8007e60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a21      	ldr	r2, [pc, #132]	@ (8007e64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d12b      	bne.n	8007e3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dee:	051b      	lsls	r3, r3, #20
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a11      	ldr	r2, [pc, #68]	@ (8007e5c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d009      	beq.n	8007e2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a10      	ldr	r2, [pc, #64]	@ (8007e60 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a0e      	ldr	r2, [pc, #56]	@ (8007e64 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d106      	bne.n	8007e3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40012c00 	.word	0x40012c00
 8007e60:	40013400 	.word	0x40013400
 8007e64:	40015000 	.word	0x40015000

08007e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2204      	movs	r2, #4
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1a      	ldr	r2, [r3, #32]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e042      	b.n	8007fd6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7f9 fffe 	bl	8001f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	@ 0x24
 8007f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0201 	bic.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fc51 	bl	8008828 <UART_SetConfig>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e022      	b.n	8007fd6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 ff41 	bl	8008e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 ffc8 	bl	8008f64 <UART_CheckIdleState>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b08a      	sub	sp, #40	@ 0x28
 8007fe2:	af02      	add	r7, sp, #8
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	f040 8083 	bne.w	8008100 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_UART_Transmit+0x28>
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e07b      	b.n	8008102 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_UART_Transmit+0x3a>
 8008014:	2302      	movs	r3, #2
 8008016:	e074      	b.n	8008102 <HAL_UART_Transmit+0x124>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2221      	movs	r2, #33	@ 0x21
 800802c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008030:	f7fa fbca 	bl	80027c8 <HAL_GetTick>
 8008034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	88fa      	ldrh	r2, [r7, #6]
 800803a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	88fa      	ldrh	r2, [r7, #6]
 8008042:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804e:	d108      	bne.n	8008062 <HAL_UART_Transmit+0x84>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	e003      	b.n	800806a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8008072:	e02c      	b.n	80080ce <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	2180      	movs	r1, #128	@ 0x80
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 ffbb 	bl	8008ffa <UART_WaitOnFlagUntilTimeout>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e039      	b.n	8008102 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10b      	bne.n	80080ac <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	3302      	adds	r3, #2
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	e007      	b.n	80080bc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3301      	adds	r3, #1
 80080ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1cc      	bne.n	8008074 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2140      	movs	r1, #64	@ 0x40
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 ff88 	bl	8008ffa <UART_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e000      	b.n	8008102 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008100:	2302      	movs	r3, #2
  }
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	@ 0x28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	4613      	mov	r3, r2
 8008118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008120:	2b20      	cmp	r3, #32
 8008122:	d142      	bne.n	80081aa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_UART_Receive_IT+0x24>
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e03b      	b.n	80081ac <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_UART_Receive_IT+0x36>
 800813e:	2302      	movs	r3, #2
 8008140:	e034      	b.n	80081ac <HAL_UART_Receive_IT+0xa0>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a17      	ldr	r2, [pc, #92]	@ (80081b4 <HAL_UART_Receive_IT+0xa8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d01f      	beq.n	800819a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d018      	beq.n	800819a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	613b      	str	r3, [r7, #16]
   return(result);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	623b      	str	r3, [r7, #32]
 8008188:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69f9      	ldr	r1, [r7, #28]
 800818c:	6a3a      	ldr	r2, [r7, #32]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	61bb      	str	r3, [r7, #24]
   return(result);
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e6      	bne.n	8008168 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	461a      	mov	r2, r3
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fff3 	bl	800918c <UART_Start_Receive_IT>
 80081a6:	4603      	mov	r3, r0
 80081a8:	e000      	b.n	80081ac <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3728      	adds	r7, #40	@ 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40008000 	.word	0x40008000

080081b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b0ba      	sub	sp, #232	@ 0xe8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80081e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80081e6:	4013      	ands	r3, r2
 80081e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80081ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11b      	bne.n	800822c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d015      	beq.n	800822c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d105      	bne.n	8008218 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 82d6 	beq.w	80087ce <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      }
      return;
 800822a:	e2d0      	b.n	80087ce <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800822c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 811f 	beq.w	8008474 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008236:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800823a:	4b8b      	ldr	r3, [pc, #556]	@ (8008468 <HAL_UART_IRQHandler+0x2b0>)
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008246:	4b89      	ldr	r3, [pc, #548]	@ (800846c <HAL_UART_IRQHandler+0x2b4>)
 8008248:	4013      	ands	r3, r2
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8112 	beq.w	8008474 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d011      	beq.n	8008280 <HAL_UART_IRQHandler+0xc8>
 800825c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008276:	f043 0201 	orr.w	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d011      	beq.n	80082b0 <HAL_UART_IRQHandler+0xf8>
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2202      	movs	r2, #2
 800829e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082a6:	f043 0204 	orr.w	r2, r3, #4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b4:	f003 0304 	and.w	r3, r3, #4
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d011      	beq.n	80082e0 <HAL_UART_IRQHandler+0x128>
 80082bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2204      	movs	r2, #4
 80082ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d6:	f043 0202 	orr.w	r2, r3, #2
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d017      	beq.n	800831c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d105      	bne.n	8008304 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008468 <HAL_UART_IRQHandler+0x2b0>)
 80082fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2208      	movs	r2, #8
 800830a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008312:	f043 0208 	orr.w	r2, r3, #8
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800831c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008324:	2b00      	cmp	r3, #0
 8008326:	d012      	beq.n	800834e <HAL_UART_IRQHandler+0x196>
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800833c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008344:	f043 0220 	orr.w	r2, r3, #32
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 823c 	beq.w	80087d2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d013      	beq.n	800838e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d105      	bne.n	800837e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008382:	2b00      	cmp	r3, #0
 8008384:	d003      	beq.n	800838e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008394:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a2:	2b40      	cmp	r3, #64	@ 0x40
 80083a4:	d005      	beq.n	80083b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04f      	beq.n	8008452 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 f814 	bl	80093e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	d141      	bne.n	800844a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3308      	adds	r3, #8
 80083ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800840a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1d9      	bne.n	80083c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d013      	beq.n	8008442 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800841e:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <HAL_UART_IRQHandler+0x2b8>)
 8008420:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008426:	4618      	mov	r0, r3
 8008428:	f7fc fca0 	bl	8004d6c <HAL_DMA_Abort_IT>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d017      	beq.n	8008462 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008440:	e00f      	b.n	8008462 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9da 	bl	80087fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	e00b      	b.n	8008462 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9d6 	bl	80087fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008450:	e007      	b.n	8008462 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f9d2 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8008460:	e1b7      	b.n	80087d2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008462:	bf00      	nop
    return;
 8008464:	e1b5      	b.n	80087d2 <HAL_UART_IRQHandler+0x61a>
 8008466:	bf00      	nop
 8008468:	10000001 	.word	0x10000001
 800846c:	04000120 	.word	0x04000120
 8008470:	080094ad 	.word	0x080094ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008478:	2b01      	cmp	r3, #1
 800847a:	f040 814a 	bne.w	8008712 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008482:	f003 0310 	and.w	r3, r3, #16
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 8143 	beq.w	8008712 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 813c 	beq.w	8008712 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2210      	movs	r2, #16
 80084a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ac:	2b40      	cmp	r3, #64	@ 0x40
 80084ae:	f040 80b5 	bne.w	800861c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8187 	beq.w	80087d6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084d2:	429a      	cmp	r2, r3
 80084d4:	f080 817f 	bcs.w	80087d6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0320 	and.w	r3, r3, #32
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f040 8086 	bne.w	8008600 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800850c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800851e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008522:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800852a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1da      	bne.n	80084f4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3308      	adds	r3, #8
 8008544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800854e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008550:	f023 0301 	bic.w	r3, r3, #1
 8008554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800856a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e1      	bne.n	800853e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3308      	adds	r3, #8
 8008580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800858a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800858c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3308      	adds	r3, #8
 800859a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800859e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e3      	bne.n	800857a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085d0:	f023 0310 	bic.w	r3, r3, #16
 80085d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e4      	bne.n	80085c0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fc fb5d 	bl	8004cba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800860c:	b29b      	uxth	r3, r3
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	b29b      	uxth	r3, r3
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f8fb 	bl	8008810 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800861a:	e0dc      	b.n	80087d6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008628:	b29b      	uxth	r3, r3
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80ce 	beq.w	80087da <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800863e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80c9 	beq.w	80087da <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800865c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800866a:	647b      	str	r3, [r7, #68]	@ 0x44
 800866c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e4      	bne.n	8008648 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	623b      	str	r3, [r7, #32]
   return(result);
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80086a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e1      	bne.n	800867e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	60fb      	str	r3, [r7, #12]
   return(result);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	69b9      	ldr	r1, [r7, #24]
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	617b      	str	r3, [r7, #20]
   return(result);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e4      	bne.n	80086ce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f880 	bl	8008810 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008710:	e063      	b.n	80087da <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00e      	beq.n	800873c <HAL_UART_IRQHandler+0x584>
 800871e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d008      	beq.n	800873c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 fb57 	bl	8009de8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873a:	e051      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800873c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008744:	2b00      	cmp	r3, #0
 8008746:	d014      	beq.n	8008772 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800874c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008750:	2b00      	cmp	r3, #0
 8008752:	d105      	bne.n	8008760 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d008      	beq.n	8008772 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008764:	2b00      	cmp	r3, #0
 8008766:	d03a      	beq.n	80087de <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
    }
    return;
 8008770:	e035      	b.n	80087de <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <HAL_UART_IRQHandler+0x5da>
 800877e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fea4 	bl	80094d8 <UART_EndTransmit_IT>
    return;
 8008790:	e026      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <HAL_UART_IRQHandler+0x5fa>
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 fb30 	bl	8009e10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b0:	e016      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <HAL_UART_IRQHandler+0x628>
 80087be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da0c      	bge.n	80087e0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 fb18 	bl	8009dfc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087cc:	e008      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
      return;
 80087ce:	bf00      	nop
 80087d0:	e006      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
    return;
 80087d2:	bf00      	nop
 80087d4:	e004      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
      return;
 80087d6:	bf00      	nop
 80087d8:	e002      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
      return;
 80087da:	bf00      	nop
 80087dc:	e000      	b.n	80087e0 <HAL_UART_IRQHandler+0x628>
    return;
 80087de:	bf00      	nop
  }
}
 80087e0:	37e8      	adds	r7, #232	@ 0xe8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800882c:	b08c      	sub	sp, #48	@ 0x30
 800882e:	af00      	add	r7, sp, #0
 8008830:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	431a      	orrs	r2, r3
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	431a      	orrs	r2, r3
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	4313      	orrs	r3, r2
 800884e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4baa      	ldr	r3, [pc, #680]	@ (8008b00 <UART_SetConfig+0x2d8>)
 8008858:	4013      	ands	r3, r2
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008860:	430b      	orrs	r3, r1
 8008862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a9f      	ldr	r2, [pc, #636]	@ (8008b04 <UART_SetConfig+0x2dc>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008890:	4313      	orrs	r3, r2
 8008892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800889e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	6812      	ldr	r2, [r2, #0]
 80088a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088a8:	430b      	orrs	r3, r1
 80088aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b2:	f023 010f 	bic.w	r1, r3, #15
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a90      	ldr	r2, [pc, #576]	@ (8008b08 <UART_SetConfig+0x2e0>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d125      	bne.n	8008918 <UART_SetConfig+0xf0>
 80088cc:	4b8f      	ldr	r3, [pc, #572]	@ (8008b0c <UART_SetConfig+0x2e4>)
 80088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	2b03      	cmp	r3, #3
 80088d8:	d81a      	bhi.n	8008910 <UART_SetConfig+0xe8>
 80088da:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <UART_SetConfig+0xb8>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	080088f1 	.word	0x080088f1
 80088e4:	08008901 	.word	0x08008901
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	08008909 	.word	0x08008909
 80088f0:	2301      	movs	r3, #1
 80088f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f6:	e116      	b.n	8008b26 <UART_SetConfig+0x2fe>
 80088f8:	2302      	movs	r3, #2
 80088fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088fe:	e112      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008900:	2304      	movs	r3, #4
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008906:	e10e      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008908:	2308      	movs	r3, #8
 800890a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800890e:	e10a      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008910:	2310      	movs	r3, #16
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008916:	e106      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a7c      	ldr	r2, [pc, #496]	@ (8008b10 <UART_SetConfig+0x2e8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d138      	bne.n	8008994 <UART_SetConfig+0x16c>
 8008922:	4b7a      	ldr	r3, [pc, #488]	@ (8008b0c <UART_SetConfig+0x2e4>)
 8008924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008928:	f003 030c 	and.w	r3, r3, #12
 800892c:	2b0c      	cmp	r3, #12
 800892e:	d82d      	bhi.n	800898c <UART_SetConfig+0x164>
 8008930:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <UART_SetConfig+0x110>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	0800896d 	.word	0x0800896d
 800893c:	0800898d 	.word	0x0800898d
 8008940:	0800898d 	.word	0x0800898d
 8008944:	0800898d 	.word	0x0800898d
 8008948:	0800897d 	.word	0x0800897d
 800894c:	0800898d 	.word	0x0800898d
 8008950:	0800898d 	.word	0x0800898d
 8008954:	0800898d 	.word	0x0800898d
 8008958:	08008975 	.word	0x08008975
 800895c:	0800898d 	.word	0x0800898d
 8008960:	0800898d 	.word	0x0800898d
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008985 	.word	0x08008985
 800896c:	2300      	movs	r3, #0
 800896e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008972:	e0d8      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008974:	2302      	movs	r3, #2
 8008976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800897a:	e0d4      	b.n	8008b26 <UART_SetConfig+0x2fe>
 800897c:	2304      	movs	r3, #4
 800897e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008982:	e0d0      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008984:	2308      	movs	r3, #8
 8008986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800898a:	e0cc      	b.n	8008b26 <UART_SetConfig+0x2fe>
 800898c:	2310      	movs	r3, #16
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008992:	e0c8      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a5e      	ldr	r2, [pc, #376]	@ (8008b14 <UART_SetConfig+0x2ec>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d125      	bne.n	80089ea <UART_SetConfig+0x1c2>
 800899e:	4b5b      	ldr	r3, [pc, #364]	@ (8008b0c <UART_SetConfig+0x2e4>)
 80089a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80089a8:	2b30      	cmp	r3, #48	@ 0x30
 80089aa:	d016      	beq.n	80089da <UART_SetConfig+0x1b2>
 80089ac:	2b30      	cmp	r3, #48	@ 0x30
 80089ae:	d818      	bhi.n	80089e2 <UART_SetConfig+0x1ba>
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d00a      	beq.n	80089ca <UART_SetConfig+0x1a2>
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d814      	bhi.n	80089e2 <UART_SetConfig+0x1ba>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <UART_SetConfig+0x19a>
 80089bc:	2b10      	cmp	r3, #16
 80089be:	d008      	beq.n	80089d2 <UART_SetConfig+0x1aa>
 80089c0:	e00f      	b.n	80089e2 <UART_SetConfig+0x1ba>
 80089c2:	2300      	movs	r3, #0
 80089c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089c8:	e0ad      	b.n	8008b26 <UART_SetConfig+0x2fe>
 80089ca:	2302      	movs	r3, #2
 80089cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d0:	e0a9      	b.n	8008b26 <UART_SetConfig+0x2fe>
 80089d2:	2304      	movs	r3, #4
 80089d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089d8:	e0a5      	b.n	8008b26 <UART_SetConfig+0x2fe>
 80089da:	2308      	movs	r3, #8
 80089dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e0:	e0a1      	b.n	8008b26 <UART_SetConfig+0x2fe>
 80089e2:	2310      	movs	r3, #16
 80089e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80089e8:	e09d      	b.n	8008b26 <UART_SetConfig+0x2fe>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008b18 <UART_SetConfig+0x2f0>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d125      	bne.n	8008a40 <UART_SetConfig+0x218>
 80089f4:	4b45      	ldr	r3, [pc, #276]	@ (8008b0c <UART_SetConfig+0x2e4>)
 80089f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a00:	d016      	beq.n	8008a30 <UART_SetConfig+0x208>
 8008a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a04:	d818      	bhi.n	8008a38 <UART_SetConfig+0x210>
 8008a06:	2b80      	cmp	r3, #128	@ 0x80
 8008a08:	d00a      	beq.n	8008a20 <UART_SetConfig+0x1f8>
 8008a0a:	2b80      	cmp	r3, #128	@ 0x80
 8008a0c:	d814      	bhi.n	8008a38 <UART_SetConfig+0x210>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <UART_SetConfig+0x1f0>
 8008a12:	2b40      	cmp	r3, #64	@ 0x40
 8008a14:	d008      	beq.n	8008a28 <UART_SetConfig+0x200>
 8008a16:	e00f      	b.n	8008a38 <UART_SetConfig+0x210>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1e:	e082      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a20:	2302      	movs	r3, #2
 8008a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a26:	e07e      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2e:	e07a      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a30:	2308      	movs	r3, #8
 8008a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a36:	e076      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3e:	e072      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a35      	ldr	r2, [pc, #212]	@ (8008b1c <UART_SetConfig+0x2f4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d12a      	bne.n	8008aa0 <UART_SetConfig+0x278>
 8008a4a:	4b30      	ldr	r3, [pc, #192]	@ (8008b0c <UART_SetConfig+0x2e4>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a58:	d01a      	beq.n	8008a90 <UART_SetConfig+0x268>
 8008a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a5e:	d81b      	bhi.n	8008a98 <UART_SetConfig+0x270>
 8008a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a64:	d00c      	beq.n	8008a80 <UART_SetConfig+0x258>
 8008a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a6a:	d815      	bhi.n	8008a98 <UART_SetConfig+0x270>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <UART_SetConfig+0x250>
 8008a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a74:	d008      	beq.n	8008a88 <UART_SetConfig+0x260>
 8008a76:	e00f      	b.n	8008a98 <UART_SetConfig+0x270>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a7e:	e052      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a80:	2302      	movs	r3, #2
 8008a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a86:	e04e      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a8e:	e04a      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a90:	2308      	movs	r3, #8
 8008a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a96:	e046      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a9e:	e042      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a17      	ldr	r2, [pc, #92]	@ (8008b04 <UART_SetConfig+0x2dc>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d13a      	bne.n	8008b20 <UART_SetConfig+0x2f8>
 8008aaa:	4b18      	ldr	r3, [pc, #96]	@ (8008b0c <UART_SetConfig+0x2e4>)
 8008aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ab4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ab8:	d01a      	beq.n	8008af0 <UART_SetConfig+0x2c8>
 8008aba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008abe:	d81b      	bhi.n	8008af8 <UART_SetConfig+0x2d0>
 8008ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ac4:	d00c      	beq.n	8008ae0 <UART_SetConfig+0x2b8>
 8008ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aca:	d815      	bhi.n	8008af8 <UART_SetConfig+0x2d0>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <UART_SetConfig+0x2b0>
 8008ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ad4:	d008      	beq.n	8008ae8 <UART_SetConfig+0x2c0>
 8008ad6:	e00f      	b.n	8008af8 <UART_SetConfig+0x2d0>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ade:	e022      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ae6:	e01e      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008ae8:	2304      	movs	r3, #4
 8008aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aee:	e01a      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008af0:	2308      	movs	r3, #8
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af6:	e016      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008af8:	2310      	movs	r3, #16
 8008afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afe:	e012      	b.n	8008b26 <UART_SetConfig+0x2fe>
 8008b00:	cfff69f3 	.word	0xcfff69f3
 8008b04:	40008000 	.word	0x40008000
 8008b08:	40013800 	.word	0x40013800
 8008b0c:	40021000 	.word	0x40021000
 8008b10:	40004400 	.word	0x40004400
 8008b14:	40004800 	.word	0x40004800
 8008b18:	40004c00 	.word	0x40004c00
 8008b1c:	40005000 	.word	0x40005000
 8008b20:	2310      	movs	r3, #16
 8008b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4aae      	ldr	r2, [pc, #696]	@ (8008de4 <UART_SetConfig+0x5bc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	f040 8097 	bne.w	8008c60 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b36:	2b08      	cmp	r3, #8
 8008b38:	d823      	bhi.n	8008b82 <UART_SetConfig+0x35a>
 8008b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b40 <UART_SetConfig+0x318>)
 8008b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b40:	08008b65 	.word	0x08008b65
 8008b44:	08008b83 	.word	0x08008b83
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b83 	.word	0x08008b83
 8008b50:	08008b73 	.word	0x08008b73
 8008b54:	08008b83 	.word	0x08008b83
 8008b58:	08008b83 	.word	0x08008b83
 8008b5c:	08008b83 	.word	0x08008b83
 8008b60:	08008b7b 	.word	0x08008b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b64:	f7fd f9ec 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8008b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b6a:	e010      	b.n	8008b8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b6c:	4b9e      	ldr	r3, [pc, #632]	@ (8008de8 <UART_SetConfig+0x5c0>)
 8008b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b70:	e00d      	b.n	8008b8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b72:	f7fd f977 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8008b76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b78:	e009      	b.n	8008b8e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b80:	e005      	b.n	8008b8e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8130 	beq.w	8008df6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9a:	4a94      	ldr	r2, [pc, #592]	@ (8008dec <UART_SetConfig+0x5c4>)
 8008b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	4413      	add	r3, r2
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d305      	bcc.n	8008bc6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d903      	bls.n	8008bce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008bcc:	e113      	b.n	8008df6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	60bb      	str	r3, [r7, #8]
 8008bd4:	60fa      	str	r2, [r7, #12]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bda:	4a84      	ldr	r2, [pc, #528]	@ (8008dec <UART_SetConfig+0x5c4>)
 8008bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2200      	movs	r2, #0
 8008be4:	603b      	str	r3, [r7, #0]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bf0:	f7f8 f862 	bl	8000cb8 <__aeabi_uldivmod>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	f04f 0300 	mov.w	r3, #0
 8008c04:	020b      	lsls	r3, r1, #8
 8008c06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c0a:	0202      	lsls	r2, r0, #8
 8008c0c:	6979      	ldr	r1, [r7, #20]
 8008c0e:	6849      	ldr	r1, [r1, #4]
 8008c10:	0849      	lsrs	r1, r1, #1
 8008c12:	2000      	movs	r0, #0
 8008c14:	460c      	mov	r4, r1
 8008c16:	4605      	mov	r5, r0
 8008c18:	eb12 0804 	adds.w	r8, r2, r4
 8008c1c:	eb43 0905 	adc.w	r9, r3, r5
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	469a      	mov	sl, r3
 8008c28:	4693      	mov	fp, r2
 8008c2a:	4652      	mov	r2, sl
 8008c2c:	465b      	mov	r3, fp
 8008c2e:	4640      	mov	r0, r8
 8008c30:	4649      	mov	r1, r9
 8008c32:	f7f8 f841 	bl	8000cb8 <__aeabi_uldivmod>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c44:	d308      	bcc.n	8008c58 <UART_SetConfig+0x430>
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c4c:	d204      	bcs.n	8008c58 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6a3a      	ldr	r2, [r7, #32]
 8008c54:	60da      	str	r2, [r3, #12]
 8008c56:	e0ce      	b.n	8008df6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008c5e:	e0ca      	b.n	8008df6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c68:	d166      	bne.n	8008d38 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	d827      	bhi.n	8008cc2 <UART_SetConfig+0x49a>
 8008c72:	a201      	add	r2, pc, #4	@ (adr r2, 8008c78 <UART_SetConfig+0x450>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	08008cc3 	.word	0x08008cc3
 8008c88:	08008cb3 	.word	0x08008cb3
 8008c8c:	08008cc3 	.word	0x08008cc3
 8008c90:	08008cc3 	.word	0x08008cc3
 8008c94:	08008cc3 	.word	0x08008cc3
 8008c98:	08008cbb 	.word	0x08008cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c9c:	f7fd f950 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8008ca0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ca2:	e014      	b.n	8008cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ca4:	f7fd f962 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 8008ca8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008caa:	e010      	b.n	8008cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cac:	4b4e      	ldr	r3, [pc, #312]	@ (8008de8 <UART_SetConfig+0x5c0>)
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cb0:	e00d      	b.n	8008cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cb2:	f7fd f8d7 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8008cb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008cb8:	e009      	b.n	8008cce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008cc0:	e005      	b.n	8008cce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8090 	beq.w	8008df6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cda:	4a44      	ldr	r2, [pc, #272]	@ (8008dec <UART_SetConfig+0x5c4>)
 8008cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce8:	005a      	lsls	r2, r3, #1
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	085b      	lsrs	r3, r3, #1
 8008cf0:	441a      	add	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	2b0f      	cmp	r3, #15
 8008d00:	d916      	bls.n	8008d30 <UART_SetConfig+0x508>
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d08:	d212      	bcs.n	8008d30 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f023 030f 	bic.w	r3, r3, #15
 8008d12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	8bfb      	ldrh	r3, [r7, #30]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	8bfa      	ldrh	r2, [r7, #30]
 8008d2c:	60da      	str	r2, [r3, #12]
 8008d2e:	e062      	b.n	8008df6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d36:	e05e      	b.n	8008df6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d828      	bhi.n	8008d92 <UART_SetConfig+0x56a>
 8008d40:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <UART_SetConfig+0x520>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	08008d93 	.word	0x08008d93
 8008d58:	08008d83 	.word	0x08008d83
 8008d5c:	08008d93 	.word	0x08008d93
 8008d60:	08008d93 	.word	0x08008d93
 8008d64:	08008d93 	.word	0x08008d93
 8008d68:	08008d8b 	.word	0x08008d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d6c:	f7fd f8e8 	bl	8005f40 <HAL_RCC_GetPCLK1Freq>
 8008d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d72:	e014      	b.n	8008d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d74:	f7fd f8fa 	bl	8005f6c <HAL_RCC_GetPCLK2Freq>
 8008d78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d7a:	e010      	b.n	8008d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008de8 <UART_SetConfig+0x5c0>)
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d80:	e00d      	b.n	8008d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d82:	f7fd f86f 	bl	8005e64 <HAL_RCC_GetSysClockFreq>
 8008d86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d88:	e009      	b.n	8008d9e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d90:	e005      	b.n	8008d9e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d028      	beq.n	8008df6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da8:	4a10      	ldr	r2, [pc, #64]	@ (8008dec <UART_SetConfig+0x5c4>)
 8008daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	085b      	lsrs	r3, r3, #1
 8008dbc:	441a      	add	r2, r3
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	2b0f      	cmp	r3, #15
 8008dcc:	d910      	bls.n	8008df0 <UART_SetConfig+0x5c8>
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd4:	d20c      	bcs.n	8008df0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60da      	str	r2, [r3, #12]
 8008de0:	e009      	b.n	8008df6 <UART_SetConfig+0x5ce>
 8008de2:	bf00      	nop
 8008de4:	40008000 	.word	0x40008000
 8008de8:	00f42400 	.word	0x00f42400
 8008dec:	0800d0d0 	.word	0x0800d0d0
      }
      else
      {
        ret = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008e12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3730      	adds	r7, #48	@ 0x30
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00a      	beq.n	8008ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01a      	beq.n	8008f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	430a      	orrs	r2, r1
 8008f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f1e:	d10a      	bne.n	8008f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	430a      	orrs	r2, r1
 8008f56:	605a      	str	r2, [r3, #4]
  }
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af02      	add	r7, sp, #8
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f74:	f7f9 fc28 	bl	80027c8 <HAL_GetTick>
 8008f78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d10e      	bne.n	8008fa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f82f 	bl	8008ffa <UART_WaitOnFlagUntilTimeout>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	e025      	b.n	8008ff2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d10e      	bne.n	8008fd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f819 	bl	8008ffa <UART_WaitOnFlagUntilTimeout>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e00f      	b.n	8008ff2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b09c      	sub	sp, #112	@ 0x70
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	603b      	str	r3, [r7, #0]
 8009006:	4613      	mov	r3, r2
 8009008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800900a:	e0a9      	b.n	8009160 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800900c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009012:	f000 80a5 	beq.w	8009160 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009016:	f7f9 fbd7 	bl	80027c8 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <UART_WaitOnFlagUntilTimeout+0x32>
 8009026:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009028:	2b00      	cmp	r3, #0
 800902a:	d140      	bne.n	80090ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800903a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009040:	667b      	str	r3, [r7, #100]	@ 0x64
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800904a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800904c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009050:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e6      	bne.n	800902c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3308      	adds	r3, #8
 8009064:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	f023 0301 	bic.w	r3, r3, #1
 8009074:	663b      	str	r3, [r7, #96]	@ 0x60
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3308      	adds	r3, #8
 800907c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800907e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009080:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800908c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e5      	bne.n	800905e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e069      	b.n	8009182 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d051      	beq.n	8009160 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090ca:	d149      	bne.n	8009160 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80090d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80090ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80090fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090fc:	e841 2300 	strex	r3, r2, [r1]
 8009100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1e6      	bne.n	80090d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3308      	adds	r3, #8
 800910e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	613b      	str	r3, [r7, #16]
   return(result);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3308      	adds	r3, #8
 8009126:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009128:	623a      	str	r2, [r7, #32]
 800912a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	69f9      	ldr	r1, [r7, #28]
 800912e:	6a3a      	ldr	r2, [r7, #32]
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	61bb      	str	r3, [r7, #24]
   return(result);
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e5      	bne.n	8009108 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2220      	movs	r2, #32
 8009148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2220      	movs	r2, #32
 8009150:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e010      	b.n	8009182 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69da      	ldr	r2, [r3, #28]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	4013      	ands	r3, r2
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	429a      	cmp	r2, r3
 800916e:	bf0c      	ite	eq
 8009170:	2301      	moveq	r3, #1
 8009172:	2300      	movne	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	429a      	cmp	r2, r3
 800917c:	f43f af46 	beq.w	800900c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3770      	adds	r7, #112	@ 0x70
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800918c:	b480      	push	{r7}
 800918e:	b0a3      	sub	sp, #140	@ 0x8c
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	4613      	mov	r3, r2
 8009198:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	88fa      	ldrh	r2, [r7, #6]
 80091a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091be:	d10e      	bne.n	80091de <UART_Start_Receive_IT+0x52>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d105      	bne.n	80091d4 <UART_Start_Receive_IT+0x48>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80091ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091d2:	e02d      	b.n	8009230 <UART_Start_Receive_IT+0xa4>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	22ff      	movs	r2, #255	@ 0xff
 80091d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091dc:	e028      	b.n	8009230 <UART_Start_Receive_IT+0xa4>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <UART_Start_Receive_IT+0x76>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d104      	bne.n	80091f8 <UART_Start_Receive_IT+0x6c>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	22ff      	movs	r2, #255	@ 0xff
 80091f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80091f6:	e01b      	b.n	8009230 <UART_Start_Receive_IT+0xa4>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	227f      	movs	r2, #127	@ 0x7f
 80091fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009200:	e016      	b.n	8009230 <UART_Start_Receive_IT+0xa4>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800920a:	d10d      	bne.n	8009228 <UART_Start_Receive_IT+0x9c>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <UART_Start_Receive_IT+0x92>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	227f      	movs	r2, #127	@ 0x7f
 8009218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800921c:	e008      	b.n	8009230 <UART_Start_Receive_IT+0xa4>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	223f      	movs	r2, #63	@ 0x3f
 8009222:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009226:	e003      	b.n	8009230 <UART_Start_Receive_IT+0xa4>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2222      	movs	r2, #34	@ 0x22
 800923c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3308      	adds	r3, #8
 8009246:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3308      	adds	r3, #8
 8009260:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009264:	673a      	str	r2, [r7, #112]	@ 0x70
 8009266:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800926a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e3      	bne.n	8009240 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800927c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009280:	d153      	bne.n	800932a <UART_Start_Receive_IT+0x19e>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009288:	88fa      	ldrh	r2, [r7, #6]
 800928a:	429a      	cmp	r2, r3
 800928c:	d34d      	bcc.n	800932a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009296:	d107      	bne.n	80092a8 <UART_Start_Receive_IT+0x11c>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a4b      	ldr	r2, [pc, #300]	@ (80093d0 <UART_Start_Receive_IT+0x244>)
 80092a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80092a6:	e002      	b.n	80092ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4a4a      	ldr	r2, [pc, #296]	@ (80093d4 <UART_Start_Receive_IT+0x248>)
 80092ac:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d01a      	beq.n	80092f4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80092cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092e2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80092e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092e8:	e841 2300 	strex	r3, r2, [r1]
 80092ec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80092ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1e4      	bne.n	80092be <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3308      	adds	r3, #8
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800930a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3308      	adds	r3, #8
 8009312:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009314:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009316:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800931a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e5      	bne.n	80092f4 <UART_Start_Receive_IT+0x168>
 8009328:	e04a      	b.n	80093c0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009332:	d107      	bne.n	8009344 <UART_Start_Receive_IT+0x1b8>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4a26      	ldr	r2, [pc, #152]	@ (80093d8 <UART_Start_Receive_IT+0x24c>)
 8009340:	671a      	str	r2, [r3, #112]	@ 0x70
 8009342:	e002      	b.n	800934a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4a25      	ldr	r2, [pc, #148]	@ (80093dc <UART_Start_Receive_IT+0x250>)
 8009348:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d019      	beq.n	800938e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800936e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	461a      	mov	r2, r3
 8009376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009378:	637b      	str	r3, [r7, #52]	@ 0x34
 800937a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800937e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e6      	bne.n	800935a <UART_Start_Receive_IT+0x1ce>
 800938c:	e018      	b.n	80093c0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	e853 3f00 	ldrex	r3, [r3]
 800939a:	613b      	str	r3, [r7, #16]
   return(result);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f043 0320 	orr.w	r3, r3, #32
 80093a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	69f9      	ldr	r1, [r7, #28]
 80093b2:	6a3a      	ldr	r2, [r7, #32]
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e6      	bne.n	800938e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	378c      	adds	r7, #140	@ 0x8c
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	08009ae9 	.word	0x08009ae9
 80093d4:	080097f1 	.word	0x080097f1
 80093d8:	0800968f 	.word	0x0800968f
 80093dc:	0800952f 	.word	0x0800952f

080093e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b095      	sub	sp, #84	@ 0x54
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009406:	643b      	str	r3, [r7, #64]	@ 0x40
 8009408:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800940c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e6      	bne.n	80093e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	61fb      	str	r3, [r7, #28]
   return(result);
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800943e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e3      	bne.n	800941a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009456:	2b01      	cmp	r3, #1
 8009458:	d118      	bne.n	800948c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	60bb      	str	r3, [r7, #8]
   return(result);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f023 0310 	bic.w	r3, r3, #16
 800946e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6979      	ldr	r1, [r7, #20]
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	613b      	str	r3, [r7, #16]
   return(result);
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80094a0:	bf00      	nop
 80094a2:	3754      	adds	r7, #84	@ 0x54
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f7ff f996 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f4:	61fb      	str	r3, [r7, #28]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	61bb      	str	r3, [r7, #24]
 8009500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	6979      	ldr	r1, [r7, #20]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	613b      	str	r3, [r7, #16]
   return(result);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e6      	bne.n	80094e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2220      	movs	r2, #32
 8009516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f7ff f961 	bl	80087e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009526:	bf00      	nop
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b096      	sub	sp, #88	@ 0x58
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800953c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009546:	2b22      	cmp	r3, #34	@ 0x22
 8009548:	f040 8095 	bne.w	8009676 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009552:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009556:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800955a:	b2d9      	uxtb	r1, r3
 800955c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009560:	b2da      	uxtb	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009566:	400a      	ands	r2, r1
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800957c:	b29b      	uxth	r3, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	b29a      	uxth	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d178      	bne.n	8009686 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	461a      	mov	r2, r3
 80095b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80095b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ba:	e841 2300 	strex	r3, r2, [r1]
 80095be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1e6      	bne.n	8009594 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3308      	adds	r3, #8
 80095cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d0:	e853 3f00 	ldrex	r3, [r3]
 80095d4:	623b      	str	r3, [r7, #32]
   return(result);
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	f023 0301 	bic.w	r3, r3, #1
 80095dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3308      	adds	r3, #8
 80095e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e5      	bne.n	80095c6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800960c:	2b01      	cmp	r3, #1
 800960e:	d12e      	bne.n	800966e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	60fb      	str	r3, [r7, #12]
   return(result);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0310 	bic.w	r3, r3, #16
 800962a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	69b9      	ldr	r1, [r7, #24]
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	617b      	str	r3, [r7, #20]
   return(result);
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e6      	bne.n	8009616 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b10      	cmp	r3, #16
 8009654:	d103      	bne.n	800965e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2210      	movs	r2, #16
 800965c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff f8d2 	bl	8008810 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800966c:	e00b      	b.n	8009686 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7f8 fffa 	bl	8002668 <HAL_UART_RxCpltCallback>
}
 8009674:	e007      	b.n	8009686 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f042 0208 	orr.w	r2, r2, #8
 8009684:	619a      	str	r2, [r3, #24]
}
 8009686:	bf00      	nop
 8009688:	3758      	adds	r7, #88	@ 0x58
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b096      	sub	sp, #88	@ 0x58
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800969c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a6:	2b22      	cmp	r3, #34	@ 0x22
 80096a8:	f040 8095 	bne.w	80097d6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80096bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80096c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80096c4:	4013      	ands	r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d0:	1c9a      	adds	r2, r3, #2
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096dc:	b29b      	uxth	r3, r3
 80096de:	3b01      	subs	r3, #1
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d178      	bne.n	80097e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	461a      	mov	r2, r3
 8009710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009712:	643b      	str	r3, [r7, #64]	@ 0x40
 8009714:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e6      	bne.n	80096f4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3308      	adds	r3, #8
 800972c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	61fb      	str	r3, [r7, #28]
   return(result);
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	f023 0301 	bic.w	r3, r3, #1
 800973c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800974c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e5      	bne.n	8009726 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2220      	movs	r2, #32
 800975e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800976c:	2b01      	cmp	r3, #1
 800976e:	d12e      	bne.n	80097ce <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	e853 3f00 	ldrex	r3, [r3]
 8009782:	60bb      	str	r3, [r7, #8]
   return(result);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f023 0310 	bic.w	r3, r3, #16
 800978a:	647b      	str	r3, [r7, #68]	@ 0x44
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009794:	61bb      	str	r3, [r7, #24]
 8009796:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6979      	ldr	r1, [r7, #20]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	613b      	str	r3, [r7, #16]
   return(result);
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e6      	bne.n	8009776 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f003 0310 	and.w	r3, r3, #16
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d103      	bne.n	80097be <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2210      	movs	r2, #16
 80097bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff f822 	bl	8008810 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097cc:	e00b      	b.n	80097e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7f8 ff4a 	bl	8002668 <HAL_UART_RxCpltCallback>
}
 80097d4:	e007      	b.n	80097e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0208 	orr.w	r2, r2, #8
 80097e4:	619a      	str	r2, [r3, #24]
}
 80097e6:	bf00      	nop
 80097e8:	3758      	adds	r7, #88	@ 0x58
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b0a6      	sub	sp, #152	@ 0x98
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097fe:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009826:	2b22      	cmp	r3, #34	@ 0x22
 8009828:	f040 814f 	bne.w	8009aca <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009832:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009836:	e0f6      	b.n	8009a26 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009842:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009846:	b2d9      	uxtb	r1, r3
 8009848:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800984c:	b2da      	uxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009852:	400a      	ands	r2, r1
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800987e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d053      	beq.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800988a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d011      	beq.n	80098ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8009896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800989a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00b      	beq.n	80098ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2201      	movs	r2, #1
 80098a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098b0:	f043 0201 	orr.w	r2, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d011      	beq.n	80098ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00b      	beq.n	80098ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2202      	movs	r2, #2
 80098d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e0:	f043 0204 	orr.w	r2, r3, #4
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d011      	beq.n	800991a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2204      	movs	r2, #4
 8009908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009910:	f043 0202 	orr.w	r2, r3, #2
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d006      	beq.n	8009932 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fe ff69 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d173      	bne.n	8009a26 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009946:	e853 3f00 	ldrex	r3, [r3]
 800994a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800994c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800994e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009952:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009962:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009966:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800996e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e4      	bne.n	800993e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800998a:	f023 0301 	bic.w	r3, r3, #1
 800998e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3308      	adds	r3, #8
 8009996:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009998:	657a      	str	r2, [r7, #84]	@ 0x54
 800999a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800999e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e3      	bne.n	8009974 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d12e      	bne.n	8009a20 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	f023 0310 	bic.w	r3, r3, #16
 80099dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e6      	bne.n	80099c8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b10      	cmp	r3, #16
 8009a06:	d103      	bne.n	8009a10 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2210      	movs	r2, #16
 8009a0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fe fef9 	bl	8008810 <HAL_UARTEx_RxEventCallback>
 8009a1e:	e002      	b.n	8009a26 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7f8 fe21 	bl	8002668 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d006      	beq.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009a2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f47f aefe 	bne.w	8009838 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a46:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d045      	beq.n	8009ada <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d23e      	bcs.n	8009ada <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a72:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3308      	adds	r3, #8
 8009a7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e5      	bne.n	8009a5c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a14      	ldr	r2, [pc, #80]	@ (8009ae4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009a94:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f043 0320 	orr.w	r3, r3, #32
 8009aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	6979      	ldr	r1, [r7, #20]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e6      	bne.n	8009a96 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ac8:	e007      	b.n	8009ada <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0208 	orr.w	r2, r2, #8
 8009ad8:	619a      	str	r2, [r3, #24]
}
 8009ada:	bf00      	nop
 8009adc:	3798      	adds	r7, #152	@ 0x98
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800952f 	.word	0x0800952f

08009ae8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b0a8      	sub	sp, #160	@ 0xa0
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009af6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1e:	2b22      	cmp	r3, #34	@ 0x22
 8009b20:	f040 8153 	bne.w	8009dca <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b2a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b2e:	e0fa      	b.n	8009d26 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b36:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b42:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009b46:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b58:	1c9a      	adds	r2, r3, #2
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	69db      	ldr	r3, [r3, #28]
 8009b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b7e:	f003 0307 	and.w	r3, r3, #7
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d053      	beq.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d011      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00b      	beq.n	8009bb6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bac:	f043 0201 	orr.w	r2, r3, #1
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d011      	beq.n	8009be6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2202      	movs	r2, #2
 8009bd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bdc:	f043 0204 	orr.w	r2, r3, #4
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bea:	f003 0304 	and.w	r3, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d011      	beq.n	8009c16 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2204      	movs	r2, #4
 8009c04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c0c:	f043 0202 	orr.w	r2, r3, #2
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d006      	beq.n	8009c2e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7fe fdeb 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d175      	bne.n	8009d26 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c5e:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e4      	bne.n	8009c3a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3308      	adds	r3, #8
 8009c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7a:	e853 3f00 	ldrex	r3, [r3]
 8009c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c86:	f023 0301 	bic.w	r3, r3, #1
 8009c8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ca0:	e841 2300 	strex	r3, r2, [r1]
 8009ca4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e1      	bne.n	8009c70 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d12e      	bne.n	8009d20 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd0:	e853 3f00 	ldrex	r3, [r3]
 8009cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd8:	f023 0310 	bic.w	r3, r3, #16
 8009cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cee:	e841 2300 	strex	r3, r2, [r1]
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1e6      	bne.n	8009cc8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	2b10      	cmp	r3, #16
 8009d06:	d103      	bne.n	8009d10 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7fe fd79 	bl	8008810 <HAL_UARTEx_RxEventCallback>
 8009d1e:	e002      	b.n	8009d26 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f7f8 fca1 	bl	8002668 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d006      	beq.n	8009d3c <UART_RxISR_16BIT_FIFOEN+0x254>
 8009d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d32:	f003 0320 	and.w	r3, r3, #32
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f47f aefa 	bne.w	8009b30 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d42:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d46:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d045      	beq.n	8009dda <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d54:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d23e      	bcs.n	8009dda <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	3308      	adds	r3, #8
 8009d62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	3308      	adds	r3, #8
 8009d7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e5      	bne.n	8009d5c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a14      	ldr	r2, [pc, #80]	@ (8009de4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009d94:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f043 0320 	orr.w	r3, r3, #32
 8009daa:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	461a      	mov	r2, r3
 8009db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009db4:	61fb      	str	r3, [r7, #28]
 8009db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e6      	bne.n	8009d96 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dc8:	e007      	b.n	8009dda <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	699a      	ldr	r2, [r3, #24]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0208 	orr.w	r2, r2, #8
 8009dd8:	619a      	str	r2, [r3, #24]
}
 8009dda:	bf00      	nop
 8009ddc:	37a0      	adds	r7, #160	@ 0xa0
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	0800968f 	.word	0x0800968f

08009de8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UARTEx_DisableFifoMode+0x16>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e027      	b.n	8009e8a <HAL_UARTEx_DisableFifoMode+0x66>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2224      	movs	r2, #36	@ 0x24
 8009e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f022 0201 	bic.w	r2, r2, #1
 8009e60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d101      	bne.n	8009eae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009eaa:	2302      	movs	r3, #2
 8009eac:	e02d      	b.n	8009f0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2224      	movs	r2, #36	@ 0x24
 8009eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0201 	bic.w	r2, r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f850 	bl	8009f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d101      	bne.n	8009f2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f26:	2302      	movs	r3, #2
 8009f28:	e02d      	b.n	8009f86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2224      	movs	r2, #36	@ 0x24
 8009f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0201 	bic.w	r2, r2, #1
 8009f50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f812 	bl	8009f90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
	...

08009f90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d108      	bne.n	8009fb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fb0:	e031      	b.n	800a016 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fb2:	2308      	movs	r3, #8
 8009fb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	0e5b      	lsrs	r3, r3, #25
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0307 	and.w	r3, r3, #7
 8009fc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	0f5b      	lsrs	r3, r3, #29
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	f003 0307 	and.w	r3, r3, #7
 8009fd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fda:	7bbb      	ldrb	r3, [r7, #14]
 8009fdc:	7b3a      	ldrb	r2, [r7, #12]
 8009fde:	4911      	ldr	r1, [pc, #68]	@ (800a024 <UARTEx_SetNbDataToProcess+0x94>)
 8009fe0:	5c8a      	ldrb	r2, [r1, r2]
 8009fe2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009fe6:	7b3a      	ldrb	r2, [r7, #12]
 8009fe8:	490f      	ldr	r1, [pc, #60]	@ (800a028 <UARTEx_SetNbDataToProcess+0x98>)
 8009fea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009fec:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
 8009ffa:	7b7a      	ldrb	r2, [r7, #13]
 8009ffc:	4909      	ldr	r1, [pc, #36]	@ (800a024 <UARTEx_SetNbDataToProcess+0x94>)
 8009ffe:	5c8a      	ldrb	r2, [r1, r2]
 800a000:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a004:	7b7a      	ldrb	r2, [r7, #13]
 800a006:	4908      	ldr	r1, [pc, #32]	@ (800a028 <UARTEx_SetNbDataToProcess+0x98>)
 800a008:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a00a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a00e:	b29a      	uxth	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	0800d0e8 	.word	0x0800d0e8
 800a028:	0800d0f0 	.word	0x0800d0f0

0800a02c <atoi>:
 800a02c:	220a      	movs	r2, #10
 800a02e:	2100      	movs	r1, #0
 800a030:	f000 b87a 	b.w	800a128 <strtol>

0800a034 <_strtol_l.constprop.0>:
 800a034:	2b24      	cmp	r3, #36	@ 0x24
 800a036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a03a:	4686      	mov	lr, r0
 800a03c:	4690      	mov	r8, r2
 800a03e:	d801      	bhi.n	800a044 <_strtol_l.constprop.0+0x10>
 800a040:	2b01      	cmp	r3, #1
 800a042:	d106      	bne.n	800a052 <_strtol_l.constprop.0+0x1e>
 800a044:	f000 ffcc 	bl	800afe0 <__errno>
 800a048:	2316      	movs	r3, #22
 800a04a:	6003      	str	r3, [r0, #0]
 800a04c:	2000      	movs	r0, #0
 800a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a052:	4834      	ldr	r0, [pc, #208]	@ (800a124 <_strtol_l.constprop.0+0xf0>)
 800a054:	460d      	mov	r5, r1
 800a056:	462a      	mov	r2, r5
 800a058:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a05c:	5d06      	ldrb	r6, [r0, r4]
 800a05e:	f016 0608 	ands.w	r6, r6, #8
 800a062:	d1f8      	bne.n	800a056 <_strtol_l.constprop.0+0x22>
 800a064:	2c2d      	cmp	r4, #45	@ 0x2d
 800a066:	d12d      	bne.n	800a0c4 <_strtol_l.constprop.0+0x90>
 800a068:	782c      	ldrb	r4, [r5, #0]
 800a06a:	2601      	movs	r6, #1
 800a06c:	1c95      	adds	r5, r2, #2
 800a06e:	f033 0210 	bics.w	r2, r3, #16
 800a072:	d109      	bne.n	800a088 <_strtol_l.constprop.0+0x54>
 800a074:	2c30      	cmp	r4, #48	@ 0x30
 800a076:	d12a      	bne.n	800a0ce <_strtol_l.constprop.0+0x9a>
 800a078:	782a      	ldrb	r2, [r5, #0]
 800a07a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a07e:	2a58      	cmp	r2, #88	@ 0x58
 800a080:	d125      	bne.n	800a0ce <_strtol_l.constprop.0+0x9a>
 800a082:	786c      	ldrb	r4, [r5, #1]
 800a084:	2310      	movs	r3, #16
 800a086:	3502      	adds	r5, #2
 800a088:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a08c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a090:	2200      	movs	r2, #0
 800a092:	fbbc f9f3 	udiv	r9, ip, r3
 800a096:	4610      	mov	r0, r2
 800a098:	fb03 ca19 	mls	sl, r3, r9, ip
 800a09c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a0a0:	2f09      	cmp	r7, #9
 800a0a2:	d81b      	bhi.n	800a0dc <_strtol_l.constprop.0+0xa8>
 800a0a4:	463c      	mov	r4, r7
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	dd27      	ble.n	800a0fa <_strtol_l.constprop.0+0xc6>
 800a0aa:	1c57      	adds	r7, r2, #1
 800a0ac:	d007      	beq.n	800a0be <_strtol_l.constprop.0+0x8a>
 800a0ae:	4581      	cmp	r9, r0
 800a0b0:	d320      	bcc.n	800a0f4 <_strtol_l.constprop.0+0xc0>
 800a0b2:	d101      	bne.n	800a0b8 <_strtol_l.constprop.0+0x84>
 800a0b4:	45a2      	cmp	sl, r4
 800a0b6:	db1d      	blt.n	800a0f4 <_strtol_l.constprop.0+0xc0>
 800a0b8:	fb00 4003 	mla	r0, r0, r3, r4
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0c2:	e7eb      	b.n	800a09c <_strtol_l.constprop.0+0x68>
 800a0c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0c6:	bf04      	itt	eq
 800a0c8:	782c      	ldrbeq	r4, [r5, #0]
 800a0ca:	1c95      	addeq	r5, r2, #2
 800a0cc:	e7cf      	b.n	800a06e <_strtol_l.constprop.0+0x3a>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1da      	bne.n	800a088 <_strtol_l.constprop.0+0x54>
 800a0d2:	2c30      	cmp	r4, #48	@ 0x30
 800a0d4:	bf0c      	ite	eq
 800a0d6:	2308      	moveq	r3, #8
 800a0d8:	230a      	movne	r3, #10
 800a0da:	e7d5      	b.n	800a088 <_strtol_l.constprop.0+0x54>
 800a0dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a0e0:	2f19      	cmp	r7, #25
 800a0e2:	d801      	bhi.n	800a0e8 <_strtol_l.constprop.0+0xb4>
 800a0e4:	3c37      	subs	r4, #55	@ 0x37
 800a0e6:	e7de      	b.n	800a0a6 <_strtol_l.constprop.0+0x72>
 800a0e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a0ec:	2f19      	cmp	r7, #25
 800a0ee:	d804      	bhi.n	800a0fa <_strtol_l.constprop.0+0xc6>
 800a0f0:	3c57      	subs	r4, #87	@ 0x57
 800a0f2:	e7d8      	b.n	800a0a6 <_strtol_l.constprop.0+0x72>
 800a0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f8:	e7e1      	b.n	800a0be <_strtol_l.constprop.0+0x8a>
 800a0fa:	1c53      	adds	r3, r2, #1
 800a0fc:	d108      	bne.n	800a110 <_strtol_l.constprop.0+0xdc>
 800a0fe:	2322      	movs	r3, #34	@ 0x22
 800a100:	f8ce 3000 	str.w	r3, [lr]
 800a104:	4660      	mov	r0, ip
 800a106:	f1b8 0f00 	cmp.w	r8, #0
 800a10a:	d0a0      	beq.n	800a04e <_strtol_l.constprop.0+0x1a>
 800a10c:	1e69      	subs	r1, r5, #1
 800a10e:	e006      	b.n	800a11e <_strtol_l.constprop.0+0xea>
 800a110:	b106      	cbz	r6, 800a114 <_strtol_l.constprop.0+0xe0>
 800a112:	4240      	negs	r0, r0
 800a114:	f1b8 0f00 	cmp.w	r8, #0
 800a118:	d099      	beq.n	800a04e <_strtol_l.constprop.0+0x1a>
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d1f6      	bne.n	800a10c <_strtol_l.constprop.0+0xd8>
 800a11e:	f8c8 1000 	str.w	r1, [r8]
 800a122:	e794      	b.n	800a04e <_strtol_l.constprop.0+0x1a>
 800a124:	0800d0f9 	.word	0x0800d0f9

0800a128 <strtol>:
 800a128:	4613      	mov	r3, r2
 800a12a:	460a      	mov	r2, r1
 800a12c:	4601      	mov	r1, r0
 800a12e:	4802      	ldr	r0, [pc, #8]	@ (800a138 <strtol+0x10>)
 800a130:	6800      	ldr	r0, [r0, #0]
 800a132:	f7ff bf7f 	b.w	800a034 <_strtol_l.constprop.0>
 800a136:	bf00      	nop
 800a138:	200000d8 	.word	0x200000d8

0800a13c <__cvt>:
 800a13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	ec57 6b10 	vmov	r6, r7, d0
 800a144:	2f00      	cmp	r7, #0
 800a146:	460c      	mov	r4, r1
 800a148:	4619      	mov	r1, r3
 800a14a:	463b      	mov	r3, r7
 800a14c:	bfbb      	ittet	lt
 800a14e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a152:	461f      	movlt	r7, r3
 800a154:	2300      	movge	r3, #0
 800a156:	232d      	movlt	r3, #45	@ 0x2d
 800a158:	700b      	strb	r3, [r1, #0]
 800a15a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a15c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a160:	4691      	mov	r9, r2
 800a162:	f023 0820 	bic.w	r8, r3, #32
 800a166:	bfbc      	itt	lt
 800a168:	4632      	movlt	r2, r6
 800a16a:	4616      	movlt	r6, r2
 800a16c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a170:	d005      	beq.n	800a17e <__cvt+0x42>
 800a172:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a176:	d100      	bne.n	800a17a <__cvt+0x3e>
 800a178:	3401      	adds	r4, #1
 800a17a:	2102      	movs	r1, #2
 800a17c:	e000      	b.n	800a180 <__cvt+0x44>
 800a17e:	2103      	movs	r1, #3
 800a180:	ab03      	add	r3, sp, #12
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	ab02      	add	r3, sp, #8
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	ec47 6b10 	vmov	d0, r6, r7
 800a18c:	4653      	mov	r3, sl
 800a18e:	4622      	mov	r2, r4
 800a190:	f000 fffa 	bl	800b188 <_dtoa_r>
 800a194:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a198:	4605      	mov	r5, r0
 800a19a:	d119      	bne.n	800a1d0 <__cvt+0x94>
 800a19c:	f019 0f01 	tst.w	r9, #1
 800a1a0:	d00e      	beq.n	800a1c0 <__cvt+0x84>
 800a1a2:	eb00 0904 	add.w	r9, r0, r4
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	f7f6 fcc3 	bl	8000b38 <__aeabi_dcmpeq>
 800a1b2:	b108      	cbz	r0, 800a1b8 <__cvt+0x7c>
 800a1b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1b8:	2230      	movs	r2, #48	@ 0x30
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	454b      	cmp	r3, r9
 800a1be:	d31e      	bcc.n	800a1fe <__cvt+0xc2>
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1c4:	1b5b      	subs	r3, r3, r5
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	b004      	add	sp, #16
 800a1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1d4:	eb00 0904 	add.w	r9, r0, r4
 800a1d8:	d1e5      	bne.n	800a1a6 <__cvt+0x6a>
 800a1da:	7803      	ldrb	r3, [r0, #0]
 800a1dc:	2b30      	cmp	r3, #48	@ 0x30
 800a1de:	d10a      	bne.n	800a1f6 <__cvt+0xba>
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 fca6 	bl	8000b38 <__aeabi_dcmpeq>
 800a1ec:	b918      	cbnz	r0, 800a1f6 <__cvt+0xba>
 800a1ee:	f1c4 0401 	rsb	r4, r4, #1
 800a1f2:	f8ca 4000 	str.w	r4, [sl]
 800a1f6:	f8da 3000 	ldr.w	r3, [sl]
 800a1fa:	4499      	add	r9, r3
 800a1fc:	e7d3      	b.n	800a1a6 <__cvt+0x6a>
 800a1fe:	1c59      	adds	r1, r3, #1
 800a200:	9103      	str	r1, [sp, #12]
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	e7d9      	b.n	800a1ba <__cvt+0x7e>

0800a206 <__exponent>:
 800a206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a208:	2900      	cmp	r1, #0
 800a20a:	bfba      	itte	lt
 800a20c:	4249      	neglt	r1, r1
 800a20e:	232d      	movlt	r3, #45	@ 0x2d
 800a210:	232b      	movge	r3, #43	@ 0x2b
 800a212:	2909      	cmp	r1, #9
 800a214:	7002      	strb	r2, [r0, #0]
 800a216:	7043      	strb	r3, [r0, #1]
 800a218:	dd29      	ble.n	800a26e <__exponent+0x68>
 800a21a:	f10d 0307 	add.w	r3, sp, #7
 800a21e:	461d      	mov	r5, r3
 800a220:	270a      	movs	r7, #10
 800a222:	461a      	mov	r2, r3
 800a224:	fbb1 f6f7 	udiv	r6, r1, r7
 800a228:	fb07 1416 	mls	r4, r7, r6, r1
 800a22c:	3430      	adds	r4, #48	@ 0x30
 800a22e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a232:	460c      	mov	r4, r1
 800a234:	2c63      	cmp	r4, #99	@ 0x63
 800a236:	f103 33ff 	add.w	r3, r3, #4294967295
 800a23a:	4631      	mov	r1, r6
 800a23c:	dcf1      	bgt.n	800a222 <__exponent+0x1c>
 800a23e:	3130      	adds	r1, #48	@ 0x30
 800a240:	1e94      	subs	r4, r2, #2
 800a242:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a246:	1c41      	adds	r1, r0, #1
 800a248:	4623      	mov	r3, r4
 800a24a:	42ab      	cmp	r3, r5
 800a24c:	d30a      	bcc.n	800a264 <__exponent+0x5e>
 800a24e:	f10d 0309 	add.w	r3, sp, #9
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	42ac      	cmp	r4, r5
 800a256:	bf88      	it	hi
 800a258:	2300      	movhi	r3, #0
 800a25a:	3302      	adds	r3, #2
 800a25c:	4403      	add	r3, r0
 800a25e:	1a18      	subs	r0, r3, r0
 800a260:	b003      	add	sp, #12
 800a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a264:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a268:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a26c:	e7ed      	b.n	800a24a <__exponent+0x44>
 800a26e:	2330      	movs	r3, #48	@ 0x30
 800a270:	3130      	adds	r1, #48	@ 0x30
 800a272:	7083      	strb	r3, [r0, #2]
 800a274:	70c1      	strb	r1, [r0, #3]
 800a276:	1d03      	adds	r3, r0, #4
 800a278:	e7f1      	b.n	800a25e <__exponent+0x58>
	...

0800a27c <_printf_float>:
 800a27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	b08d      	sub	sp, #52	@ 0x34
 800a282:	460c      	mov	r4, r1
 800a284:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a288:	4616      	mov	r6, r2
 800a28a:	461f      	mov	r7, r3
 800a28c:	4605      	mov	r5, r0
 800a28e:	f000 fe5d 	bl	800af4c <_localeconv_r>
 800a292:	6803      	ldr	r3, [r0, #0]
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	4618      	mov	r0, r3
 800a298:	f7f6 f822 	bl	80002e0 <strlen>
 800a29c:	2300      	movs	r3, #0
 800a29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a4:	9005      	str	r0, [sp, #20]
 800a2a6:	3307      	adds	r3, #7
 800a2a8:	f023 0307 	bic.w	r3, r3, #7
 800a2ac:	f103 0208 	add.w	r2, r3, #8
 800a2b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2b4:	f8d4 b000 	ldr.w	fp, [r4]
 800a2b8:	f8c8 2000 	str.w	r2, [r8]
 800a2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2c4:	9307      	str	r3, [sp, #28]
 800a2c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2d2:	4b9c      	ldr	r3, [pc, #624]	@ (800a544 <_printf_float+0x2c8>)
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	f7f6 fc60 	bl	8000b9c <__aeabi_dcmpun>
 800a2dc:	bb70      	cbnz	r0, 800a33c <_printf_float+0xc0>
 800a2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2e2:	4b98      	ldr	r3, [pc, #608]	@ (800a544 <_printf_float+0x2c8>)
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e8:	f7f6 fc3a 	bl	8000b60 <__aeabi_dcmple>
 800a2ec:	bb30      	cbnz	r0, 800a33c <_printf_float+0xc0>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f6 fc29 	bl	8000b4c <__aeabi_dcmplt>
 800a2fa:	b110      	cbz	r0, 800a302 <_printf_float+0x86>
 800a2fc:	232d      	movs	r3, #45	@ 0x2d
 800a2fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a302:	4a91      	ldr	r2, [pc, #580]	@ (800a548 <_printf_float+0x2cc>)
 800a304:	4b91      	ldr	r3, [pc, #580]	@ (800a54c <_printf_float+0x2d0>)
 800a306:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a30a:	bf94      	ite	ls
 800a30c:	4690      	movls	r8, r2
 800a30e:	4698      	movhi	r8, r3
 800a310:	2303      	movs	r3, #3
 800a312:	6123      	str	r3, [r4, #16]
 800a314:	f02b 0304 	bic.w	r3, fp, #4
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	f04f 0900 	mov.w	r9, #0
 800a31e:	9700      	str	r7, [sp, #0]
 800a320:	4633      	mov	r3, r6
 800a322:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a324:	4621      	mov	r1, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f000 f9d2 	bl	800a6d0 <_printf_common>
 800a32c:	3001      	adds	r0, #1
 800a32e:	f040 808d 	bne.w	800a44c <_printf_float+0x1d0>
 800a332:	f04f 30ff 	mov.w	r0, #4294967295
 800a336:	b00d      	add	sp, #52	@ 0x34
 800a338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33c:	4642      	mov	r2, r8
 800a33e:	464b      	mov	r3, r9
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	f7f6 fc2a 	bl	8000b9c <__aeabi_dcmpun>
 800a348:	b140      	cbz	r0, 800a35c <_printf_float+0xe0>
 800a34a:	464b      	mov	r3, r9
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfbc      	itt	lt
 800a350:	232d      	movlt	r3, #45	@ 0x2d
 800a352:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a356:	4a7e      	ldr	r2, [pc, #504]	@ (800a550 <_printf_float+0x2d4>)
 800a358:	4b7e      	ldr	r3, [pc, #504]	@ (800a554 <_printf_float+0x2d8>)
 800a35a:	e7d4      	b.n	800a306 <_printf_float+0x8a>
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a362:	9206      	str	r2, [sp, #24]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	d13b      	bne.n	800a3e0 <_printf_float+0x164>
 800a368:	2306      	movs	r3, #6
 800a36a:	6063      	str	r3, [r4, #4]
 800a36c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a370:	2300      	movs	r3, #0
 800a372:	6022      	str	r2, [r4, #0]
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	ab0a      	add	r3, sp, #40	@ 0x28
 800a378:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a37c:	ab09      	add	r3, sp, #36	@ 0x24
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	6861      	ldr	r1, [r4, #4]
 800a382:	ec49 8b10 	vmov	d0, r8, r9
 800a386:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7ff fed6 	bl	800a13c <__cvt>
 800a390:	9b06      	ldr	r3, [sp, #24]
 800a392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a394:	2b47      	cmp	r3, #71	@ 0x47
 800a396:	4680      	mov	r8, r0
 800a398:	d129      	bne.n	800a3ee <_printf_float+0x172>
 800a39a:	1cc8      	adds	r0, r1, #3
 800a39c:	db02      	blt.n	800a3a4 <_printf_float+0x128>
 800a39e:	6863      	ldr	r3, [r4, #4]
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	dd41      	ble.n	800a428 <_printf_float+0x1ac>
 800a3a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3a8:	fa5f fa8a 	uxtb.w	sl, sl
 800a3ac:	3901      	subs	r1, #1
 800a3ae:	4652      	mov	r2, sl
 800a3b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3b6:	f7ff ff26 	bl	800a206 <__exponent>
 800a3ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3bc:	1813      	adds	r3, r2, r0
 800a3be:	2a01      	cmp	r2, #1
 800a3c0:	4681      	mov	r9, r0
 800a3c2:	6123      	str	r3, [r4, #16]
 800a3c4:	dc02      	bgt.n	800a3cc <_printf_float+0x150>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	07d2      	lsls	r2, r2, #31
 800a3ca:	d501      	bpl.n	800a3d0 <_printf_float+0x154>
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	6123      	str	r3, [r4, #16]
 800a3d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0a2      	beq.n	800a31e <_printf_float+0xa2>
 800a3d8:	232d      	movs	r3, #45	@ 0x2d
 800a3da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3de:	e79e      	b.n	800a31e <_printf_float+0xa2>
 800a3e0:	9a06      	ldr	r2, [sp, #24]
 800a3e2:	2a47      	cmp	r2, #71	@ 0x47
 800a3e4:	d1c2      	bne.n	800a36c <_printf_float+0xf0>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1c0      	bne.n	800a36c <_printf_float+0xf0>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e7bd      	b.n	800a36a <_printf_float+0xee>
 800a3ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3f2:	d9db      	bls.n	800a3ac <_printf_float+0x130>
 800a3f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3f8:	d118      	bne.n	800a42c <_printf_float+0x1b0>
 800a3fa:	2900      	cmp	r1, #0
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	dd0b      	ble.n	800a418 <_printf_float+0x19c>
 800a400:	6121      	str	r1, [r4, #16]
 800a402:	b913      	cbnz	r3, 800a40a <_printf_float+0x18e>
 800a404:	6822      	ldr	r2, [r4, #0]
 800a406:	07d0      	lsls	r0, r2, #31
 800a408:	d502      	bpl.n	800a410 <_printf_float+0x194>
 800a40a:	3301      	adds	r3, #1
 800a40c:	440b      	add	r3, r1
 800a40e:	6123      	str	r3, [r4, #16]
 800a410:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a412:	f04f 0900 	mov.w	r9, #0
 800a416:	e7db      	b.n	800a3d0 <_printf_float+0x154>
 800a418:	b913      	cbnz	r3, 800a420 <_printf_float+0x1a4>
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	07d2      	lsls	r2, r2, #31
 800a41e:	d501      	bpl.n	800a424 <_printf_float+0x1a8>
 800a420:	3302      	adds	r3, #2
 800a422:	e7f4      	b.n	800a40e <_printf_float+0x192>
 800a424:	2301      	movs	r3, #1
 800a426:	e7f2      	b.n	800a40e <_printf_float+0x192>
 800a428:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a42e:	4299      	cmp	r1, r3
 800a430:	db05      	blt.n	800a43e <_printf_float+0x1c2>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	6121      	str	r1, [r4, #16]
 800a436:	07d8      	lsls	r0, r3, #31
 800a438:	d5ea      	bpl.n	800a410 <_printf_float+0x194>
 800a43a:	1c4b      	adds	r3, r1, #1
 800a43c:	e7e7      	b.n	800a40e <_printf_float+0x192>
 800a43e:	2900      	cmp	r1, #0
 800a440:	bfd4      	ite	le
 800a442:	f1c1 0202 	rsble	r2, r1, #2
 800a446:	2201      	movgt	r2, #1
 800a448:	4413      	add	r3, r2
 800a44a:	e7e0      	b.n	800a40e <_printf_float+0x192>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	055a      	lsls	r2, r3, #21
 800a450:	d407      	bmi.n	800a462 <_printf_float+0x1e6>
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	4642      	mov	r2, r8
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	d12b      	bne.n	800a4b8 <_printf_float+0x23c>
 800a460:	e767      	b.n	800a332 <_printf_float+0xb6>
 800a462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a466:	f240 80dd 	bls.w	800a624 <_printf_float+0x3a8>
 800a46a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a46e:	2200      	movs	r2, #0
 800a470:	2300      	movs	r3, #0
 800a472:	f7f6 fb61 	bl	8000b38 <__aeabi_dcmpeq>
 800a476:	2800      	cmp	r0, #0
 800a478:	d033      	beq.n	800a4e2 <_printf_float+0x266>
 800a47a:	4a37      	ldr	r2, [pc, #220]	@ (800a558 <_printf_float+0x2dc>)
 800a47c:	2301      	movs	r3, #1
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f af54 	beq.w	800a332 <_printf_float+0xb6>
 800a48a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a48e:	4543      	cmp	r3, r8
 800a490:	db02      	blt.n	800a498 <_printf_float+0x21c>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	07d8      	lsls	r0, r3, #31
 800a496:	d50f      	bpl.n	800a4b8 <_printf_float+0x23c>
 800a498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a49c:	4631      	mov	r1, r6
 800a49e:	4628      	mov	r0, r5
 800a4a0:	47b8      	blx	r7
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	f43f af45 	beq.w	800a332 <_printf_float+0xb6>
 800a4a8:	f04f 0900 	mov.w	r9, #0
 800a4ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4b0:	f104 0a1a 	add.w	sl, r4, #26
 800a4b4:	45c8      	cmp	r8, r9
 800a4b6:	dc09      	bgt.n	800a4cc <_printf_float+0x250>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	079b      	lsls	r3, r3, #30
 800a4bc:	f100 8103 	bmi.w	800a6c6 <_printf_float+0x44a>
 800a4c0:	68e0      	ldr	r0, [r4, #12]
 800a4c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4c4:	4298      	cmp	r0, r3
 800a4c6:	bfb8      	it	lt
 800a4c8:	4618      	movlt	r0, r3
 800a4ca:	e734      	b.n	800a336 <_printf_float+0xba>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	4652      	mov	r2, sl
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af2b 	beq.w	800a332 <_printf_float+0xb6>
 800a4dc:	f109 0901 	add.w	r9, r9, #1
 800a4e0:	e7e8      	b.n	800a4b4 <_printf_float+0x238>
 800a4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dc39      	bgt.n	800a55c <_printf_float+0x2e0>
 800a4e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a558 <_printf_float+0x2dc>)
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f af1d 	beq.w	800a332 <_printf_float+0xb6>
 800a4f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4fc:	ea59 0303 	orrs.w	r3, r9, r3
 800a500:	d102      	bne.n	800a508 <_printf_float+0x28c>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	07d9      	lsls	r1, r3, #31
 800a506:	d5d7      	bpl.n	800a4b8 <_printf_float+0x23c>
 800a508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	47b8      	blx	r7
 800a512:	3001      	adds	r0, #1
 800a514:	f43f af0d 	beq.w	800a332 <_printf_float+0xb6>
 800a518:	f04f 0a00 	mov.w	sl, #0
 800a51c:	f104 0b1a 	add.w	fp, r4, #26
 800a520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a522:	425b      	negs	r3, r3
 800a524:	4553      	cmp	r3, sl
 800a526:	dc01      	bgt.n	800a52c <_printf_float+0x2b0>
 800a528:	464b      	mov	r3, r9
 800a52a:	e793      	b.n	800a454 <_printf_float+0x1d8>
 800a52c:	2301      	movs	r3, #1
 800a52e:	465a      	mov	r2, fp
 800a530:	4631      	mov	r1, r6
 800a532:	4628      	mov	r0, r5
 800a534:	47b8      	blx	r7
 800a536:	3001      	adds	r0, #1
 800a538:	f43f aefb 	beq.w	800a332 <_printf_float+0xb6>
 800a53c:	f10a 0a01 	add.w	sl, sl, #1
 800a540:	e7ee      	b.n	800a520 <_printf_float+0x2a4>
 800a542:	bf00      	nop
 800a544:	7fefffff 	.word	0x7fefffff
 800a548:	0800d1f9 	.word	0x0800d1f9
 800a54c:	0800d1fd 	.word	0x0800d1fd
 800a550:	0800d201 	.word	0x0800d201
 800a554:	0800d205 	.word	0x0800d205
 800a558:	0800d209 	.word	0x0800d209
 800a55c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a55e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a562:	4553      	cmp	r3, sl
 800a564:	bfa8      	it	ge
 800a566:	4653      	movge	r3, sl
 800a568:	2b00      	cmp	r3, #0
 800a56a:	4699      	mov	r9, r3
 800a56c:	dc36      	bgt.n	800a5dc <_printf_float+0x360>
 800a56e:	f04f 0b00 	mov.w	fp, #0
 800a572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a576:	f104 021a 	add.w	r2, r4, #26
 800a57a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a57c:	9306      	str	r3, [sp, #24]
 800a57e:	eba3 0309 	sub.w	r3, r3, r9
 800a582:	455b      	cmp	r3, fp
 800a584:	dc31      	bgt.n	800a5ea <_printf_float+0x36e>
 800a586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a588:	459a      	cmp	sl, r3
 800a58a:	dc3a      	bgt.n	800a602 <_printf_float+0x386>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	07da      	lsls	r2, r3, #31
 800a590:	d437      	bmi.n	800a602 <_printf_float+0x386>
 800a592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a594:	ebaa 0903 	sub.w	r9, sl, r3
 800a598:	9b06      	ldr	r3, [sp, #24]
 800a59a:	ebaa 0303 	sub.w	r3, sl, r3
 800a59e:	4599      	cmp	r9, r3
 800a5a0:	bfa8      	it	ge
 800a5a2:	4699      	movge	r9, r3
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	dc33      	bgt.n	800a612 <_printf_float+0x396>
 800a5aa:	f04f 0800 	mov.w	r8, #0
 800a5ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5b2:	f104 0b1a 	add.w	fp, r4, #26
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5bc:	eba3 0309 	sub.w	r3, r3, r9
 800a5c0:	4543      	cmp	r3, r8
 800a5c2:	f77f af79 	ble.w	800a4b8 <_printf_float+0x23c>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	465a      	mov	r2, fp
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b8      	blx	r7
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f43f aeae 	beq.w	800a332 <_printf_float+0xb6>
 800a5d6:	f108 0801 	add.w	r8, r8, #1
 800a5da:	e7ec      	b.n	800a5b6 <_printf_float+0x33a>
 800a5dc:	4642      	mov	r2, r8
 800a5de:	4631      	mov	r1, r6
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b8      	blx	r7
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d1c2      	bne.n	800a56e <_printf_float+0x2f2>
 800a5e8:	e6a3      	b.n	800a332 <_printf_float+0xb6>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	9206      	str	r2, [sp, #24]
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	f43f ae9c 	beq.w	800a332 <_printf_float+0xb6>
 800a5fa:	9a06      	ldr	r2, [sp, #24]
 800a5fc:	f10b 0b01 	add.w	fp, fp, #1
 800a600:	e7bb      	b.n	800a57a <_printf_float+0x2fe>
 800a602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a606:	4631      	mov	r1, r6
 800a608:	4628      	mov	r0, r5
 800a60a:	47b8      	blx	r7
 800a60c:	3001      	adds	r0, #1
 800a60e:	d1c0      	bne.n	800a592 <_printf_float+0x316>
 800a610:	e68f      	b.n	800a332 <_printf_float+0xb6>
 800a612:	9a06      	ldr	r2, [sp, #24]
 800a614:	464b      	mov	r3, r9
 800a616:	4442      	add	r2, r8
 800a618:	4631      	mov	r1, r6
 800a61a:	4628      	mov	r0, r5
 800a61c:	47b8      	blx	r7
 800a61e:	3001      	adds	r0, #1
 800a620:	d1c3      	bne.n	800a5aa <_printf_float+0x32e>
 800a622:	e686      	b.n	800a332 <_printf_float+0xb6>
 800a624:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a628:	f1ba 0f01 	cmp.w	sl, #1
 800a62c:	dc01      	bgt.n	800a632 <_printf_float+0x3b6>
 800a62e:	07db      	lsls	r3, r3, #31
 800a630:	d536      	bpl.n	800a6a0 <_printf_float+0x424>
 800a632:	2301      	movs	r3, #1
 800a634:	4642      	mov	r2, r8
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	f43f ae78 	beq.w	800a332 <_printf_float+0xb6>
 800a642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a646:	4631      	mov	r1, r6
 800a648:	4628      	mov	r0, r5
 800a64a:	47b8      	blx	r7
 800a64c:	3001      	adds	r0, #1
 800a64e:	f43f ae70 	beq.w	800a332 <_printf_float+0xb6>
 800a652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a656:	2200      	movs	r2, #0
 800a658:	2300      	movs	r3, #0
 800a65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a65e:	f7f6 fa6b 	bl	8000b38 <__aeabi_dcmpeq>
 800a662:	b9c0      	cbnz	r0, 800a696 <_printf_float+0x41a>
 800a664:	4653      	mov	r3, sl
 800a666:	f108 0201 	add.w	r2, r8, #1
 800a66a:	4631      	mov	r1, r6
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b8      	blx	r7
 800a670:	3001      	adds	r0, #1
 800a672:	d10c      	bne.n	800a68e <_printf_float+0x412>
 800a674:	e65d      	b.n	800a332 <_printf_float+0xb6>
 800a676:	2301      	movs	r3, #1
 800a678:	465a      	mov	r2, fp
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f ae56 	beq.w	800a332 <_printf_float+0xb6>
 800a686:	f108 0801 	add.w	r8, r8, #1
 800a68a:	45d0      	cmp	r8, sl
 800a68c:	dbf3      	blt.n	800a676 <_printf_float+0x3fa>
 800a68e:	464b      	mov	r3, r9
 800a690:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a694:	e6df      	b.n	800a456 <_printf_float+0x1da>
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	f104 0b1a 	add.w	fp, r4, #26
 800a69e:	e7f4      	b.n	800a68a <_printf_float+0x40e>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4642      	mov	r2, r8
 800a6a4:	e7e1      	b.n	800a66a <_printf_float+0x3ee>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	464a      	mov	r2, r9
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	f43f ae3e 	beq.w	800a332 <_printf_float+0xb6>
 800a6b6:	f108 0801 	add.w	r8, r8, #1
 800a6ba:	68e3      	ldr	r3, [r4, #12]
 800a6bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6be:	1a5b      	subs	r3, r3, r1
 800a6c0:	4543      	cmp	r3, r8
 800a6c2:	dcf0      	bgt.n	800a6a6 <_printf_float+0x42a>
 800a6c4:	e6fc      	b.n	800a4c0 <_printf_float+0x244>
 800a6c6:	f04f 0800 	mov.w	r8, #0
 800a6ca:	f104 0919 	add.w	r9, r4, #25
 800a6ce:	e7f4      	b.n	800a6ba <_printf_float+0x43e>

0800a6d0 <_printf_common>:
 800a6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	4616      	mov	r6, r2
 800a6d6:	4698      	mov	r8, r3
 800a6d8:	688a      	ldr	r2, [r1, #8]
 800a6da:	690b      	ldr	r3, [r1, #16]
 800a6dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	bfb8      	it	lt
 800a6e4:	4613      	movlt	r3, r2
 800a6e6:	6033      	str	r3, [r6, #0]
 800a6e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	b10a      	cbz	r2, 800a6f6 <_printf_common+0x26>
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	6033      	str	r3, [r6, #0]
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	0699      	lsls	r1, r3, #26
 800a6fa:	bf42      	ittt	mi
 800a6fc:	6833      	ldrmi	r3, [r6, #0]
 800a6fe:	3302      	addmi	r3, #2
 800a700:	6033      	strmi	r3, [r6, #0]
 800a702:	6825      	ldr	r5, [r4, #0]
 800a704:	f015 0506 	ands.w	r5, r5, #6
 800a708:	d106      	bne.n	800a718 <_printf_common+0x48>
 800a70a:	f104 0a19 	add.w	sl, r4, #25
 800a70e:	68e3      	ldr	r3, [r4, #12]
 800a710:	6832      	ldr	r2, [r6, #0]
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	42ab      	cmp	r3, r5
 800a716:	dc26      	bgt.n	800a766 <_printf_common+0x96>
 800a718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a71c:	6822      	ldr	r2, [r4, #0]
 800a71e:	3b00      	subs	r3, #0
 800a720:	bf18      	it	ne
 800a722:	2301      	movne	r3, #1
 800a724:	0692      	lsls	r2, r2, #26
 800a726:	d42b      	bmi.n	800a780 <_printf_common+0xb0>
 800a728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a72c:	4641      	mov	r1, r8
 800a72e:	4638      	mov	r0, r7
 800a730:	47c8      	blx	r9
 800a732:	3001      	adds	r0, #1
 800a734:	d01e      	beq.n	800a774 <_printf_common+0xa4>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	6922      	ldr	r2, [r4, #16]
 800a73a:	f003 0306 	and.w	r3, r3, #6
 800a73e:	2b04      	cmp	r3, #4
 800a740:	bf02      	ittt	eq
 800a742:	68e5      	ldreq	r5, [r4, #12]
 800a744:	6833      	ldreq	r3, [r6, #0]
 800a746:	1aed      	subeq	r5, r5, r3
 800a748:	68a3      	ldr	r3, [r4, #8]
 800a74a:	bf0c      	ite	eq
 800a74c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a750:	2500      	movne	r5, #0
 800a752:	4293      	cmp	r3, r2
 800a754:	bfc4      	itt	gt
 800a756:	1a9b      	subgt	r3, r3, r2
 800a758:	18ed      	addgt	r5, r5, r3
 800a75a:	2600      	movs	r6, #0
 800a75c:	341a      	adds	r4, #26
 800a75e:	42b5      	cmp	r5, r6
 800a760:	d11a      	bne.n	800a798 <_printf_common+0xc8>
 800a762:	2000      	movs	r0, #0
 800a764:	e008      	b.n	800a778 <_printf_common+0xa8>
 800a766:	2301      	movs	r3, #1
 800a768:	4652      	mov	r2, sl
 800a76a:	4641      	mov	r1, r8
 800a76c:	4638      	mov	r0, r7
 800a76e:	47c8      	blx	r9
 800a770:	3001      	adds	r0, #1
 800a772:	d103      	bne.n	800a77c <_printf_common+0xac>
 800a774:	f04f 30ff 	mov.w	r0, #4294967295
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77c:	3501      	adds	r5, #1
 800a77e:	e7c6      	b.n	800a70e <_printf_common+0x3e>
 800a780:	18e1      	adds	r1, r4, r3
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	2030      	movs	r0, #48	@ 0x30
 800a786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a78a:	4422      	add	r2, r4
 800a78c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a790:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a794:	3302      	adds	r3, #2
 800a796:	e7c7      	b.n	800a728 <_printf_common+0x58>
 800a798:	2301      	movs	r3, #1
 800a79a:	4622      	mov	r2, r4
 800a79c:	4641      	mov	r1, r8
 800a79e:	4638      	mov	r0, r7
 800a7a0:	47c8      	blx	r9
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d0e6      	beq.n	800a774 <_printf_common+0xa4>
 800a7a6:	3601      	adds	r6, #1
 800a7a8:	e7d9      	b.n	800a75e <_printf_common+0x8e>
	...

0800a7ac <_printf_i>:
 800a7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b0:	7e0f      	ldrb	r7, [r1, #24]
 800a7b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7b4:	2f78      	cmp	r7, #120	@ 0x78
 800a7b6:	4691      	mov	r9, r2
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	469a      	mov	sl, r3
 800a7be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7c2:	d807      	bhi.n	800a7d4 <_printf_i+0x28>
 800a7c4:	2f62      	cmp	r7, #98	@ 0x62
 800a7c6:	d80a      	bhi.n	800a7de <_printf_i+0x32>
 800a7c8:	2f00      	cmp	r7, #0
 800a7ca:	f000 80d2 	beq.w	800a972 <_printf_i+0x1c6>
 800a7ce:	2f58      	cmp	r7, #88	@ 0x58
 800a7d0:	f000 80b9 	beq.w	800a946 <_printf_i+0x19a>
 800a7d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7dc:	e03a      	b.n	800a854 <_printf_i+0xa8>
 800a7de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7e2:	2b15      	cmp	r3, #21
 800a7e4:	d8f6      	bhi.n	800a7d4 <_printf_i+0x28>
 800a7e6:	a101      	add	r1, pc, #4	@ (adr r1, 800a7ec <_printf_i+0x40>)
 800a7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7ec:	0800a845 	.word	0x0800a845
 800a7f0:	0800a859 	.word	0x0800a859
 800a7f4:	0800a7d5 	.word	0x0800a7d5
 800a7f8:	0800a7d5 	.word	0x0800a7d5
 800a7fc:	0800a7d5 	.word	0x0800a7d5
 800a800:	0800a7d5 	.word	0x0800a7d5
 800a804:	0800a859 	.word	0x0800a859
 800a808:	0800a7d5 	.word	0x0800a7d5
 800a80c:	0800a7d5 	.word	0x0800a7d5
 800a810:	0800a7d5 	.word	0x0800a7d5
 800a814:	0800a7d5 	.word	0x0800a7d5
 800a818:	0800a959 	.word	0x0800a959
 800a81c:	0800a883 	.word	0x0800a883
 800a820:	0800a913 	.word	0x0800a913
 800a824:	0800a7d5 	.word	0x0800a7d5
 800a828:	0800a7d5 	.word	0x0800a7d5
 800a82c:	0800a97b 	.word	0x0800a97b
 800a830:	0800a7d5 	.word	0x0800a7d5
 800a834:	0800a883 	.word	0x0800a883
 800a838:	0800a7d5 	.word	0x0800a7d5
 800a83c:	0800a7d5 	.word	0x0800a7d5
 800a840:	0800a91b 	.word	0x0800a91b
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	1d1a      	adds	r2, r3, #4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6032      	str	r2, [r6, #0]
 800a84c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a854:	2301      	movs	r3, #1
 800a856:	e09d      	b.n	800a994 <_printf_i+0x1e8>
 800a858:	6833      	ldr	r3, [r6, #0]
 800a85a:	6820      	ldr	r0, [r4, #0]
 800a85c:	1d19      	adds	r1, r3, #4
 800a85e:	6031      	str	r1, [r6, #0]
 800a860:	0606      	lsls	r6, r0, #24
 800a862:	d501      	bpl.n	800a868 <_printf_i+0xbc>
 800a864:	681d      	ldr	r5, [r3, #0]
 800a866:	e003      	b.n	800a870 <_printf_i+0xc4>
 800a868:	0645      	lsls	r5, r0, #25
 800a86a:	d5fb      	bpl.n	800a864 <_printf_i+0xb8>
 800a86c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a870:	2d00      	cmp	r5, #0
 800a872:	da03      	bge.n	800a87c <_printf_i+0xd0>
 800a874:	232d      	movs	r3, #45	@ 0x2d
 800a876:	426d      	negs	r5, r5
 800a878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a87c:	4859      	ldr	r0, [pc, #356]	@ (800a9e4 <_printf_i+0x238>)
 800a87e:	230a      	movs	r3, #10
 800a880:	e011      	b.n	800a8a6 <_printf_i+0xfa>
 800a882:	6821      	ldr	r1, [r4, #0]
 800a884:	6833      	ldr	r3, [r6, #0]
 800a886:	0608      	lsls	r0, r1, #24
 800a888:	f853 5b04 	ldr.w	r5, [r3], #4
 800a88c:	d402      	bmi.n	800a894 <_printf_i+0xe8>
 800a88e:	0649      	lsls	r1, r1, #25
 800a890:	bf48      	it	mi
 800a892:	b2ad      	uxthmi	r5, r5
 800a894:	2f6f      	cmp	r7, #111	@ 0x6f
 800a896:	4853      	ldr	r0, [pc, #332]	@ (800a9e4 <_printf_i+0x238>)
 800a898:	6033      	str	r3, [r6, #0]
 800a89a:	bf14      	ite	ne
 800a89c:	230a      	movne	r3, #10
 800a89e:	2308      	moveq	r3, #8
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8a6:	6866      	ldr	r6, [r4, #4]
 800a8a8:	60a6      	str	r6, [r4, #8]
 800a8aa:	2e00      	cmp	r6, #0
 800a8ac:	bfa2      	ittt	ge
 800a8ae:	6821      	ldrge	r1, [r4, #0]
 800a8b0:	f021 0104 	bicge.w	r1, r1, #4
 800a8b4:	6021      	strge	r1, [r4, #0]
 800a8b6:	b90d      	cbnz	r5, 800a8bc <_printf_i+0x110>
 800a8b8:	2e00      	cmp	r6, #0
 800a8ba:	d04b      	beq.n	800a954 <_printf_i+0x1a8>
 800a8bc:	4616      	mov	r6, r2
 800a8be:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8c2:	fb03 5711 	mls	r7, r3, r1, r5
 800a8c6:	5dc7      	ldrb	r7, [r0, r7]
 800a8c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8cc:	462f      	mov	r7, r5
 800a8ce:	42bb      	cmp	r3, r7
 800a8d0:	460d      	mov	r5, r1
 800a8d2:	d9f4      	bls.n	800a8be <_printf_i+0x112>
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d10b      	bne.n	800a8f0 <_printf_i+0x144>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	07df      	lsls	r7, r3, #31
 800a8dc:	d508      	bpl.n	800a8f0 <_printf_i+0x144>
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	6861      	ldr	r1, [r4, #4]
 800a8e2:	4299      	cmp	r1, r3
 800a8e4:	bfde      	ittt	le
 800a8e6:	2330      	movle	r3, #48	@ 0x30
 800a8e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8f0:	1b92      	subs	r2, r2, r6
 800a8f2:	6122      	str	r2, [r4, #16]
 800a8f4:	f8cd a000 	str.w	sl, [sp]
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	aa03      	add	r2, sp, #12
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4640      	mov	r0, r8
 800a900:	f7ff fee6 	bl	800a6d0 <_printf_common>
 800a904:	3001      	adds	r0, #1
 800a906:	d14a      	bne.n	800a99e <_printf_i+0x1f2>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	b004      	add	sp, #16
 800a90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	f043 0320 	orr.w	r3, r3, #32
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	4833      	ldr	r0, [pc, #204]	@ (800a9e8 <_printf_i+0x23c>)
 800a91c:	2778      	movs	r7, #120	@ 0x78
 800a91e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	6831      	ldr	r1, [r6, #0]
 800a926:	061f      	lsls	r7, r3, #24
 800a928:	f851 5b04 	ldr.w	r5, [r1], #4
 800a92c:	d402      	bmi.n	800a934 <_printf_i+0x188>
 800a92e:	065f      	lsls	r7, r3, #25
 800a930:	bf48      	it	mi
 800a932:	b2ad      	uxthmi	r5, r5
 800a934:	6031      	str	r1, [r6, #0]
 800a936:	07d9      	lsls	r1, r3, #31
 800a938:	bf44      	itt	mi
 800a93a:	f043 0320 	orrmi.w	r3, r3, #32
 800a93e:	6023      	strmi	r3, [r4, #0]
 800a940:	b11d      	cbz	r5, 800a94a <_printf_i+0x19e>
 800a942:	2310      	movs	r3, #16
 800a944:	e7ac      	b.n	800a8a0 <_printf_i+0xf4>
 800a946:	4827      	ldr	r0, [pc, #156]	@ (800a9e4 <_printf_i+0x238>)
 800a948:	e7e9      	b.n	800a91e <_printf_i+0x172>
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	f023 0320 	bic.w	r3, r3, #32
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	e7f6      	b.n	800a942 <_printf_i+0x196>
 800a954:	4616      	mov	r6, r2
 800a956:	e7bd      	b.n	800a8d4 <_printf_i+0x128>
 800a958:	6833      	ldr	r3, [r6, #0]
 800a95a:	6825      	ldr	r5, [r4, #0]
 800a95c:	6961      	ldr	r1, [r4, #20]
 800a95e:	1d18      	adds	r0, r3, #4
 800a960:	6030      	str	r0, [r6, #0]
 800a962:	062e      	lsls	r6, r5, #24
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	d501      	bpl.n	800a96c <_printf_i+0x1c0>
 800a968:	6019      	str	r1, [r3, #0]
 800a96a:	e002      	b.n	800a972 <_printf_i+0x1c6>
 800a96c:	0668      	lsls	r0, r5, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0x1bc>
 800a970:	8019      	strh	r1, [r3, #0]
 800a972:	2300      	movs	r3, #0
 800a974:	6123      	str	r3, [r4, #16]
 800a976:	4616      	mov	r6, r2
 800a978:	e7bc      	b.n	800a8f4 <_printf_i+0x148>
 800a97a:	6833      	ldr	r3, [r6, #0]
 800a97c:	1d1a      	adds	r2, r3, #4
 800a97e:	6032      	str	r2, [r6, #0]
 800a980:	681e      	ldr	r6, [r3, #0]
 800a982:	6862      	ldr	r2, [r4, #4]
 800a984:	2100      	movs	r1, #0
 800a986:	4630      	mov	r0, r6
 800a988:	f7f5 fc5a 	bl	8000240 <memchr>
 800a98c:	b108      	cbz	r0, 800a992 <_printf_i+0x1e6>
 800a98e:	1b80      	subs	r0, r0, r6
 800a990:	6060      	str	r0, [r4, #4]
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	2300      	movs	r3, #0
 800a998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a99c:	e7aa      	b.n	800a8f4 <_printf_i+0x148>
 800a99e:	6923      	ldr	r3, [r4, #16]
 800a9a0:	4632      	mov	r2, r6
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	47d0      	blx	sl
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d0ad      	beq.n	800a908 <_printf_i+0x15c>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	079b      	lsls	r3, r3, #30
 800a9b0:	d413      	bmi.n	800a9da <_printf_i+0x22e>
 800a9b2:	68e0      	ldr	r0, [r4, #12]
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	4298      	cmp	r0, r3
 800a9b8:	bfb8      	it	lt
 800a9ba:	4618      	movlt	r0, r3
 800a9bc:	e7a6      	b.n	800a90c <_printf_i+0x160>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	4649      	mov	r1, r9
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	47d0      	blx	sl
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d09d      	beq.n	800a908 <_printf_i+0x15c>
 800a9cc:	3501      	adds	r5, #1
 800a9ce:	68e3      	ldr	r3, [r4, #12]
 800a9d0:	9903      	ldr	r1, [sp, #12]
 800a9d2:	1a5b      	subs	r3, r3, r1
 800a9d4:	42ab      	cmp	r3, r5
 800a9d6:	dcf2      	bgt.n	800a9be <_printf_i+0x212>
 800a9d8:	e7eb      	b.n	800a9b2 <_printf_i+0x206>
 800a9da:	2500      	movs	r5, #0
 800a9dc:	f104 0619 	add.w	r6, r4, #25
 800a9e0:	e7f5      	b.n	800a9ce <_printf_i+0x222>
 800a9e2:	bf00      	nop
 800a9e4:	0800d20b 	.word	0x0800d20b
 800a9e8:	0800d21c 	.word	0x0800d21c

0800a9ec <std>:
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	e9c0 3300 	strd	r3, r3, [r0]
 800a9f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9fa:	6083      	str	r3, [r0, #8]
 800a9fc:	8181      	strh	r1, [r0, #12]
 800a9fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa00:	81c2      	strh	r2, [r0, #14]
 800aa02:	6183      	str	r3, [r0, #24]
 800aa04:	4619      	mov	r1, r3
 800aa06:	2208      	movs	r2, #8
 800aa08:	305c      	adds	r0, #92	@ 0x5c
 800aa0a:	f000 fa3b 	bl	800ae84 <memset>
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa44 <std+0x58>)
 800aa10:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa12:	4b0d      	ldr	r3, [pc, #52]	@ (800aa48 <std+0x5c>)
 800aa14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aa16:	4b0d      	ldr	r3, [pc, #52]	@ (800aa4c <std+0x60>)
 800aa18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aa1a:	4b0d      	ldr	r3, [pc, #52]	@ (800aa50 <std+0x64>)
 800aa1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <std+0x68>)
 800aa20:	6224      	str	r4, [r4, #32]
 800aa22:	429c      	cmp	r4, r3
 800aa24:	d006      	beq.n	800aa34 <std+0x48>
 800aa26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aa2a:	4294      	cmp	r4, r2
 800aa2c:	d002      	beq.n	800aa34 <std+0x48>
 800aa2e:	33d0      	adds	r3, #208	@ 0xd0
 800aa30:	429c      	cmp	r4, r3
 800aa32:	d105      	bne.n	800aa40 <std+0x54>
 800aa34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aa38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa3c:	f000 bafa 	b.w	800b034 <__retarget_lock_init_recursive>
 800aa40:	bd10      	pop	{r4, pc}
 800aa42:	bf00      	nop
 800aa44:	0800acd5 	.word	0x0800acd5
 800aa48:	0800acf7 	.word	0x0800acf7
 800aa4c:	0800ad2f 	.word	0x0800ad2f
 800aa50:	0800ad53 	.word	0x0800ad53
 800aa54:	20000714 	.word	0x20000714

0800aa58 <stdio_exit_handler>:
 800aa58:	4a02      	ldr	r2, [pc, #8]	@ (800aa64 <stdio_exit_handler+0xc>)
 800aa5a:	4903      	ldr	r1, [pc, #12]	@ (800aa68 <stdio_exit_handler+0x10>)
 800aa5c:	4803      	ldr	r0, [pc, #12]	@ (800aa6c <stdio_exit_handler+0x14>)
 800aa5e:	f000 b869 	b.w	800ab34 <_fwalk_sglue>
 800aa62:	bf00      	nop
 800aa64:	200000cc 	.word	0x200000cc
 800aa68:	0800c9cd 	.word	0x0800c9cd
 800aa6c:	200000dc 	.word	0x200000dc

0800aa70 <cleanup_stdio>:
 800aa70:	6841      	ldr	r1, [r0, #4]
 800aa72:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa4 <cleanup_stdio+0x34>)
 800aa74:	4299      	cmp	r1, r3
 800aa76:	b510      	push	{r4, lr}
 800aa78:	4604      	mov	r4, r0
 800aa7a:	d001      	beq.n	800aa80 <cleanup_stdio+0x10>
 800aa7c:	f001 ffa6 	bl	800c9cc <_fflush_r>
 800aa80:	68a1      	ldr	r1, [r4, #8]
 800aa82:	4b09      	ldr	r3, [pc, #36]	@ (800aaa8 <cleanup_stdio+0x38>)
 800aa84:	4299      	cmp	r1, r3
 800aa86:	d002      	beq.n	800aa8e <cleanup_stdio+0x1e>
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f001 ff9f 	bl	800c9cc <_fflush_r>
 800aa8e:	68e1      	ldr	r1, [r4, #12]
 800aa90:	4b06      	ldr	r3, [pc, #24]	@ (800aaac <cleanup_stdio+0x3c>)
 800aa92:	4299      	cmp	r1, r3
 800aa94:	d004      	beq.n	800aaa0 <cleanup_stdio+0x30>
 800aa96:	4620      	mov	r0, r4
 800aa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa9c:	f001 bf96 	b.w	800c9cc <_fflush_r>
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20000714 	.word	0x20000714
 800aaa8:	2000077c 	.word	0x2000077c
 800aaac:	200007e4 	.word	0x200007e4

0800aab0 <global_stdio_init.part.0>:
 800aab0:	b510      	push	{r4, lr}
 800aab2:	4b0b      	ldr	r3, [pc, #44]	@ (800aae0 <global_stdio_init.part.0+0x30>)
 800aab4:	4c0b      	ldr	r4, [pc, #44]	@ (800aae4 <global_stdio_init.part.0+0x34>)
 800aab6:	4a0c      	ldr	r2, [pc, #48]	@ (800aae8 <global_stdio_init.part.0+0x38>)
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	4620      	mov	r0, r4
 800aabc:	2200      	movs	r2, #0
 800aabe:	2104      	movs	r1, #4
 800aac0:	f7ff ff94 	bl	800a9ec <std>
 800aac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aac8:	2201      	movs	r2, #1
 800aaca:	2109      	movs	r1, #9
 800aacc:	f7ff ff8e 	bl	800a9ec <std>
 800aad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aad4:	2202      	movs	r2, #2
 800aad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aada:	2112      	movs	r1, #18
 800aadc:	f7ff bf86 	b.w	800a9ec <std>
 800aae0:	2000084c 	.word	0x2000084c
 800aae4:	20000714 	.word	0x20000714
 800aae8:	0800aa59 	.word	0x0800aa59

0800aaec <__sfp_lock_acquire>:
 800aaec:	4801      	ldr	r0, [pc, #4]	@ (800aaf4 <__sfp_lock_acquire+0x8>)
 800aaee:	f000 baa2 	b.w	800b036 <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	20000855 	.word	0x20000855

0800aaf8 <__sfp_lock_release>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	@ (800ab00 <__sfp_lock_release+0x8>)
 800aafa:	f000 ba9d 	b.w	800b038 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	20000855 	.word	0x20000855

0800ab04 <__sinit>:
 800ab04:	b510      	push	{r4, lr}
 800ab06:	4604      	mov	r4, r0
 800ab08:	f7ff fff0 	bl	800aaec <__sfp_lock_acquire>
 800ab0c:	6a23      	ldr	r3, [r4, #32]
 800ab0e:	b11b      	cbz	r3, 800ab18 <__sinit+0x14>
 800ab10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab14:	f7ff bff0 	b.w	800aaf8 <__sfp_lock_release>
 800ab18:	4b04      	ldr	r3, [pc, #16]	@ (800ab2c <__sinit+0x28>)
 800ab1a:	6223      	str	r3, [r4, #32]
 800ab1c:	4b04      	ldr	r3, [pc, #16]	@ (800ab30 <__sinit+0x2c>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f5      	bne.n	800ab10 <__sinit+0xc>
 800ab24:	f7ff ffc4 	bl	800aab0 <global_stdio_init.part.0>
 800ab28:	e7f2      	b.n	800ab10 <__sinit+0xc>
 800ab2a:	bf00      	nop
 800ab2c:	0800aa71 	.word	0x0800aa71
 800ab30:	2000084c 	.word	0x2000084c

0800ab34 <_fwalk_sglue>:
 800ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	4607      	mov	r7, r0
 800ab3a:	4688      	mov	r8, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	2600      	movs	r6, #0
 800ab40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab44:	f1b9 0901 	subs.w	r9, r9, #1
 800ab48:	d505      	bpl.n	800ab56 <_fwalk_sglue+0x22>
 800ab4a:	6824      	ldr	r4, [r4, #0]
 800ab4c:	2c00      	cmp	r4, #0
 800ab4e:	d1f7      	bne.n	800ab40 <_fwalk_sglue+0xc>
 800ab50:	4630      	mov	r0, r6
 800ab52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab56:	89ab      	ldrh	r3, [r5, #12]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d907      	bls.n	800ab6c <_fwalk_sglue+0x38>
 800ab5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab60:	3301      	adds	r3, #1
 800ab62:	d003      	beq.n	800ab6c <_fwalk_sglue+0x38>
 800ab64:	4629      	mov	r1, r5
 800ab66:	4638      	mov	r0, r7
 800ab68:	47c0      	blx	r8
 800ab6a:	4306      	orrs	r6, r0
 800ab6c:	3568      	adds	r5, #104	@ 0x68
 800ab6e:	e7e9      	b.n	800ab44 <_fwalk_sglue+0x10>

0800ab70 <_puts_r>:
 800ab70:	6a03      	ldr	r3, [r0, #32]
 800ab72:	b570      	push	{r4, r5, r6, lr}
 800ab74:	6884      	ldr	r4, [r0, #8]
 800ab76:	4605      	mov	r5, r0
 800ab78:	460e      	mov	r6, r1
 800ab7a:	b90b      	cbnz	r3, 800ab80 <_puts_r+0x10>
 800ab7c:	f7ff ffc2 	bl	800ab04 <__sinit>
 800ab80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab82:	07db      	lsls	r3, r3, #31
 800ab84:	d405      	bmi.n	800ab92 <_puts_r+0x22>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	0598      	lsls	r0, r3, #22
 800ab8a:	d402      	bmi.n	800ab92 <_puts_r+0x22>
 800ab8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab8e:	f000 fa52 	bl	800b036 <__retarget_lock_acquire_recursive>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	0719      	lsls	r1, r3, #28
 800ab96:	d502      	bpl.n	800ab9e <_puts_r+0x2e>
 800ab98:	6923      	ldr	r3, [r4, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d135      	bne.n	800ac0a <_puts_r+0x9a>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 f919 	bl	800add8 <__swsetup_r>
 800aba6:	b380      	cbz	r0, 800ac0a <_puts_r+0x9a>
 800aba8:	f04f 35ff 	mov.w	r5, #4294967295
 800abac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abae:	07da      	lsls	r2, r3, #31
 800abb0:	d405      	bmi.n	800abbe <_puts_r+0x4e>
 800abb2:	89a3      	ldrh	r3, [r4, #12]
 800abb4:	059b      	lsls	r3, r3, #22
 800abb6:	d402      	bmi.n	800abbe <_puts_r+0x4e>
 800abb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abba:	f000 fa3d 	bl	800b038 <__retarget_lock_release_recursive>
 800abbe:	4628      	mov	r0, r5
 800abc0:	bd70      	pop	{r4, r5, r6, pc}
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	da04      	bge.n	800abd0 <_puts_r+0x60>
 800abc6:	69a2      	ldr	r2, [r4, #24]
 800abc8:	429a      	cmp	r2, r3
 800abca:	dc17      	bgt.n	800abfc <_puts_r+0x8c>
 800abcc:	290a      	cmp	r1, #10
 800abce:	d015      	beq.n	800abfc <_puts_r+0x8c>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	1c5a      	adds	r2, r3, #1
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	7019      	strb	r1, [r3, #0]
 800abd8:	68a3      	ldr	r3, [r4, #8]
 800abda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abde:	3b01      	subs	r3, #1
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	2900      	cmp	r1, #0
 800abe4:	d1ed      	bne.n	800abc2 <_puts_r+0x52>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	da11      	bge.n	800ac0e <_puts_r+0x9e>
 800abea:	4622      	mov	r2, r4
 800abec:	210a      	movs	r1, #10
 800abee:	4628      	mov	r0, r5
 800abf0:	f000 f8b3 	bl	800ad5a <__swbuf_r>
 800abf4:	3001      	adds	r0, #1
 800abf6:	d0d7      	beq.n	800aba8 <_puts_r+0x38>
 800abf8:	250a      	movs	r5, #10
 800abfa:	e7d7      	b.n	800abac <_puts_r+0x3c>
 800abfc:	4622      	mov	r2, r4
 800abfe:	4628      	mov	r0, r5
 800ac00:	f000 f8ab 	bl	800ad5a <__swbuf_r>
 800ac04:	3001      	adds	r0, #1
 800ac06:	d1e7      	bne.n	800abd8 <_puts_r+0x68>
 800ac08:	e7ce      	b.n	800aba8 <_puts_r+0x38>
 800ac0a:	3e01      	subs	r6, #1
 800ac0c:	e7e4      	b.n	800abd8 <_puts_r+0x68>
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	220a      	movs	r2, #10
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	e7ee      	b.n	800abf8 <_puts_r+0x88>
	...

0800ac1c <puts>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <puts+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f7ff bfa5 	b.w	800ab70 <_puts_r>
 800ac26:	bf00      	nop
 800ac28:	200000d8 	.word	0x200000d8

0800ac2c <sniprintf>:
 800ac2c:	b40c      	push	{r2, r3}
 800ac2e:	b530      	push	{r4, r5, lr}
 800ac30:	4b17      	ldr	r3, [pc, #92]	@ (800ac90 <sniprintf+0x64>)
 800ac32:	1e0c      	subs	r4, r1, #0
 800ac34:	681d      	ldr	r5, [r3, #0]
 800ac36:	b09d      	sub	sp, #116	@ 0x74
 800ac38:	da08      	bge.n	800ac4c <sniprintf+0x20>
 800ac3a:	238b      	movs	r3, #139	@ 0x8b
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac42:	b01d      	add	sp, #116	@ 0x74
 800ac44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac48:	b002      	add	sp, #8
 800ac4a:	4770      	bx	lr
 800ac4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ac50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac54:	bf14      	ite	ne
 800ac56:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac5a:	4623      	moveq	r3, r4
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ac64:	9002      	str	r0, [sp, #8]
 800ac66:	9006      	str	r0, [sp, #24]
 800ac68:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac6c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ac6e:	ab21      	add	r3, sp, #132	@ 0x84
 800ac70:	a902      	add	r1, sp, #8
 800ac72:	4628      	mov	r0, r5
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	f001 fd29 	bl	800c6cc <_svfiprintf_r>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	bfbc      	itt	lt
 800ac7e:	238b      	movlt	r3, #139	@ 0x8b
 800ac80:	602b      	strlt	r3, [r5, #0]
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d0dd      	beq.n	800ac42 <sniprintf+0x16>
 800ac86:	9b02      	ldr	r3, [sp, #8]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	701a      	strb	r2, [r3, #0]
 800ac8c:	e7d9      	b.n	800ac42 <sniprintf+0x16>
 800ac8e:	bf00      	nop
 800ac90:	200000d8 	.word	0x200000d8

0800ac94 <siprintf>:
 800ac94:	b40e      	push	{r1, r2, r3}
 800ac96:	b500      	push	{lr}
 800ac98:	b09c      	sub	sp, #112	@ 0x70
 800ac9a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ac9c:	9002      	str	r0, [sp, #8]
 800ac9e:	9006      	str	r0, [sp, #24]
 800aca0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aca4:	4809      	ldr	r0, [pc, #36]	@ (800accc <siprintf+0x38>)
 800aca6:	9107      	str	r1, [sp, #28]
 800aca8:	9104      	str	r1, [sp, #16]
 800acaa:	4909      	ldr	r1, [pc, #36]	@ (800acd0 <siprintf+0x3c>)
 800acac:	f853 2b04 	ldr.w	r2, [r3], #4
 800acb0:	9105      	str	r1, [sp, #20]
 800acb2:	6800      	ldr	r0, [r0, #0]
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	a902      	add	r1, sp, #8
 800acb8:	f001 fd08 	bl	800c6cc <_svfiprintf_r>
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
 800acc2:	b01c      	add	sp, #112	@ 0x70
 800acc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc8:	b003      	add	sp, #12
 800acca:	4770      	bx	lr
 800accc:	200000d8 	.word	0x200000d8
 800acd0:	ffff0208 	.word	0xffff0208

0800acd4 <__sread>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	460c      	mov	r4, r1
 800acd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acdc:	f000 f95c 	bl	800af98 <_read_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	bfab      	itete	ge
 800ace4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ace6:	89a3      	ldrhlt	r3, [r4, #12]
 800ace8:	181b      	addge	r3, r3, r0
 800acea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acee:	bfac      	ite	ge
 800acf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800acf2:	81a3      	strhlt	r3, [r4, #12]
 800acf4:	bd10      	pop	{r4, pc}

0800acf6 <__swrite>:
 800acf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	461f      	mov	r7, r3
 800acfc:	898b      	ldrh	r3, [r1, #12]
 800acfe:	05db      	lsls	r3, r3, #23
 800ad00:	4605      	mov	r5, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	4616      	mov	r6, r2
 800ad06:	d505      	bpl.n	800ad14 <__swrite+0x1e>
 800ad08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f000 f930 	bl	800af74 <_lseek_r>
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	4632      	mov	r2, r6
 800ad22:	463b      	mov	r3, r7
 800ad24:	4628      	mov	r0, r5
 800ad26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2a:	f000 b947 	b.w	800afbc <_write_r>

0800ad2e <__sseek>:
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	460c      	mov	r4, r1
 800ad32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad36:	f000 f91d 	bl	800af74 <_lseek_r>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	bf15      	itete	ne
 800ad40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad4a:	81a3      	strheq	r3, [r4, #12]
 800ad4c:	bf18      	it	ne
 800ad4e:	81a3      	strhne	r3, [r4, #12]
 800ad50:	bd10      	pop	{r4, pc}

0800ad52 <__sclose>:
 800ad52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad56:	f000 b8fd 	b.w	800af54 <_close_r>

0800ad5a <__swbuf_r>:
 800ad5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5c:	460e      	mov	r6, r1
 800ad5e:	4614      	mov	r4, r2
 800ad60:	4605      	mov	r5, r0
 800ad62:	b118      	cbz	r0, 800ad6c <__swbuf_r+0x12>
 800ad64:	6a03      	ldr	r3, [r0, #32]
 800ad66:	b90b      	cbnz	r3, 800ad6c <__swbuf_r+0x12>
 800ad68:	f7ff fecc 	bl	800ab04 <__sinit>
 800ad6c:	69a3      	ldr	r3, [r4, #24]
 800ad6e:	60a3      	str	r3, [r4, #8]
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	071a      	lsls	r2, r3, #28
 800ad74:	d501      	bpl.n	800ad7a <__swbuf_r+0x20>
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	b943      	cbnz	r3, 800ad8c <__swbuf_r+0x32>
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f000 f82b 	bl	800add8 <__swsetup_r>
 800ad82:	b118      	cbz	r0, 800ad8c <__swbuf_r+0x32>
 800ad84:	f04f 37ff 	mov.w	r7, #4294967295
 800ad88:	4638      	mov	r0, r7
 800ad8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad8c:	6823      	ldr	r3, [r4, #0]
 800ad8e:	6922      	ldr	r2, [r4, #16]
 800ad90:	1a98      	subs	r0, r3, r2
 800ad92:	6963      	ldr	r3, [r4, #20]
 800ad94:	b2f6      	uxtb	r6, r6
 800ad96:	4283      	cmp	r3, r0
 800ad98:	4637      	mov	r7, r6
 800ad9a:	dc05      	bgt.n	800ada8 <__swbuf_r+0x4e>
 800ad9c:	4621      	mov	r1, r4
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f001 fe14 	bl	800c9cc <_fflush_r>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d1ed      	bne.n	800ad84 <__swbuf_r+0x2a>
 800ada8:	68a3      	ldr	r3, [r4, #8]
 800adaa:	3b01      	subs	r3, #1
 800adac:	60a3      	str	r3, [r4, #8]
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	6022      	str	r2, [r4, #0]
 800adb4:	701e      	strb	r6, [r3, #0]
 800adb6:	6962      	ldr	r2, [r4, #20]
 800adb8:	1c43      	adds	r3, r0, #1
 800adba:	429a      	cmp	r2, r3
 800adbc:	d004      	beq.n	800adc8 <__swbuf_r+0x6e>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	07db      	lsls	r3, r3, #31
 800adc2:	d5e1      	bpl.n	800ad88 <__swbuf_r+0x2e>
 800adc4:	2e0a      	cmp	r6, #10
 800adc6:	d1df      	bne.n	800ad88 <__swbuf_r+0x2e>
 800adc8:	4621      	mov	r1, r4
 800adca:	4628      	mov	r0, r5
 800adcc:	f001 fdfe 	bl	800c9cc <_fflush_r>
 800add0:	2800      	cmp	r0, #0
 800add2:	d0d9      	beq.n	800ad88 <__swbuf_r+0x2e>
 800add4:	e7d6      	b.n	800ad84 <__swbuf_r+0x2a>
	...

0800add8 <__swsetup_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4b29      	ldr	r3, [pc, #164]	@ (800ae80 <__swsetup_r+0xa8>)
 800addc:	4605      	mov	r5, r0
 800adde:	6818      	ldr	r0, [r3, #0]
 800ade0:	460c      	mov	r4, r1
 800ade2:	b118      	cbz	r0, 800adec <__swsetup_r+0x14>
 800ade4:	6a03      	ldr	r3, [r0, #32]
 800ade6:	b90b      	cbnz	r3, 800adec <__swsetup_r+0x14>
 800ade8:	f7ff fe8c 	bl	800ab04 <__sinit>
 800adec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf0:	0719      	lsls	r1, r3, #28
 800adf2:	d422      	bmi.n	800ae3a <__swsetup_r+0x62>
 800adf4:	06da      	lsls	r2, r3, #27
 800adf6:	d407      	bmi.n	800ae08 <__swsetup_r+0x30>
 800adf8:	2209      	movs	r2, #9
 800adfa:	602a      	str	r2, [r5, #0]
 800adfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae00:	81a3      	strh	r3, [r4, #12]
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295
 800ae06:	e033      	b.n	800ae70 <__swsetup_r+0x98>
 800ae08:	0758      	lsls	r0, r3, #29
 800ae0a:	d512      	bpl.n	800ae32 <__swsetup_r+0x5a>
 800ae0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae0e:	b141      	cbz	r1, 800ae22 <__swsetup_r+0x4a>
 800ae10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae14:	4299      	cmp	r1, r3
 800ae16:	d002      	beq.n	800ae1e <__swsetup_r+0x46>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 ff79 	bl	800bd10 <_free_r>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	6063      	str	r3, [r4, #4]
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f043 0308 	orr.w	r3, r3, #8
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	b94b      	cbnz	r3, 800ae52 <__swsetup_r+0x7a>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae48:	d003      	beq.n	800ae52 <__swsetup_r+0x7a>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f001 fe1d 	bl	800ca8c <__smakebuf_r>
 800ae52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae56:	f013 0201 	ands.w	r2, r3, #1
 800ae5a:	d00a      	beq.n	800ae72 <__swsetup_r+0x9a>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	60a2      	str	r2, [r4, #8]
 800ae60:	6962      	ldr	r2, [r4, #20]
 800ae62:	4252      	negs	r2, r2
 800ae64:	61a2      	str	r2, [r4, #24]
 800ae66:	6922      	ldr	r2, [r4, #16]
 800ae68:	b942      	cbnz	r2, 800ae7c <__swsetup_r+0xa4>
 800ae6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae6e:	d1c5      	bne.n	800adfc <__swsetup_r+0x24>
 800ae70:	bd38      	pop	{r3, r4, r5, pc}
 800ae72:	0799      	lsls	r1, r3, #30
 800ae74:	bf58      	it	pl
 800ae76:	6962      	ldrpl	r2, [r4, #20]
 800ae78:	60a2      	str	r2, [r4, #8]
 800ae7a:	e7f4      	b.n	800ae66 <__swsetup_r+0x8e>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e7f7      	b.n	800ae70 <__swsetup_r+0x98>
 800ae80:	200000d8 	.word	0x200000d8

0800ae84 <memset>:
 800ae84:	4402      	add	r2, r0
 800ae86:	4603      	mov	r3, r0
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d100      	bne.n	800ae8e <memset+0xa>
 800ae8c:	4770      	bx	lr
 800ae8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae92:	e7f9      	b.n	800ae88 <memset+0x4>

0800ae94 <strtok>:
 800ae94:	4b16      	ldr	r3, [pc, #88]	@ (800aef0 <strtok+0x5c>)
 800ae96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	681f      	ldr	r7, [r3, #0]
 800ae9c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ae9e:	4605      	mov	r5, r0
 800aea0:	460e      	mov	r6, r1
 800aea2:	b9ec      	cbnz	r4, 800aee0 <strtok+0x4c>
 800aea4:	2050      	movs	r0, #80	@ 0x50
 800aea6:	f000 ff7d 	bl	800bda4 <malloc>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	6478      	str	r0, [r7, #68]	@ 0x44
 800aeae:	b920      	cbnz	r0, 800aeba <strtok+0x26>
 800aeb0:	4b10      	ldr	r3, [pc, #64]	@ (800aef4 <strtok+0x60>)
 800aeb2:	4811      	ldr	r0, [pc, #68]	@ (800aef8 <strtok+0x64>)
 800aeb4:	215b      	movs	r1, #91	@ 0x5b
 800aeb6:	f000 f8c1 	bl	800b03c <__assert_func>
 800aeba:	e9c0 4400 	strd	r4, r4, [r0]
 800aebe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aec2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aec6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aeca:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aece:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800aed2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800aed6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800aeda:	6184      	str	r4, [r0, #24]
 800aedc:	7704      	strb	r4, [r0, #28]
 800aede:	6244      	str	r4, [r0, #36]	@ 0x24
 800aee0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aee2:	4631      	mov	r1, r6
 800aee4:	4628      	mov	r0, r5
 800aee6:	2301      	movs	r3, #1
 800aee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	f000 b806 	b.w	800aefc <__strtok_r>
 800aef0:	200000d8 	.word	0x200000d8
 800aef4:	0800d22d 	.word	0x0800d22d
 800aef8:	0800d244 	.word	0x0800d244

0800aefc <__strtok_r>:
 800aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefe:	4604      	mov	r4, r0
 800af00:	b908      	cbnz	r0, 800af06 <__strtok_r+0xa>
 800af02:	6814      	ldr	r4, [r2, #0]
 800af04:	b144      	cbz	r4, 800af18 <__strtok_r+0x1c>
 800af06:	4620      	mov	r0, r4
 800af08:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af0c:	460f      	mov	r7, r1
 800af0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af12:	b91e      	cbnz	r6, 800af1c <__strtok_r+0x20>
 800af14:	b965      	cbnz	r5, 800af30 <__strtok_r+0x34>
 800af16:	6015      	str	r5, [r2, #0]
 800af18:	2000      	movs	r0, #0
 800af1a:	e005      	b.n	800af28 <__strtok_r+0x2c>
 800af1c:	42b5      	cmp	r5, r6
 800af1e:	d1f6      	bne.n	800af0e <__strtok_r+0x12>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1f0      	bne.n	800af06 <__strtok_r+0xa>
 800af24:	6014      	str	r4, [r2, #0]
 800af26:	7003      	strb	r3, [r0, #0]
 800af28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af2a:	461c      	mov	r4, r3
 800af2c:	e00c      	b.n	800af48 <__strtok_r+0x4c>
 800af2e:	b915      	cbnz	r5, 800af36 <__strtok_r+0x3a>
 800af30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af34:	460e      	mov	r6, r1
 800af36:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af3a:	42ab      	cmp	r3, r5
 800af3c:	d1f7      	bne.n	800af2e <__strtok_r+0x32>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0f3      	beq.n	800af2a <__strtok_r+0x2e>
 800af42:	2300      	movs	r3, #0
 800af44:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af48:	6014      	str	r4, [r2, #0]
 800af4a:	e7ed      	b.n	800af28 <__strtok_r+0x2c>

0800af4c <_localeconv_r>:
 800af4c:	4800      	ldr	r0, [pc, #0]	@ (800af50 <_localeconv_r+0x4>)
 800af4e:	4770      	bx	lr
 800af50:	20000218 	.word	0x20000218

0800af54 <_close_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d06      	ldr	r5, [pc, #24]	@ (800af70 <_close_r+0x1c>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	602b      	str	r3, [r5, #0]
 800af60:	f7f6 fcfa 	bl	8001958 <_close>
 800af64:	1c43      	adds	r3, r0, #1
 800af66:	d102      	bne.n	800af6e <_close_r+0x1a>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	b103      	cbz	r3, 800af6e <_close_r+0x1a>
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	bd38      	pop	{r3, r4, r5, pc}
 800af70:	20000850 	.word	0x20000850

0800af74 <_lseek_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d07      	ldr	r5, [pc, #28]	@ (800af94 <_lseek_r+0x20>)
 800af78:	4604      	mov	r4, r0
 800af7a:	4608      	mov	r0, r1
 800af7c:	4611      	mov	r1, r2
 800af7e:	2200      	movs	r2, #0
 800af80:	602a      	str	r2, [r5, #0]
 800af82:	461a      	mov	r2, r3
 800af84:	f7f6 fd0f 	bl	80019a6 <_lseek>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_lseek_r+0x1e>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_lseek_r+0x1e>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	20000850 	.word	0x20000850

0800af98 <_read_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	@ (800afb8 <_read_r+0x20>)
 800af9c:	4604      	mov	r4, r0
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f7f6 fc9d 	bl	80018e6 <_read>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_read_r+0x1e>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_read_r+0x1e>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	20000850 	.word	0x20000850

0800afbc <_write_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4d07      	ldr	r5, [pc, #28]	@ (800afdc <_write_r+0x20>)
 800afc0:	4604      	mov	r4, r0
 800afc2:	4608      	mov	r0, r1
 800afc4:	4611      	mov	r1, r2
 800afc6:	2200      	movs	r2, #0
 800afc8:	602a      	str	r2, [r5, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	f7f6 fca8 	bl	8001920 <_write>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d102      	bne.n	800afda <_write_r+0x1e>
 800afd4:	682b      	ldr	r3, [r5, #0]
 800afd6:	b103      	cbz	r3, 800afda <_write_r+0x1e>
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	bd38      	pop	{r3, r4, r5, pc}
 800afdc:	20000850 	.word	0x20000850

0800afe0 <__errno>:
 800afe0:	4b01      	ldr	r3, [pc, #4]	@ (800afe8 <__errno+0x8>)
 800afe2:	6818      	ldr	r0, [r3, #0]
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	200000d8 	.word	0x200000d8

0800afec <__libc_init_array>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4d0d      	ldr	r5, [pc, #52]	@ (800b024 <__libc_init_array+0x38>)
 800aff0:	4c0d      	ldr	r4, [pc, #52]	@ (800b028 <__libc_init_array+0x3c>)
 800aff2:	1b64      	subs	r4, r4, r5
 800aff4:	10a4      	asrs	r4, r4, #2
 800aff6:	2600      	movs	r6, #0
 800aff8:	42a6      	cmp	r6, r4
 800affa:	d109      	bne.n	800b010 <__libc_init_array+0x24>
 800affc:	4d0b      	ldr	r5, [pc, #44]	@ (800b02c <__libc_init_array+0x40>)
 800affe:	4c0c      	ldr	r4, [pc, #48]	@ (800b030 <__libc_init_array+0x44>)
 800b000:	f001 ffd0 	bl	800cfa4 <_init>
 800b004:	1b64      	subs	r4, r4, r5
 800b006:	10a4      	asrs	r4, r4, #2
 800b008:	2600      	movs	r6, #0
 800b00a:	42a6      	cmp	r6, r4
 800b00c:	d105      	bne.n	800b01a <__libc_init_array+0x2e>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	f855 3b04 	ldr.w	r3, [r5], #4
 800b014:	4798      	blx	r3
 800b016:	3601      	adds	r6, #1
 800b018:	e7ee      	b.n	800aff8 <__libc_init_array+0xc>
 800b01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b01e:	4798      	blx	r3
 800b020:	3601      	adds	r6, #1
 800b022:	e7f2      	b.n	800b00a <__libc_init_array+0x1e>
 800b024:	0800d4cc 	.word	0x0800d4cc
 800b028:	0800d4cc 	.word	0x0800d4cc
 800b02c:	0800d4cc 	.word	0x0800d4cc
 800b030:	0800d4d0 	.word	0x0800d4d0

0800b034 <__retarget_lock_init_recursive>:
 800b034:	4770      	bx	lr

0800b036 <__retarget_lock_acquire_recursive>:
 800b036:	4770      	bx	lr

0800b038 <__retarget_lock_release_recursive>:
 800b038:	4770      	bx	lr
	...

0800b03c <__assert_func>:
 800b03c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b03e:	4614      	mov	r4, r2
 800b040:	461a      	mov	r2, r3
 800b042:	4b09      	ldr	r3, [pc, #36]	@ (800b068 <__assert_func+0x2c>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4605      	mov	r5, r0
 800b048:	68d8      	ldr	r0, [r3, #12]
 800b04a:	b954      	cbnz	r4, 800b062 <__assert_func+0x26>
 800b04c:	4b07      	ldr	r3, [pc, #28]	@ (800b06c <__assert_func+0x30>)
 800b04e:	461c      	mov	r4, r3
 800b050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b054:	9100      	str	r1, [sp, #0]
 800b056:	462b      	mov	r3, r5
 800b058:	4905      	ldr	r1, [pc, #20]	@ (800b070 <__assert_func+0x34>)
 800b05a:	f001 fcdf 	bl	800ca1c <fiprintf>
 800b05e:	f001 fdab 	bl	800cbb8 <abort>
 800b062:	4b04      	ldr	r3, [pc, #16]	@ (800b074 <__assert_func+0x38>)
 800b064:	e7f4      	b.n	800b050 <__assert_func+0x14>
 800b066:	bf00      	nop
 800b068:	200000d8 	.word	0x200000d8
 800b06c:	0800d2d9 	.word	0x0800d2d9
 800b070:	0800d2ab 	.word	0x0800d2ab
 800b074:	0800d29e 	.word	0x0800d29e

0800b078 <quorem>:
 800b078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	6903      	ldr	r3, [r0, #16]
 800b07e:	690c      	ldr	r4, [r1, #16]
 800b080:	42a3      	cmp	r3, r4
 800b082:	4607      	mov	r7, r0
 800b084:	db7e      	blt.n	800b184 <quorem+0x10c>
 800b086:	3c01      	subs	r4, #1
 800b088:	f101 0814 	add.w	r8, r1, #20
 800b08c:	00a3      	lsls	r3, r4, #2
 800b08e:	f100 0514 	add.w	r5, r0, #20
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b09e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0ae:	d32e      	bcc.n	800b10e <quorem+0x96>
 800b0b0:	f04f 0a00 	mov.w	sl, #0
 800b0b4:	46c4      	mov	ip, r8
 800b0b6:	46ae      	mov	lr, r5
 800b0b8:	46d3      	mov	fp, sl
 800b0ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0be:	b298      	uxth	r0, r3
 800b0c0:	fb06 a000 	mla	r0, r6, r0, sl
 800b0c4:	0c02      	lsrs	r2, r0, #16
 800b0c6:	0c1b      	lsrs	r3, r3, #16
 800b0c8:	fb06 2303 	mla	r3, r6, r3, r2
 800b0cc:	f8de 2000 	ldr.w	r2, [lr]
 800b0d0:	b280      	uxth	r0, r0
 800b0d2:	b292      	uxth	r2, r2
 800b0d4:	1a12      	subs	r2, r2, r0
 800b0d6:	445a      	add	r2, fp
 800b0d8:	f8de 0000 	ldr.w	r0, [lr]
 800b0dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0ea:	b292      	uxth	r2, r2
 800b0ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0f0:	45e1      	cmp	r9, ip
 800b0f2:	f84e 2b04 	str.w	r2, [lr], #4
 800b0f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0fa:	d2de      	bcs.n	800b0ba <quorem+0x42>
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	58eb      	ldr	r3, [r5, r3]
 800b100:	b92b      	cbnz	r3, 800b10e <quorem+0x96>
 800b102:	9b01      	ldr	r3, [sp, #4]
 800b104:	3b04      	subs	r3, #4
 800b106:	429d      	cmp	r5, r3
 800b108:	461a      	mov	r2, r3
 800b10a:	d32f      	bcc.n	800b16c <quorem+0xf4>
 800b10c:	613c      	str	r4, [r7, #16]
 800b10e:	4638      	mov	r0, r7
 800b110:	f001 f978 	bl	800c404 <__mcmp>
 800b114:	2800      	cmp	r0, #0
 800b116:	db25      	blt.n	800b164 <quorem+0xec>
 800b118:	4629      	mov	r1, r5
 800b11a:	2000      	movs	r0, #0
 800b11c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b120:	f8d1 c000 	ldr.w	ip, [r1]
 800b124:	fa1f fe82 	uxth.w	lr, r2
 800b128:	fa1f f38c 	uxth.w	r3, ip
 800b12c:	eba3 030e 	sub.w	r3, r3, lr
 800b130:	4403      	add	r3, r0
 800b132:	0c12      	lsrs	r2, r2, #16
 800b134:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b138:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b142:	45c1      	cmp	r9, r8
 800b144:	f841 3b04 	str.w	r3, [r1], #4
 800b148:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b14c:	d2e6      	bcs.n	800b11c <quorem+0xa4>
 800b14e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b156:	b922      	cbnz	r2, 800b162 <quorem+0xea>
 800b158:	3b04      	subs	r3, #4
 800b15a:	429d      	cmp	r5, r3
 800b15c:	461a      	mov	r2, r3
 800b15e:	d30b      	bcc.n	800b178 <quorem+0x100>
 800b160:	613c      	str	r4, [r7, #16]
 800b162:	3601      	adds	r6, #1
 800b164:	4630      	mov	r0, r6
 800b166:	b003      	add	sp, #12
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16c:	6812      	ldr	r2, [r2, #0]
 800b16e:	3b04      	subs	r3, #4
 800b170:	2a00      	cmp	r2, #0
 800b172:	d1cb      	bne.n	800b10c <quorem+0x94>
 800b174:	3c01      	subs	r4, #1
 800b176:	e7c6      	b.n	800b106 <quorem+0x8e>
 800b178:	6812      	ldr	r2, [r2, #0]
 800b17a:	3b04      	subs	r3, #4
 800b17c:	2a00      	cmp	r2, #0
 800b17e:	d1ef      	bne.n	800b160 <quorem+0xe8>
 800b180:	3c01      	subs	r4, #1
 800b182:	e7ea      	b.n	800b15a <quorem+0xe2>
 800b184:	2000      	movs	r0, #0
 800b186:	e7ee      	b.n	800b166 <quorem+0xee>

0800b188 <_dtoa_r>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	69c7      	ldr	r7, [r0, #28]
 800b18e:	b099      	sub	sp, #100	@ 0x64
 800b190:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b194:	ec55 4b10 	vmov	r4, r5, d0
 800b198:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b19a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b19c:	4683      	mov	fp, r0
 800b19e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1a2:	b97f      	cbnz	r7, 800b1c4 <_dtoa_r+0x3c>
 800b1a4:	2010      	movs	r0, #16
 800b1a6:	f000 fdfd 	bl	800bda4 <malloc>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800b1b0:	b920      	cbnz	r0, 800b1bc <_dtoa_r+0x34>
 800b1b2:	4ba7      	ldr	r3, [pc, #668]	@ (800b450 <_dtoa_r+0x2c8>)
 800b1b4:	21ef      	movs	r1, #239	@ 0xef
 800b1b6:	48a7      	ldr	r0, [pc, #668]	@ (800b454 <_dtoa_r+0x2cc>)
 800b1b8:	f7ff ff40 	bl	800b03c <__assert_func>
 800b1bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b1c0:	6007      	str	r7, [r0, #0]
 800b1c2:	60c7      	str	r7, [r0, #12]
 800b1c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1c8:	6819      	ldr	r1, [r3, #0]
 800b1ca:	b159      	cbz	r1, 800b1e4 <_dtoa_r+0x5c>
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	604a      	str	r2, [r1, #4]
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	4093      	lsls	r3, r2
 800b1d4:	608b      	str	r3, [r1, #8]
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	f000 feda 	bl	800bf90 <_Bfree>
 800b1dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	1e2b      	subs	r3, r5, #0
 800b1e6:	bfb9      	ittee	lt
 800b1e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1ec:	9303      	strlt	r3, [sp, #12]
 800b1ee:	2300      	movge	r3, #0
 800b1f0:	6033      	strge	r3, [r6, #0]
 800b1f2:	9f03      	ldr	r7, [sp, #12]
 800b1f4:	4b98      	ldr	r3, [pc, #608]	@ (800b458 <_dtoa_r+0x2d0>)
 800b1f6:	bfbc      	itt	lt
 800b1f8:	2201      	movlt	r2, #1
 800b1fa:	6032      	strlt	r2, [r6, #0]
 800b1fc:	43bb      	bics	r3, r7
 800b1fe:	d112      	bne.n	800b226 <_dtoa_r+0x9e>
 800b200:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b202:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b20c:	4323      	orrs	r3, r4
 800b20e:	f000 854d 	beq.w	800bcac <_dtoa_r+0xb24>
 800b212:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b214:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b46c <_dtoa_r+0x2e4>
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 854f 	beq.w	800bcbc <_dtoa_r+0xb34>
 800b21e:	f10a 0303 	add.w	r3, sl, #3
 800b222:	f000 bd49 	b.w	800bcb8 <_dtoa_r+0xb30>
 800b226:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b22a:	2200      	movs	r2, #0
 800b22c:	ec51 0b17 	vmov	r0, r1, d7
 800b230:	2300      	movs	r3, #0
 800b232:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b236:	f7f5 fc7f 	bl	8000b38 <__aeabi_dcmpeq>
 800b23a:	4680      	mov	r8, r0
 800b23c:	b158      	cbz	r0, 800b256 <_dtoa_r+0xce>
 800b23e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b240:	2301      	movs	r3, #1
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b246:	b113      	cbz	r3, 800b24e <_dtoa_r+0xc6>
 800b248:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b24a:	4b84      	ldr	r3, [pc, #528]	@ (800b45c <_dtoa_r+0x2d4>)
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b470 <_dtoa_r+0x2e8>
 800b252:	f000 bd33 	b.w	800bcbc <_dtoa_r+0xb34>
 800b256:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b25a:	aa16      	add	r2, sp, #88	@ 0x58
 800b25c:	a917      	add	r1, sp, #92	@ 0x5c
 800b25e:	4658      	mov	r0, fp
 800b260:	f001 f980 	bl	800c564 <__d2b>
 800b264:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b268:	4681      	mov	r9, r0
 800b26a:	2e00      	cmp	r6, #0
 800b26c:	d077      	beq.n	800b35e <_dtoa_r+0x1d6>
 800b26e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b270:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b27c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b280:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b284:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b288:	4619      	mov	r1, r3
 800b28a:	2200      	movs	r2, #0
 800b28c:	4b74      	ldr	r3, [pc, #464]	@ (800b460 <_dtoa_r+0x2d8>)
 800b28e:	f7f5 f833 	bl	80002f8 <__aeabi_dsub>
 800b292:	a369      	add	r3, pc, #420	@ (adr r3, 800b438 <_dtoa_r+0x2b0>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f7f5 f9e6 	bl	8000668 <__aeabi_dmul>
 800b29c:	a368      	add	r3, pc, #416	@ (adr r3, 800b440 <_dtoa_r+0x2b8>)
 800b29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a2:	f7f5 f82b 	bl	80002fc <__adddf3>
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	f7f5 f972 	bl	8000594 <__aeabi_i2d>
 800b2b0:	a365      	add	r3, pc, #404	@ (adr r3, 800b448 <_dtoa_r+0x2c0>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f7f5 f9d7 	bl	8000668 <__aeabi_dmul>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f5 f81b 	bl	80002fc <__adddf3>
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	f7f5 fc7d 	bl	8000bc8 <__aeabi_d2iz>
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f5 fc38 	bl	8000b4c <__aeabi_dcmplt>
 800b2dc:	b140      	cbz	r0, 800b2f0 <_dtoa_r+0x168>
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7f5 f958 	bl	8000594 <__aeabi_i2d>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	462b      	mov	r3, r5
 800b2e8:	f7f5 fc26 	bl	8000b38 <__aeabi_dcmpeq>
 800b2ec:	b900      	cbnz	r0, 800b2f0 <_dtoa_r+0x168>
 800b2ee:	3f01      	subs	r7, #1
 800b2f0:	2f16      	cmp	r7, #22
 800b2f2:	d851      	bhi.n	800b398 <_dtoa_r+0x210>
 800b2f4:	4b5b      	ldr	r3, [pc, #364]	@ (800b464 <_dtoa_r+0x2dc>)
 800b2f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b302:	f7f5 fc23 	bl	8000b4c <__aeabi_dcmplt>
 800b306:	2800      	cmp	r0, #0
 800b308:	d048      	beq.n	800b39c <_dtoa_r+0x214>
 800b30a:	3f01      	subs	r7, #1
 800b30c:	2300      	movs	r3, #0
 800b30e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b310:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b312:	1b9b      	subs	r3, r3, r6
 800b314:	1e5a      	subs	r2, r3, #1
 800b316:	bf44      	itt	mi
 800b318:	f1c3 0801 	rsbmi	r8, r3, #1
 800b31c:	2300      	movmi	r3, #0
 800b31e:	9208      	str	r2, [sp, #32]
 800b320:	bf54      	ite	pl
 800b322:	f04f 0800 	movpl.w	r8, #0
 800b326:	9308      	strmi	r3, [sp, #32]
 800b328:	2f00      	cmp	r7, #0
 800b32a:	db39      	blt.n	800b3a0 <_dtoa_r+0x218>
 800b32c:	9b08      	ldr	r3, [sp, #32]
 800b32e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b330:	443b      	add	r3, r7
 800b332:	9308      	str	r3, [sp, #32]
 800b334:	2300      	movs	r3, #0
 800b336:	930a      	str	r3, [sp, #40]	@ 0x28
 800b338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b33a:	2b09      	cmp	r3, #9
 800b33c:	d864      	bhi.n	800b408 <_dtoa_r+0x280>
 800b33e:	2b05      	cmp	r3, #5
 800b340:	bfc4      	itt	gt
 800b342:	3b04      	subgt	r3, #4
 800b344:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b348:	f1a3 0302 	sub.w	r3, r3, #2
 800b34c:	bfcc      	ite	gt
 800b34e:	2400      	movgt	r4, #0
 800b350:	2401      	movle	r4, #1
 800b352:	2b03      	cmp	r3, #3
 800b354:	d863      	bhi.n	800b41e <_dtoa_r+0x296>
 800b356:	e8df f003 	tbb	[pc, r3]
 800b35a:	372a      	.short	0x372a
 800b35c:	5535      	.short	0x5535
 800b35e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b362:	441e      	add	r6, r3
 800b364:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b368:	2b20      	cmp	r3, #32
 800b36a:	bfc1      	itttt	gt
 800b36c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b370:	409f      	lslgt	r7, r3
 800b372:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b376:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b37a:	bfd6      	itet	le
 800b37c:	f1c3 0320 	rsble	r3, r3, #32
 800b380:	ea47 0003 	orrgt.w	r0, r7, r3
 800b384:	fa04 f003 	lslle.w	r0, r4, r3
 800b388:	f7f5 f8f4 	bl	8000574 <__aeabi_ui2d>
 800b38c:	2201      	movs	r2, #1
 800b38e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b392:	3e01      	subs	r6, #1
 800b394:	9214      	str	r2, [sp, #80]	@ 0x50
 800b396:	e777      	b.n	800b288 <_dtoa_r+0x100>
 800b398:	2301      	movs	r3, #1
 800b39a:	e7b8      	b.n	800b30e <_dtoa_r+0x186>
 800b39c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b39e:	e7b7      	b.n	800b310 <_dtoa_r+0x188>
 800b3a0:	427b      	negs	r3, r7
 800b3a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	eba8 0807 	sub.w	r8, r8, r7
 800b3aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3ac:	e7c4      	b.n	800b338 <_dtoa_r+0x1b0>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dc35      	bgt.n	800b424 <_dtoa_r+0x29c>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	9307      	str	r3, [sp, #28]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3c2:	e00b      	b.n	800b3dc <_dtoa_r+0x254>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e7f3      	b.n	800b3b0 <_dtoa_r+0x228>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	9307      	str	r3, [sp, #28]
 800b3d8:	bfb8      	it	lt
 800b3da:	2301      	movlt	r3, #1
 800b3dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	f102 0514 	add.w	r5, r2, #20
 800b3e8:	429d      	cmp	r5, r3
 800b3ea:	d91f      	bls.n	800b42c <_dtoa_r+0x2a4>
 800b3ec:	6041      	str	r1, [r0, #4]
 800b3ee:	4658      	mov	r0, fp
 800b3f0:	f000 fd8e 	bl	800bf10 <_Balloc>
 800b3f4:	4682      	mov	sl, r0
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d13c      	bne.n	800b474 <_dtoa_r+0x2ec>
 800b3fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b468 <_dtoa_r+0x2e0>)
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800b402:	e6d8      	b.n	800b1b6 <_dtoa_r+0x2e>
 800b404:	2301      	movs	r3, #1
 800b406:	e7e0      	b.n	800b3ca <_dtoa_r+0x242>
 800b408:	2401      	movs	r4, #1
 800b40a:	2300      	movs	r3, #0
 800b40c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b40e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	2200      	movs	r2, #0
 800b41a:	2312      	movs	r3, #18
 800b41c:	e7d0      	b.n	800b3c0 <_dtoa_r+0x238>
 800b41e:	2301      	movs	r3, #1
 800b420:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b422:	e7f5      	b.n	800b410 <_dtoa_r+0x288>
 800b424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	9307      	str	r3, [sp, #28]
 800b42a:	e7d7      	b.n	800b3dc <_dtoa_r+0x254>
 800b42c:	3101      	adds	r1, #1
 800b42e:	0052      	lsls	r2, r2, #1
 800b430:	e7d8      	b.n	800b3e4 <_dtoa_r+0x25c>
 800b432:	bf00      	nop
 800b434:	f3af 8000 	nop.w
 800b438:	636f4361 	.word	0x636f4361
 800b43c:	3fd287a7 	.word	0x3fd287a7
 800b440:	8b60c8b3 	.word	0x8b60c8b3
 800b444:	3fc68a28 	.word	0x3fc68a28
 800b448:	509f79fb 	.word	0x509f79fb
 800b44c:	3fd34413 	.word	0x3fd34413
 800b450:	0800d22d 	.word	0x0800d22d
 800b454:	0800d2e7 	.word	0x0800d2e7
 800b458:	7ff00000 	.word	0x7ff00000
 800b45c:	0800d20a 	.word	0x0800d20a
 800b460:	3ff80000 	.word	0x3ff80000
 800b464:	0800d3e0 	.word	0x0800d3e0
 800b468:	0800d33f 	.word	0x0800d33f
 800b46c:	0800d2e3 	.word	0x0800d2e3
 800b470:	0800d209 	.word	0x0800d209
 800b474:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b478:	6018      	str	r0, [r3, #0]
 800b47a:	9b07      	ldr	r3, [sp, #28]
 800b47c:	2b0e      	cmp	r3, #14
 800b47e:	f200 80a4 	bhi.w	800b5ca <_dtoa_r+0x442>
 800b482:	2c00      	cmp	r4, #0
 800b484:	f000 80a1 	beq.w	800b5ca <_dtoa_r+0x442>
 800b488:	2f00      	cmp	r7, #0
 800b48a:	dd33      	ble.n	800b4f4 <_dtoa_r+0x36c>
 800b48c:	4bad      	ldr	r3, [pc, #692]	@ (800b744 <_dtoa_r+0x5bc>)
 800b48e:	f007 020f 	and.w	r2, r7, #15
 800b492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b496:	ed93 7b00 	vldr	d7, [r3]
 800b49a:	05f8      	lsls	r0, r7, #23
 800b49c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4a4:	d516      	bpl.n	800b4d4 <_dtoa_r+0x34c>
 800b4a6:	4ba8      	ldr	r3, [pc, #672]	@ (800b748 <_dtoa_r+0x5c0>)
 800b4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4b0:	f7f5 fa04 	bl	80008bc <__aeabi_ddiv>
 800b4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4b8:	f004 040f 	and.w	r4, r4, #15
 800b4bc:	2603      	movs	r6, #3
 800b4be:	4da2      	ldr	r5, [pc, #648]	@ (800b748 <_dtoa_r+0x5c0>)
 800b4c0:	b954      	cbnz	r4, 800b4d8 <_dtoa_r+0x350>
 800b4c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ca:	f7f5 f9f7 	bl	80008bc <__aeabi_ddiv>
 800b4ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4d2:	e028      	b.n	800b526 <_dtoa_r+0x39e>
 800b4d4:	2602      	movs	r6, #2
 800b4d6:	e7f2      	b.n	800b4be <_dtoa_r+0x336>
 800b4d8:	07e1      	lsls	r1, r4, #31
 800b4da:	d508      	bpl.n	800b4ee <_dtoa_r+0x366>
 800b4dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4e4:	f7f5 f8c0 	bl	8000668 <__aeabi_dmul>
 800b4e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ec:	3601      	adds	r6, #1
 800b4ee:	1064      	asrs	r4, r4, #1
 800b4f0:	3508      	adds	r5, #8
 800b4f2:	e7e5      	b.n	800b4c0 <_dtoa_r+0x338>
 800b4f4:	f000 80d2 	beq.w	800b69c <_dtoa_r+0x514>
 800b4f8:	427c      	negs	r4, r7
 800b4fa:	4b92      	ldr	r3, [pc, #584]	@ (800b744 <_dtoa_r+0x5bc>)
 800b4fc:	4d92      	ldr	r5, [pc, #584]	@ (800b748 <_dtoa_r+0x5c0>)
 800b4fe:	f004 020f 	and.w	r2, r4, #15
 800b502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b50e:	f7f5 f8ab 	bl	8000668 <__aeabi_dmul>
 800b512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b516:	1124      	asrs	r4, r4, #4
 800b518:	2300      	movs	r3, #0
 800b51a:	2602      	movs	r6, #2
 800b51c:	2c00      	cmp	r4, #0
 800b51e:	f040 80b2 	bne.w	800b686 <_dtoa_r+0x4fe>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1d3      	bne.n	800b4ce <_dtoa_r+0x346>
 800b526:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b528:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 80b7 	beq.w	800b6a0 <_dtoa_r+0x518>
 800b532:	4b86      	ldr	r3, [pc, #536]	@ (800b74c <_dtoa_r+0x5c4>)
 800b534:	2200      	movs	r2, #0
 800b536:	4620      	mov	r0, r4
 800b538:	4629      	mov	r1, r5
 800b53a:	f7f5 fb07 	bl	8000b4c <__aeabi_dcmplt>
 800b53e:	2800      	cmp	r0, #0
 800b540:	f000 80ae 	beq.w	800b6a0 <_dtoa_r+0x518>
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 80aa 	beq.w	800b6a0 <_dtoa_r+0x518>
 800b54c:	9b00      	ldr	r3, [sp, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	dd37      	ble.n	800b5c2 <_dtoa_r+0x43a>
 800b552:	1e7b      	subs	r3, r7, #1
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	4620      	mov	r0, r4
 800b558:	4b7d      	ldr	r3, [pc, #500]	@ (800b750 <_dtoa_r+0x5c8>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7f5 f883 	bl	8000668 <__aeabi_dmul>
 800b562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b566:	9c00      	ldr	r4, [sp, #0]
 800b568:	3601      	adds	r6, #1
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7f5 f812 	bl	8000594 <__aeabi_i2d>
 800b570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b574:	f7f5 f878 	bl	8000668 <__aeabi_dmul>
 800b578:	4b76      	ldr	r3, [pc, #472]	@ (800b754 <_dtoa_r+0x5cc>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	f7f4 febe 	bl	80002fc <__adddf3>
 800b580:	4605      	mov	r5, r0
 800b582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b586:	2c00      	cmp	r4, #0
 800b588:	f040 808d 	bne.w	800b6a6 <_dtoa_r+0x51e>
 800b58c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b590:	4b71      	ldr	r3, [pc, #452]	@ (800b758 <_dtoa_r+0x5d0>)
 800b592:	2200      	movs	r2, #0
 800b594:	f7f4 feb0 	bl	80002f8 <__aeabi_dsub>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5a0:	462a      	mov	r2, r5
 800b5a2:	4633      	mov	r3, r6
 800b5a4:	f7f5 faf0 	bl	8000b88 <__aeabi_dcmpgt>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	f040 828b 	bne.w	800bac4 <_dtoa_r+0x93c>
 800b5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b5b8:	f7f5 fac8 	bl	8000b4c <__aeabi_dcmplt>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f040 8128 	bne.w	800b812 <_dtoa_r+0x68a>
 800b5c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b5c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b5ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f2c0 815a 	blt.w	800b886 <_dtoa_r+0x6fe>
 800b5d2:	2f0e      	cmp	r7, #14
 800b5d4:	f300 8157 	bgt.w	800b886 <_dtoa_r+0x6fe>
 800b5d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b744 <_dtoa_r+0x5bc>)
 800b5da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5de:	ed93 7b00 	vldr	d7, [r3]
 800b5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	ed8d 7b00 	vstr	d7, [sp]
 800b5ea:	da03      	bge.n	800b5f4 <_dtoa_r+0x46c>
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f340 8101 	ble.w	800b7f6 <_dtoa_r+0x66e>
 800b5f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5f8:	4656      	mov	r6, sl
 800b5fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f5 f95b 	bl	80008bc <__aeabi_ddiv>
 800b606:	f7f5 fadf 	bl	8000bc8 <__aeabi_d2iz>
 800b60a:	4680      	mov	r8, r0
 800b60c:	f7f4 ffc2 	bl	8000594 <__aeabi_i2d>
 800b610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b614:	f7f5 f828 	bl	8000668 <__aeabi_dmul>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4620      	mov	r0, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b624:	f7f4 fe68 	bl	80002f8 <__aeabi_dsub>
 800b628:	f806 4b01 	strb.w	r4, [r6], #1
 800b62c:	9d07      	ldr	r5, [sp, #28]
 800b62e:	eba6 040a 	sub.w	r4, r6, sl
 800b632:	42a5      	cmp	r5, r4
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	f040 8117 	bne.w	800b86a <_dtoa_r+0x6e2>
 800b63c:	f7f4 fe5e 	bl	80002fc <__adddf3>
 800b640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b644:	4604      	mov	r4, r0
 800b646:	460d      	mov	r5, r1
 800b648:	f7f5 fa9e 	bl	8000b88 <__aeabi_dcmpgt>
 800b64c:	2800      	cmp	r0, #0
 800b64e:	f040 80f9 	bne.w	800b844 <_dtoa_r+0x6bc>
 800b652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f5 fa6d 	bl	8000b38 <__aeabi_dcmpeq>
 800b65e:	b118      	cbz	r0, 800b668 <_dtoa_r+0x4e0>
 800b660:	f018 0f01 	tst.w	r8, #1
 800b664:	f040 80ee 	bne.w	800b844 <_dtoa_r+0x6bc>
 800b668:	4649      	mov	r1, r9
 800b66a:	4658      	mov	r0, fp
 800b66c:	f000 fc90 	bl	800bf90 <_Bfree>
 800b670:	2300      	movs	r3, #0
 800b672:	7033      	strb	r3, [r6, #0]
 800b674:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b676:	3701      	adds	r7, #1
 800b678:	601f      	str	r7, [r3, #0]
 800b67a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f000 831d 	beq.w	800bcbc <_dtoa_r+0xb34>
 800b682:	601e      	str	r6, [r3, #0]
 800b684:	e31a      	b.n	800bcbc <_dtoa_r+0xb34>
 800b686:	07e2      	lsls	r2, r4, #31
 800b688:	d505      	bpl.n	800b696 <_dtoa_r+0x50e>
 800b68a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b68e:	f7f4 ffeb 	bl	8000668 <__aeabi_dmul>
 800b692:	3601      	adds	r6, #1
 800b694:	2301      	movs	r3, #1
 800b696:	1064      	asrs	r4, r4, #1
 800b698:	3508      	adds	r5, #8
 800b69a:	e73f      	b.n	800b51c <_dtoa_r+0x394>
 800b69c:	2602      	movs	r6, #2
 800b69e:	e742      	b.n	800b526 <_dtoa_r+0x39e>
 800b6a0:	9c07      	ldr	r4, [sp, #28]
 800b6a2:	9704      	str	r7, [sp, #16]
 800b6a4:	e761      	b.n	800b56a <_dtoa_r+0x3e2>
 800b6a6:	4b27      	ldr	r3, [pc, #156]	@ (800b744 <_dtoa_r+0x5bc>)
 800b6a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6b2:	4454      	add	r4, sl
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	d053      	beq.n	800b760 <_dtoa_r+0x5d8>
 800b6b8:	4928      	ldr	r1, [pc, #160]	@ (800b75c <_dtoa_r+0x5d4>)
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	f7f5 f8fe 	bl	80008bc <__aeabi_ddiv>
 800b6c0:	4633      	mov	r3, r6
 800b6c2:	462a      	mov	r2, r5
 800b6c4:	f7f4 fe18 	bl	80002f8 <__aeabi_dsub>
 800b6c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6cc:	4656      	mov	r6, sl
 800b6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6d2:	f7f5 fa79 	bl	8000bc8 <__aeabi_d2iz>
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	f7f4 ff5c 	bl	8000594 <__aeabi_i2d>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e4:	f7f4 fe08 	bl	80002f8 <__aeabi_dsub>
 800b6e8:	3530      	adds	r5, #48	@ 0x30
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6f2:	f806 5b01 	strb.w	r5, [r6], #1
 800b6f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6fa:	f7f5 fa27 	bl	8000b4c <__aeabi_dcmplt>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d171      	bne.n	800b7e6 <_dtoa_r+0x65e>
 800b702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b706:	4911      	ldr	r1, [pc, #68]	@ (800b74c <_dtoa_r+0x5c4>)
 800b708:	2000      	movs	r0, #0
 800b70a:	f7f4 fdf5 	bl	80002f8 <__aeabi_dsub>
 800b70e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b712:	f7f5 fa1b 	bl	8000b4c <__aeabi_dcmplt>
 800b716:	2800      	cmp	r0, #0
 800b718:	f040 8095 	bne.w	800b846 <_dtoa_r+0x6be>
 800b71c:	42a6      	cmp	r6, r4
 800b71e:	f43f af50 	beq.w	800b5c2 <_dtoa_r+0x43a>
 800b722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b726:	4b0a      	ldr	r3, [pc, #40]	@ (800b750 <_dtoa_r+0x5c8>)
 800b728:	2200      	movs	r2, #0
 800b72a:	f7f4 ff9d 	bl	8000668 <__aeabi_dmul>
 800b72e:	4b08      	ldr	r3, [pc, #32]	@ (800b750 <_dtoa_r+0x5c8>)
 800b730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b734:	2200      	movs	r2, #0
 800b736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73a:	f7f4 ff95 	bl	8000668 <__aeabi_dmul>
 800b73e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b742:	e7c4      	b.n	800b6ce <_dtoa_r+0x546>
 800b744:	0800d3e0 	.word	0x0800d3e0
 800b748:	0800d3b8 	.word	0x0800d3b8
 800b74c:	3ff00000 	.word	0x3ff00000
 800b750:	40240000 	.word	0x40240000
 800b754:	401c0000 	.word	0x401c0000
 800b758:	40140000 	.word	0x40140000
 800b75c:	3fe00000 	.word	0x3fe00000
 800b760:	4631      	mov	r1, r6
 800b762:	4628      	mov	r0, r5
 800b764:	f7f4 ff80 	bl	8000668 <__aeabi_dmul>
 800b768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b76c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b76e:	4656      	mov	r6, sl
 800b770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b774:	f7f5 fa28 	bl	8000bc8 <__aeabi_d2iz>
 800b778:	4605      	mov	r5, r0
 800b77a:	f7f4 ff0b 	bl	8000594 <__aeabi_i2d>
 800b77e:	4602      	mov	r2, r0
 800b780:	460b      	mov	r3, r1
 800b782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b786:	f7f4 fdb7 	bl	80002f8 <__aeabi_dsub>
 800b78a:	3530      	adds	r5, #48	@ 0x30
 800b78c:	f806 5b01 	strb.w	r5, [r6], #1
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	42a6      	cmp	r6, r4
 800b796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b79a:	f04f 0200 	mov.w	r2, #0
 800b79e:	d124      	bne.n	800b7ea <_dtoa_r+0x662>
 800b7a0:	4bac      	ldr	r3, [pc, #688]	@ (800ba54 <_dtoa_r+0x8cc>)
 800b7a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7a6:	f7f4 fda9 	bl	80002fc <__adddf3>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b2:	f7f5 f9e9 	bl	8000b88 <__aeabi_dcmpgt>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d145      	bne.n	800b846 <_dtoa_r+0x6be>
 800b7ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7be:	49a5      	ldr	r1, [pc, #660]	@ (800ba54 <_dtoa_r+0x8cc>)
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	f7f4 fd99 	bl	80002f8 <__aeabi_dsub>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7ce:	f7f5 f9bd 	bl	8000b4c <__aeabi_dcmplt>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	f43f aef5 	beq.w	800b5c2 <_dtoa_r+0x43a>
 800b7d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b7da:	1e73      	subs	r3, r6, #1
 800b7dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b7de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7e2:	2b30      	cmp	r3, #48	@ 0x30
 800b7e4:	d0f8      	beq.n	800b7d8 <_dtoa_r+0x650>
 800b7e6:	9f04      	ldr	r7, [sp, #16]
 800b7e8:	e73e      	b.n	800b668 <_dtoa_r+0x4e0>
 800b7ea:	4b9b      	ldr	r3, [pc, #620]	@ (800ba58 <_dtoa_r+0x8d0>)
 800b7ec:	f7f4 ff3c 	bl	8000668 <__aeabi_dmul>
 800b7f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7f4:	e7bc      	b.n	800b770 <_dtoa_r+0x5e8>
 800b7f6:	d10c      	bne.n	800b812 <_dtoa_r+0x68a>
 800b7f8:	4b98      	ldr	r3, [pc, #608]	@ (800ba5c <_dtoa_r+0x8d4>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b800:	f7f4 ff32 	bl	8000668 <__aeabi_dmul>
 800b804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b808:	f7f5 f9b4 	bl	8000b74 <__aeabi_dcmpge>
 800b80c:	2800      	cmp	r0, #0
 800b80e:	f000 8157 	beq.w	800bac0 <_dtoa_r+0x938>
 800b812:	2400      	movs	r4, #0
 800b814:	4625      	mov	r5, r4
 800b816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b818:	43db      	mvns	r3, r3
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	4656      	mov	r6, sl
 800b81e:	2700      	movs	r7, #0
 800b820:	4621      	mov	r1, r4
 800b822:	4658      	mov	r0, fp
 800b824:	f000 fbb4 	bl	800bf90 <_Bfree>
 800b828:	2d00      	cmp	r5, #0
 800b82a:	d0dc      	beq.n	800b7e6 <_dtoa_r+0x65e>
 800b82c:	b12f      	cbz	r7, 800b83a <_dtoa_r+0x6b2>
 800b82e:	42af      	cmp	r7, r5
 800b830:	d003      	beq.n	800b83a <_dtoa_r+0x6b2>
 800b832:	4639      	mov	r1, r7
 800b834:	4658      	mov	r0, fp
 800b836:	f000 fbab 	bl	800bf90 <_Bfree>
 800b83a:	4629      	mov	r1, r5
 800b83c:	4658      	mov	r0, fp
 800b83e:	f000 fba7 	bl	800bf90 <_Bfree>
 800b842:	e7d0      	b.n	800b7e6 <_dtoa_r+0x65e>
 800b844:	9704      	str	r7, [sp, #16]
 800b846:	4633      	mov	r3, r6
 800b848:	461e      	mov	r6, r3
 800b84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b84e:	2a39      	cmp	r2, #57	@ 0x39
 800b850:	d107      	bne.n	800b862 <_dtoa_r+0x6da>
 800b852:	459a      	cmp	sl, r3
 800b854:	d1f8      	bne.n	800b848 <_dtoa_r+0x6c0>
 800b856:	9a04      	ldr	r2, [sp, #16]
 800b858:	3201      	adds	r2, #1
 800b85a:	9204      	str	r2, [sp, #16]
 800b85c:	2230      	movs	r2, #48	@ 0x30
 800b85e:	f88a 2000 	strb.w	r2, [sl]
 800b862:	781a      	ldrb	r2, [r3, #0]
 800b864:	3201      	adds	r2, #1
 800b866:	701a      	strb	r2, [r3, #0]
 800b868:	e7bd      	b.n	800b7e6 <_dtoa_r+0x65e>
 800b86a:	4b7b      	ldr	r3, [pc, #492]	@ (800ba58 <_dtoa_r+0x8d0>)
 800b86c:	2200      	movs	r2, #0
 800b86e:	f7f4 fefb 	bl	8000668 <__aeabi_dmul>
 800b872:	2200      	movs	r2, #0
 800b874:	2300      	movs	r3, #0
 800b876:	4604      	mov	r4, r0
 800b878:	460d      	mov	r5, r1
 800b87a:	f7f5 f95d 	bl	8000b38 <__aeabi_dcmpeq>
 800b87e:	2800      	cmp	r0, #0
 800b880:	f43f aebb 	beq.w	800b5fa <_dtoa_r+0x472>
 800b884:	e6f0      	b.n	800b668 <_dtoa_r+0x4e0>
 800b886:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b888:	2a00      	cmp	r2, #0
 800b88a:	f000 80db 	beq.w	800ba44 <_dtoa_r+0x8bc>
 800b88e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b890:	2a01      	cmp	r2, #1
 800b892:	f300 80bf 	bgt.w	800ba14 <_dtoa_r+0x88c>
 800b896:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b898:	2a00      	cmp	r2, #0
 800b89a:	f000 80b7 	beq.w	800ba0c <_dtoa_r+0x884>
 800b89e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8a4:	4646      	mov	r6, r8
 800b8a6:	9a08      	ldr	r2, [sp, #32]
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	441a      	add	r2, r3
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	4498      	add	r8, r3
 800b8b0:	9208      	str	r2, [sp, #32]
 800b8b2:	f000 fc21 	bl	800c0f8 <__i2b>
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b15e      	cbz	r6, 800b8d2 <_dtoa_r+0x74a>
 800b8ba:	9b08      	ldr	r3, [sp, #32]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dd08      	ble.n	800b8d2 <_dtoa_r+0x74a>
 800b8c0:	42b3      	cmp	r3, r6
 800b8c2:	9a08      	ldr	r2, [sp, #32]
 800b8c4:	bfa8      	it	ge
 800b8c6:	4633      	movge	r3, r6
 800b8c8:	eba8 0803 	sub.w	r8, r8, r3
 800b8cc:	1af6      	subs	r6, r6, r3
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	9308      	str	r3, [sp, #32]
 800b8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8d4:	b1f3      	cbz	r3, 800b914 <_dtoa_r+0x78c>
 800b8d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 80b7 	beq.w	800ba4c <_dtoa_r+0x8c4>
 800b8de:	b18c      	cbz	r4, 800b904 <_dtoa_r+0x77c>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4622      	mov	r2, r4
 800b8e4:	4658      	mov	r0, fp
 800b8e6:	f000 fcc7 	bl	800c278 <__pow5mult>
 800b8ea:	464a      	mov	r2, r9
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	4658      	mov	r0, fp
 800b8f2:	f000 fc17 	bl	800c124 <__multiply>
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	9004      	str	r0, [sp, #16]
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 fb48 	bl	800bf90 <_Bfree>
 800b900:	9b04      	ldr	r3, [sp, #16]
 800b902:	4699      	mov	r9, r3
 800b904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b906:	1b1a      	subs	r2, r3, r4
 800b908:	d004      	beq.n	800b914 <_dtoa_r+0x78c>
 800b90a:	4649      	mov	r1, r9
 800b90c:	4658      	mov	r0, fp
 800b90e:	f000 fcb3 	bl	800c278 <__pow5mult>
 800b912:	4681      	mov	r9, r0
 800b914:	2101      	movs	r1, #1
 800b916:	4658      	mov	r0, fp
 800b918:	f000 fbee 	bl	800c0f8 <__i2b>
 800b91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b91e:	4604      	mov	r4, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 81cf 	beq.w	800bcc4 <_dtoa_r+0xb3c>
 800b926:	461a      	mov	r2, r3
 800b928:	4601      	mov	r1, r0
 800b92a:	4658      	mov	r0, fp
 800b92c:	f000 fca4 	bl	800c278 <__pow5mult>
 800b930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b932:	2b01      	cmp	r3, #1
 800b934:	4604      	mov	r4, r0
 800b936:	f300 8095 	bgt.w	800ba64 <_dtoa_r+0x8dc>
 800b93a:	9b02      	ldr	r3, [sp, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f040 8087 	bne.w	800ba50 <_dtoa_r+0x8c8>
 800b942:	9b03      	ldr	r3, [sp, #12]
 800b944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f040 8089 	bne.w	800ba60 <_dtoa_r+0x8d8>
 800b94e:	9b03      	ldr	r3, [sp, #12]
 800b950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b954:	0d1b      	lsrs	r3, r3, #20
 800b956:	051b      	lsls	r3, r3, #20
 800b958:	b12b      	cbz	r3, 800b966 <_dtoa_r+0x7de>
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	3301      	adds	r3, #1
 800b95e:	9308      	str	r3, [sp, #32]
 800b960:	f108 0801 	add.w	r8, r8, #1
 800b964:	2301      	movs	r3, #1
 800b966:	930a      	str	r3, [sp, #40]	@ 0x28
 800b968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 81b0 	beq.w	800bcd0 <_dtoa_r+0xb48>
 800b970:	6923      	ldr	r3, [r4, #16]
 800b972:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b976:	6918      	ldr	r0, [r3, #16]
 800b978:	f000 fb72 	bl	800c060 <__hi0bits>
 800b97c:	f1c0 0020 	rsb	r0, r0, #32
 800b980:	9b08      	ldr	r3, [sp, #32]
 800b982:	4418      	add	r0, r3
 800b984:	f010 001f 	ands.w	r0, r0, #31
 800b988:	d077      	beq.n	800ba7a <_dtoa_r+0x8f2>
 800b98a:	f1c0 0320 	rsb	r3, r0, #32
 800b98e:	2b04      	cmp	r3, #4
 800b990:	dd6b      	ble.n	800ba6a <_dtoa_r+0x8e2>
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	f1c0 001c 	rsb	r0, r0, #28
 800b998:	4403      	add	r3, r0
 800b99a:	4480      	add	r8, r0
 800b99c:	4406      	add	r6, r0
 800b99e:	9308      	str	r3, [sp, #32]
 800b9a0:	f1b8 0f00 	cmp.w	r8, #0
 800b9a4:	dd05      	ble.n	800b9b2 <_dtoa_r+0x82a>
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	4642      	mov	r2, r8
 800b9aa:	4658      	mov	r0, fp
 800b9ac:	f000 fcbe 	bl	800c32c <__lshift>
 800b9b0:	4681      	mov	r9, r0
 800b9b2:	9b08      	ldr	r3, [sp, #32]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	dd05      	ble.n	800b9c4 <_dtoa_r+0x83c>
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4658      	mov	r0, fp
 800b9be:	f000 fcb5 	bl	800c32c <__lshift>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d059      	beq.n	800ba7e <_dtoa_r+0x8f6>
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	4648      	mov	r0, r9
 800b9ce:	f000 fd19 	bl	800c404 <__mcmp>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	da53      	bge.n	800ba7e <_dtoa_r+0x8f6>
 800b9d6:	1e7b      	subs	r3, r7, #1
 800b9d8:	9304      	str	r3, [sp, #16]
 800b9da:	4649      	mov	r1, r9
 800b9dc:	2300      	movs	r3, #0
 800b9de:	220a      	movs	r2, #10
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f000 faf7 	bl	800bfd4 <__multadd>
 800b9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e8:	4681      	mov	r9, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 8172 	beq.w	800bcd4 <_dtoa_r+0xb4c>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	220a      	movs	r2, #10
 800b9f6:	4658      	mov	r0, fp
 800b9f8:	f000 faec 	bl	800bfd4 <__multadd>
 800b9fc:	9b00      	ldr	r3, [sp, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	4605      	mov	r5, r0
 800ba02:	dc67      	bgt.n	800bad4 <_dtoa_r+0x94c>
 800ba04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	dc41      	bgt.n	800ba8e <_dtoa_r+0x906>
 800ba0a:	e063      	b.n	800bad4 <_dtoa_r+0x94c>
 800ba0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba12:	e746      	b.n	800b8a2 <_dtoa_r+0x71a>
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	1e5c      	subs	r4, r3, #1
 800ba18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	bfbf      	itttt	lt
 800ba1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba24:	1ae3      	sublt	r3, r4, r3
 800ba26:	bfb4      	ite	lt
 800ba28:	18d2      	addlt	r2, r2, r3
 800ba2a:	1b1c      	subge	r4, r3, r4
 800ba2c:	9b07      	ldr	r3, [sp, #28]
 800ba2e:	bfbc      	itt	lt
 800ba30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba32:	2400      	movlt	r4, #0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfb5      	itete	lt
 800ba38:	eba8 0603 	sublt.w	r6, r8, r3
 800ba3c:	9b07      	ldrge	r3, [sp, #28]
 800ba3e:	2300      	movlt	r3, #0
 800ba40:	4646      	movge	r6, r8
 800ba42:	e730      	b.n	800b8a6 <_dtoa_r+0x71e>
 800ba44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba48:	4646      	mov	r6, r8
 800ba4a:	e735      	b.n	800b8b8 <_dtoa_r+0x730>
 800ba4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba4e:	e75c      	b.n	800b90a <_dtoa_r+0x782>
 800ba50:	2300      	movs	r3, #0
 800ba52:	e788      	b.n	800b966 <_dtoa_r+0x7de>
 800ba54:	3fe00000 	.word	0x3fe00000
 800ba58:	40240000 	.word	0x40240000
 800ba5c:	40140000 	.word	0x40140000
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	e780      	b.n	800b966 <_dtoa_r+0x7de>
 800ba64:	2300      	movs	r3, #0
 800ba66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba68:	e782      	b.n	800b970 <_dtoa_r+0x7e8>
 800ba6a:	d099      	beq.n	800b9a0 <_dtoa_r+0x818>
 800ba6c:	9a08      	ldr	r2, [sp, #32]
 800ba6e:	331c      	adds	r3, #28
 800ba70:	441a      	add	r2, r3
 800ba72:	4498      	add	r8, r3
 800ba74:	441e      	add	r6, r3
 800ba76:	9208      	str	r2, [sp, #32]
 800ba78:	e792      	b.n	800b9a0 <_dtoa_r+0x818>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	e7f6      	b.n	800ba6c <_dtoa_r+0x8e4>
 800ba7e:	9b07      	ldr	r3, [sp, #28]
 800ba80:	9704      	str	r7, [sp, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	dc20      	bgt.n	800bac8 <_dtoa_r+0x940>
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	dd1e      	ble.n	800bacc <_dtoa_r+0x944>
 800ba8e:	9b00      	ldr	r3, [sp, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f47f aec0 	bne.w	800b816 <_dtoa_r+0x68e>
 800ba96:	4621      	mov	r1, r4
 800ba98:	2205      	movs	r2, #5
 800ba9a:	4658      	mov	r0, fp
 800ba9c:	f000 fa9a 	bl	800bfd4 <__multadd>
 800baa0:	4601      	mov	r1, r0
 800baa2:	4604      	mov	r4, r0
 800baa4:	4648      	mov	r0, r9
 800baa6:	f000 fcad 	bl	800c404 <__mcmp>
 800baaa:	2800      	cmp	r0, #0
 800baac:	f77f aeb3 	ble.w	800b816 <_dtoa_r+0x68e>
 800bab0:	4656      	mov	r6, sl
 800bab2:	2331      	movs	r3, #49	@ 0x31
 800bab4:	f806 3b01 	strb.w	r3, [r6], #1
 800bab8:	9b04      	ldr	r3, [sp, #16]
 800baba:	3301      	adds	r3, #1
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	e6ae      	b.n	800b81e <_dtoa_r+0x696>
 800bac0:	9c07      	ldr	r4, [sp, #28]
 800bac2:	9704      	str	r7, [sp, #16]
 800bac4:	4625      	mov	r5, r4
 800bac6:	e7f3      	b.n	800bab0 <_dtoa_r+0x928>
 800bac8:	9b07      	ldr	r3, [sp, #28]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f000 8104 	beq.w	800bcdc <_dtoa_r+0xb54>
 800bad4:	2e00      	cmp	r6, #0
 800bad6:	dd05      	ble.n	800bae4 <_dtoa_r+0x95c>
 800bad8:	4629      	mov	r1, r5
 800bada:	4632      	mov	r2, r6
 800badc:	4658      	mov	r0, fp
 800bade:	f000 fc25 	bl	800c32c <__lshift>
 800bae2:	4605      	mov	r5, r0
 800bae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d05a      	beq.n	800bba0 <_dtoa_r+0xa18>
 800baea:	6869      	ldr	r1, [r5, #4]
 800baec:	4658      	mov	r0, fp
 800baee:	f000 fa0f 	bl	800bf10 <_Balloc>
 800baf2:	4606      	mov	r6, r0
 800baf4:	b928      	cbnz	r0, 800bb02 <_dtoa_r+0x97a>
 800baf6:	4b84      	ldr	r3, [pc, #528]	@ (800bd08 <_dtoa_r+0xb80>)
 800baf8:	4602      	mov	r2, r0
 800bafa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bafe:	f7ff bb5a 	b.w	800b1b6 <_dtoa_r+0x2e>
 800bb02:	692a      	ldr	r2, [r5, #16]
 800bb04:	3202      	adds	r2, #2
 800bb06:	0092      	lsls	r2, r2, #2
 800bb08:	f105 010c 	add.w	r1, r5, #12
 800bb0c:	300c      	adds	r0, #12
 800bb0e:	f001 f845 	bl	800cb9c <memcpy>
 800bb12:	2201      	movs	r2, #1
 800bb14:	4631      	mov	r1, r6
 800bb16:	4658      	mov	r0, fp
 800bb18:	f000 fc08 	bl	800c32c <__lshift>
 800bb1c:	f10a 0301 	add.w	r3, sl, #1
 800bb20:	9307      	str	r3, [sp, #28]
 800bb22:	9b00      	ldr	r3, [sp, #0]
 800bb24:	4453      	add	r3, sl
 800bb26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb28:	9b02      	ldr	r3, [sp, #8]
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	462f      	mov	r7, r5
 800bb30:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb32:	4605      	mov	r5, r0
 800bb34:	9b07      	ldr	r3, [sp, #28]
 800bb36:	4621      	mov	r1, r4
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	4648      	mov	r0, r9
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	f7ff fa9b 	bl	800b078 <quorem>
 800bb42:	4639      	mov	r1, r7
 800bb44:	9002      	str	r0, [sp, #8]
 800bb46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb4a:	4648      	mov	r0, r9
 800bb4c:	f000 fc5a 	bl	800c404 <__mcmp>
 800bb50:	462a      	mov	r2, r5
 800bb52:	9008      	str	r0, [sp, #32]
 800bb54:	4621      	mov	r1, r4
 800bb56:	4658      	mov	r0, fp
 800bb58:	f000 fc70 	bl	800c43c <__mdiff>
 800bb5c:	68c2      	ldr	r2, [r0, #12]
 800bb5e:	4606      	mov	r6, r0
 800bb60:	bb02      	cbnz	r2, 800bba4 <_dtoa_r+0xa1c>
 800bb62:	4601      	mov	r1, r0
 800bb64:	4648      	mov	r0, r9
 800bb66:	f000 fc4d 	bl	800c404 <__mcmp>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4658      	mov	r0, fp
 800bb70:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb72:	f000 fa0d 	bl	800bf90 <_Bfree>
 800bb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb7a:	9e07      	ldr	r6, [sp, #28]
 800bb7c:	ea43 0102 	orr.w	r1, r3, r2
 800bb80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb82:	4319      	orrs	r1, r3
 800bb84:	d110      	bne.n	800bba8 <_dtoa_r+0xa20>
 800bb86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb8a:	d029      	beq.n	800bbe0 <_dtoa_r+0xa58>
 800bb8c:	9b08      	ldr	r3, [sp, #32]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dd02      	ble.n	800bb98 <_dtoa_r+0xa10>
 800bb92:	9b02      	ldr	r3, [sp, #8]
 800bb94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bb98:	9b00      	ldr	r3, [sp, #0]
 800bb9a:	f883 8000 	strb.w	r8, [r3]
 800bb9e:	e63f      	b.n	800b820 <_dtoa_r+0x698>
 800bba0:	4628      	mov	r0, r5
 800bba2:	e7bb      	b.n	800bb1c <_dtoa_r+0x994>
 800bba4:	2201      	movs	r2, #1
 800bba6:	e7e1      	b.n	800bb6c <_dtoa_r+0x9e4>
 800bba8:	9b08      	ldr	r3, [sp, #32]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	db04      	blt.n	800bbb8 <_dtoa_r+0xa30>
 800bbae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	d120      	bne.n	800bbfa <_dtoa_r+0xa72>
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	dded      	ble.n	800bb98 <_dtoa_r+0xa10>
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4658      	mov	r0, fp
 800bbc2:	f000 fbb3 	bl	800c32c <__lshift>
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4681      	mov	r9, r0
 800bbca:	f000 fc1b 	bl	800c404 <__mcmp>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	dc03      	bgt.n	800bbda <_dtoa_r+0xa52>
 800bbd2:	d1e1      	bne.n	800bb98 <_dtoa_r+0xa10>
 800bbd4:	f018 0f01 	tst.w	r8, #1
 800bbd8:	d0de      	beq.n	800bb98 <_dtoa_r+0xa10>
 800bbda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbde:	d1d8      	bne.n	800bb92 <_dtoa_r+0xa0a>
 800bbe0:	9a00      	ldr	r2, [sp, #0]
 800bbe2:	2339      	movs	r3, #57	@ 0x39
 800bbe4:	7013      	strb	r3, [r2, #0]
 800bbe6:	4633      	mov	r3, r6
 800bbe8:	461e      	mov	r6, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbf0:	2a39      	cmp	r2, #57	@ 0x39
 800bbf2:	d052      	beq.n	800bc9a <_dtoa_r+0xb12>
 800bbf4:	3201      	adds	r2, #1
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	e612      	b.n	800b820 <_dtoa_r+0x698>
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	dd07      	ble.n	800bc0e <_dtoa_r+0xa86>
 800bbfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc02:	d0ed      	beq.n	800bbe0 <_dtoa_r+0xa58>
 800bc04:	9a00      	ldr	r2, [sp, #0]
 800bc06:	f108 0301 	add.w	r3, r8, #1
 800bc0a:	7013      	strb	r3, [r2, #0]
 800bc0c:	e608      	b.n	800b820 <_dtoa_r+0x698>
 800bc0e:	9b07      	ldr	r3, [sp, #28]
 800bc10:	9a07      	ldr	r2, [sp, #28]
 800bc12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d028      	beq.n	800bc6e <_dtoa_r+0xae6>
 800bc1c:	4649      	mov	r1, r9
 800bc1e:	2300      	movs	r3, #0
 800bc20:	220a      	movs	r2, #10
 800bc22:	4658      	mov	r0, fp
 800bc24:	f000 f9d6 	bl	800bfd4 <__multadd>
 800bc28:	42af      	cmp	r7, r5
 800bc2a:	4681      	mov	r9, r0
 800bc2c:	f04f 0300 	mov.w	r3, #0
 800bc30:	f04f 020a 	mov.w	r2, #10
 800bc34:	4639      	mov	r1, r7
 800bc36:	4658      	mov	r0, fp
 800bc38:	d107      	bne.n	800bc4a <_dtoa_r+0xac2>
 800bc3a:	f000 f9cb 	bl	800bfd4 <__multadd>
 800bc3e:	4607      	mov	r7, r0
 800bc40:	4605      	mov	r5, r0
 800bc42:	9b07      	ldr	r3, [sp, #28]
 800bc44:	3301      	adds	r3, #1
 800bc46:	9307      	str	r3, [sp, #28]
 800bc48:	e774      	b.n	800bb34 <_dtoa_r+0x9ac>
 800bc4a:	f000 f9c3 	bl	800bfd4 <__multadd>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4607      	mov	r7, r0
 800bc52:	2300      	movs	r3, #0
 800bc54:	220a      	movs	r2, #10
 800bc56:	4658      	mov	r0, fp
 800bc58:	f000 f9bc 	bl	800bfd4 <__multadd>
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	e7f0      	b.n	800bc42 <_dtoa_r+0xaba>
 800bc60:	9b00      	ldr	r3, [sp, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfcc      	ite	gt
 800bc66:	461e      	movgt	r6, r3
 800bc68:	2601      	movle	r6, #1
 800bc6a:	4456      	add	r6, sl
 800bc6c:	2700      	movs	r7, #0
 800bc6e:	4649      	mov	r1, r9
 800bc70:	2201      	movs	r2, #1
 800bc72:	4658      	mov	r0, fp
 800bc74:	f000 fb5a 	bl	800c32c <__lshift>
 800bc78:	4621      	mov	r1, r4
 800bc7a:	4681      	mov	r9, r0
 800bc7c:	f000 fbc2 	bl	800c404 <__mcmp>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	dcb0      	bgt.n	800bbe6 <_dtoa_r+0xa5e>
 800bc84:	d102      	bne.n	800bc8c <_dtoa_r+0xb04>
 800bc86:	f018 0f01 	tst.w	r8, #1
 800bc8a:	d1ac      	bne.n	800bbe6 <_dtoa_r+0xa5e>
 800bc8c:	4633      	mov	r3, r6
 800bc8e:	461e      	mov	r6, r3
 800bc90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc94:	2a30      	cmp	r2, #48	@ 0x30
 800bc96:	d0fa      	beq.n	800bc8e <_dtoa_r+0xb06>
 800bc98:	e5c2      	b.n	800b820 <_dtoa_r+0x698>
 800bc9a:	459a      	cmp	sl, r3
 800bc9c:	d1a4      	bne.n	800bbe8 <_dtoa_r+0xa60>
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	3301      	adds	r3, #1
 800bca2:	9304      	str	r3, [sp, #16]
 800bca4:	2331      	movs	r3, #49	@ 0x31
 800bca6:	f88a 3000 	strb.w	r3, [sl]
 800bcaa:	e5b9      	b.n	800b820 <_dtoa_r+0x698>
 800bcac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd0c <_dtoa_r+0xb84>
 800bcb2:	b11b      	cbz	r3, 800bcbc <_dtoa_r+0xb34>
 800bcb4:	f10a 0308 	add.w	r3, sl, #8
 800bcb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	4650      	mov	r0, sl
 800bcbe:	b019      	add	sp, #100	@ 0x64
 800bcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	f77f ae37 	ble.w	800b93a <_dtoa_r+0x7b2>
 800bccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	e655      	b.n	800b980 <_dtoa_r+0x7f8>
 800bcd4:	9b00      	ldr	r3, [sp, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f77f aed6 	ble.w	800ba88 <_dtoa_r+0x900>
 800bcdc:	4656      	mov	r6, sl
 800bcde:	4621      	mov	r1, r4
 800bce0:	4648      	mov	r0, r9
 800bce2:	f7ff f9c9 	bl	800b078 <quorem>
 800bce6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcea:	f806 8b01 	strb.w	r8, [r6], #1
 800bcee:	9b00      	ldr	r3, [sp, #0]
 800bcf0:	eba6 020a 	sub.w	r2, r6, sl
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	ddb3      	ble.n	800bc60 <_dtoa_r+0xad8>
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	220a      	movs	r2, #10
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f000 f968 	bl	800bfd4 <__multadd>
 800bd04:	4681      	mov	r9, r0
 800bd06:	e7ea      	b.n	800bcde <_dtoa_r+0xb56>
 800bd08:	0800d33f 	.word	0x0800d33f
 800bd0c:	0800d2da 	.word	0x0800d2da

0800bd10 <_free_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4605      	mov	r5, r0
 800bd14:	2900      	cmp	r1, #0
 800bd16:	d041      	beq.n	800bd9c <_free_r+0x8c>
 800bd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd1c:	1f0c      	subs	r4, r1, #4
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	bfb8      	it	lt
 800bd22:	18e4      	addlt	r4, r4, r3
 800bd24:	f000 f8e8 	bl	800bef8 <__malloc_lock>
 800bd28:	4a1d      	ldr	r2, [pc, #116]	@ (800bda0 <_free_r+0x90>)
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	b933      	cbnz	r3, 800bd3c <_free_r+0x2c>
 800bd2e:	6063      	str	r3, [r4, #4]
 800bd30:	6014      	str	r4, [r2, #0]
 800bd32:	4628      	mov	r0, r5
 800bd34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd38:	f000 b8e4 	b.w	800bf04 <__malloc_unlock>
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d908      	bls.n	800bd52 <_free_r+0x42>
 800bd40:	6820      	ldr	r0, [r4, #0]
 800bd42:	1821      	adds	r1, r4, r0
 800bd44:	428b      	cmp	r3, r1
 800bd46:	bf01      	itttt	eq
 800bd48:	6819      	ldreq	r1, [r3, #0]
 800bd4a:	685b      	ldreq	r3, [r3, #4]
 800bd4c:	1809      	addeq	r1, r1, r0
 800bd4e:	6021      	streq	r1, [r4, #0]
 800bd50:	e7ed      	b.n	800bd2e <_free_r+0x1e>
 800bd52:	461a      	mov	r2, r3
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	b10b      	cbz	r3, 800bd5c <_free_r+0x4c>
 800bd58:	42a3      	cmp	r3, r4
 800bd5a:	d9fa      	bls.n	800bd52 <_free_r+0x42>
 800bd5c:	6811      	ldr	r1, [r2, #0]
 800bd5e:	1850      	adds	r0, r2, r1
 800bd60:	42a0      	cmp	r0, r4
 800bd62:	d10b      	bne.n	800bd7c <_free_r+0x6c>
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	4401      	add	r1, r0
 800bd68:	1850      	adds	r0, r2, r1
 800bd6a:	4283      	cmp	r3, r0
 800bd6c:	6011      	str	r1, [r2, #0]
 800bd6e:	d1e0      	bne.n	800bd32 <_free_r+0x22>
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	6053      	str	r3, [r2, #4]
 800bd76:	4408      	add	r0, r1
 800bd78:	6010      	str	r0, [r2, #0]
 800bd7a:	e7da      	b.n	800bd32 <_free_r+0x22>
 800bd7c:	d902      	bls.n	800bd84 <_free_r+0x74>
 800bd7e:	230c      	movs	r3, #12
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	e7d6      	b.n	800bd32 <_free_r+0x22>
 800bd84:	6820      	ldr	r0, [r4, #0]
 800bd86:	1821      	adds	r1, r4, r0
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	bf04      	itt	eq
 800bd8c:	6819      	ldreq	r1, [r3, #0]
 800bd8e:	685b      	ldreq	r3, [r3, #4]
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	bf04      	itt	eq
 800bd94:	1809      	addeq	r1, r1, r0
 800bd96:	6021      	streq	r1, [r4, #0]
 800bd98:	6054      	str	r4, [r2, #4]
 800bd9a:	e7ca      	b.n	800bd32 <_free_r+0x22>
 800bd9c:	bd38      	pop	{r3, r4, r5, pc}
 800bd9e:	bf00      	nop
 800bda0:	2000085c 	.word	0x2000085c

0800bda4 <malloc>:
 800bda4:	4b02      	ldr	r3, [pc, #8]	@ (800bdb0 <malloc+0xc>)
 800bda6:	4601      	mov	r1, r0
 800bda8:	6818      	ldr	r0, [r3, #0]
 800bdaa:	f000 b825 	b.w	800bdf8 <_malloc_r>
 800bdae:	bf00      	nop
 800bdb0:	200000d8 	.word	0x200000d8

0800bdb4 <sbrk_aligned>:
 800bdb4:	b570      	push	{r4, r5, r6, lr}
 800bdb6:	4e0f      	ldr	r6, [pc, #60]	@ (800bdf4 <sbrk_aligned+0x40>)
 800bdb8:	460c      	mov	r4, r1
 800bdba:	6831      	ldr	r1, [r6, #0]
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	b911      	cbnz	r1, 800bdc6 <sbrk_aligned+0x12>
 800bdc0:	f000 fedc 	bl	800cb7c <_sbrk_r>
 800bdc4:	6030      	str	r0, [r6, #0]
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f000 fed7 	bl	800cb7c <_sbrk_r>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	d103      	bne.n	800bdda <sbrk_aligned+0x26>
 800bdd2:	f04f 34ff 	mov.w	r4, #4294967295
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	bd70      	pop	{r4, r5, r6, pc}
 800bdda:	1cc4      	adds	r4, r0, #3
 800bddc:	f024 0403 	bic.w	r4, r4, #3
 800bde0:	42a0      	cmp	r0, r4
 800bde2:	d0f8      	beq.n	800bdd6 <sbrk_aligned+0x22>
 800bde4:	1a21      	subs	r1, r4, r0
 800bde6:	4628      	mov	r0, r5
 800bde8:	f000 fec8 	bl	800cb7c <_sbrk_r>
 800bdec:	3001      	adds	r0, #1
 800bdee:	d1f2      	bne.n	800bdd6 <sbrk_aligned+0x22>
 800bdf0:	e7ef      	b.n	800bdd2 <sbrk_aligned+0x1e>
 800bdf2:	bf00      	nop
 800bdf4:	20000858 	.word	0x20000858

0800bdf8 <_malloc_r>:
 800bdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdfc:	1ccd      	adds	r5, r1, #3
 800bdfe:	f025 0503 	bic.w	r5, r5, #3
 800be02:	3508      	adds	r5, #8
 800be04:	2d0c      	cmp	r5, #12
 800be06:	bf38      	it	cc
 800be08:	250c      	movcc	r5, #12
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	4606      	mov	r6, r0
 800be0e:	db01      	blt.n	800be14 <_malloc_r+0x1c>
 800be10:	42a9      	cmp	r1, r5
 800be12:	d904      	bls.n	800be1e <_malloc_r+0x26>
 800be14:	230c      	movs	r3, #12
 800be16:	6033      	str	r3, [r6, #0]
 800be18:	2000      	movs	r0, #0
 800be1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bef4 <_malloc_r+0xfc>
 800be22:	f000 f869 	bl	800bef8 <__malloc_lock>
 800be26:	f8d8 3000 	ldr.w	r3, [r8]
 800be2a:	461c      	mov	r4, r3
 800be2c:	bb44      	cbnz	r4, 800be80 <_malloc_r+0x88>
 800be2e:	4629      	mov	r1, r5
 800be30:	4630      	mov	r0, r6
 800be32:	f7ff ffbf 	bl	800bdb4 <sbrk_aligned>
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	4604      	mov	r4, r0
 800be3a:	d158      	bne.n	800beee <_malloc_r+0xf6>
 800be3c:	f8d8 4000 	ldr.w	r4, [r8]
 800be40:	4627      	mov	r7, r4
 800be42:	2f00      	cmp	r7, #0
 800be44:	d143      	bne.n	800bece <_malloc_r+0xd6>
 800be46:	2c00      	cmp	r4, #0
 800be48:	d04b      	beq.n	800bee2 <_malloc_r+0xea>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	4639      	mov	r1, r7
 800be4e:	4630      	mov	r0, r6
 800be50:	eb04 0903 	add.w	r9, r4, r3
 800be54:	f000 fe92 	bl	800cb7c <_sbrk_r>
 800be58:	4581      	cmp	r9, r0
 800be5a:	d142      	bne.n	800bee2 <_malloc_r+0xea>
 800be5c:	6821      	ldr	r1, [r4, #0]
 800be5e:	1a6d      	subs	r5, r5, r1
 800be60:	4629      	mov	r1, r5
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ffa6 	bl	800bdb4 <sbrk_aligned>
 800be68:	3001      	adds	r0, #1
 800be6a:	d03a      	beq.n	800bee2 <_malloc_r+0xea>
 800be6c:	6823      	ldr	r3, [r4, #0]
 800be6e:	442b      	add	r3, r5
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	f8d8 3000 	ldr.w	r3, [r8]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	bb62      	cbnz	r2, 800bed4 <_malloc_r+0xdc>
 800be7a:	f8c8 7000 	str.w	r7, [r8]
 800be7e:	e00f      	b.n	800bea0 <_malloc_r+0xa8>
 800be80:	6822      	ldr	r2, [r4, #0]
 800be82:	1b52      	subs	r2, r2, r5
 800be84:	d420      	bmi.n	800bec8 <_malloc_r+0xd0>
 800be86:	2a0b      	cmp	r2, #11
 800be88:	d917      	bls.n	800beba <_malloc_r+0xc2>
 800be8a:	1961      	adds	r1, r4, r5
 800be8c:	42a3      	cmp	r3, r4
 800be8e:	6025      	str	r5, [r4, #0]
 800be90:	bf18      	it	ne
 800be92:	6059      	strne	r1, [r3, #4]
 800be94:	6863      	ldr	r3, [r4, #4]
 800be96:	bf08      	it	eq
 800be98:	f8c8 1000 	streq.w	r1, [r8]
 800be9c:	5162      	str	r2, [r4, r5]
 800be9e:	604b      	str	r3, [r1, #4]
 800bea0:	4630      	mov	r0, r6
 800bea2:	f000 f82f 	bl	800bf04 <__malloc_unlock>
 800bea6:	f104 000b 	add.w	r0, r4, #11
 800beaa:	1d23      	adds	r3, r4, #4
 800beac:	f020 0007 	bic.w	r0, r0, #7
 800beb0:	1ac2      	subs	r2, r0, r3
 800beb2:	bf1c      	itt	ne
 800beb4:	1a1b      	subne	r3, r3, r0
 800beb6:	50a3      	strne	r3, [r4, r2]
 800beb8:	e7af      	b.n	800be1a <_malloc_r+0x22>
 800beba:	6862      	ldr	r2, [r4, #4]
 800bebc:	42a3      	cmp	r3, r4
 800bebe:	bf0c      	ite	eq
 800bec0:	f8c8 2000 	streq.w	r2, [r8]
 800bec4:	605a      	strne	r2, [r3, #4]
 800bec6:	e7eb      	b.n	800bea0 <_malloc_r+0xa8>
 800bec8:	4623      	mov	r3, r4
 800beca:	6864      	ldr	r4, [r4, #4]
 800becc:	e7ae      	b.n	800be2c <_malloc_r+0x34>
 800bece:	463c      	mov	r4, r7
 800bed0:	687f      	ldr	r7, [r7, #4]
 800bed2:	e7b6      	b.n	800be42 <_malloc_r+0x4a>
 800bed4:	461a      	mov	r2, r3
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	42a3      	cmp	r3, r4
 800beda:	d1fb      	bne.n	800bed4 <_malloc_r+0xdc>
 800bedc:	2300      	movs	r3, #0
 800bede:	6053      	str	r3, [r2, #4]
 800bee0:	e7de      	b.n	800bea0 <_malloc_r+0xa8>
 800bee2:	230c      	movs	r3, #12
 800bee4:	6033      	str	r3, [r6, #0]
 800bee6:	4630      	mov	r0, r6
 800bee8:	f000 f80c 	bl	800bf04 <__malloc_unlock>
 800beec:	e794      	b.n	800be18 <_malloc_r+0x20>
 800beee:	6005      	str	r5, [r0, #0]
 800bef0:	e7d6      	b.n	800bea0 <_malloc_r+0xa8>
 800bef2:	bf00      	nop
 800bef4:	2000085c 	.word	0x2000085c

0800bef8 <__malloc_lock>:
 800bef8:	4801      	ldr	r0, [pc, #4]	@ (800bf00 <__malloc_lock+0x8>)
 800befa:	f7ff b89c 	b.w	800b036 <__retarget_lock_acquire_recursive>
 800befe:	bf00      	nop
 800bf00:	20000854 	.word	0x20000854

0800bf04 <__malloc_unlock>:
 800bf04:	4801      	ldr	r0, [pc, #4]	@ (800bf0c <__malloc_unlock+0x8>)
 800bf06:	f7ff b897 	b.w	800b038 <__retarget_lock_release_recursive>
 800bf0a:	bf00      	nop
 800bf0c:	20000854 	.word	0x20000854

0800bf10 <_Balloc>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	69c6      	ldr	r6, [r0, #28]
 800bf14:	4604      	mov	r4, r0
 800bf16:	460d      	mov	r5, r1
 800bf18:	b976      	cbnz	r6, 800bf38 <_Balloc+0x28>
 800bf1a:	2010      	movs	r0, #16
 800bf1c:	f7ff ff42 	bl	800bda4 <malloc>
 800bf20:	4602      	mov	r2, r0
 800bf22:	61e0      	str	r0, [r4, #28]
 800bf24:	b920      	cbnz	r0, 800bf30 <_Balloc+0x20>
 800bf26:	4b18      	ldr	r3, [pc, #96]	@ (800bf88 <_Balloc+0x78>)
 800bf28:	4818      	ldr	r0, [pc, #96]	@ (800bf8c <_Balloc+0x7c>)
 800bf2a:	216b      	movs	r1, #107	@ 0x6b
 800bf2c:	f7ff f886 	bl	800b03c <__assert_func>
 800bf30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf34:	6006      	str	r6, [r0, #0]
 800bf36:	60c6      	str	r6, [r0, #12]
 800bf38:	69e6      	ldr	r6, [r4, #28]
 800bf3a:	68f3      	ldr	r3, [r6, #12]
 800bf3c:	b183      	cbz	r3, 800bf60 <_Balloc+0x50>
 800bf3e:	69e3      	ldr	r3, [r4, #28]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf46:	b9b8      	cbnz	r0, 800bf78 <_Balloc+0x68>
 800bf48:	2101      	movs	r1, #1
 800bf4a:	fa01 f605 	lsl.w	r6, r1, r5
 800bf4e:	1d72      	adds	r2, r6, #5
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	4620      	mov	r0, r4
 800bf54:	f000 fe37 	bl	800cbc6 <_calloc_r>
 800bf58:	b160      	cbz	r0, 800bf74 <_Balloc+0x64>
 800bf5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf5e:	e00e      	b.n	800bf7e <_Balloc+0x6e>
 800bf60:	2221      	movs	r2, #33	@ 0x21
 800bf62:	2104      	movs	r1, #4
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fe2e 	bl	800cbc6 <_calloc_r>
 800bf6a:	69e3      	ldr	r3, [r4, #28]
 800bf6c:	60f0      	str	r0, [r6, #12]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e4      	bne.n	800bf3e <_Balloc+0x2e>
 800bf74:	2000      	movs	r0, #0
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	6802      	ldr	r2, [r0, #0]
 800bf7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf84:	e7f7      	b.n	800bf76 <_Balloc+0x66>
 800bf86:	bf00      	nop
 800bf88:	0800d22d 	.word	0x0800d22d
 800bf8c:	0800d350 	.word	0x0800d350

0800bf90 <_Bfree>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	69c6      	ldr	r6, [r0, #28]
 800bf94:	4605      	mov	r5, r0
 800bf96:	460c      	mov	r4, r1
 800bf98:	b976      	cbnz	r6, 800bfb8 <_Bfree+0x28>
 800bf9a:	2010      	movs	r0, #16
 800bf9c:	f7ff ff02 	bl	800bda4 <malloc>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	61e8      	str	r0, [r5, #28]
 800bfa4:	b920      	cbnz	r0, 800bfb0 <_Bfree+0x20>
 800bfa6:	4b09      	ldr	r3, [pc, #36]	@ (800bfcc <_Bfree+0x3c>)
 800bfa8:	4809      	ldr	r0, [pc, #36]	@ (800bfd0 <_Bfree+0x40>)
 800bfaa:	218f      	movs	r1, #143	@ 0x8f
 800bfac:	f7ff f846 	bl	800b03c <__assert_func>
 800bfb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfb4:	6006      	str	r6, [r0, #0]
 800bfb6:	60c6      	str	r6, [r0, #12]
 800bfb8:	b13c      	cbz	r4, 800bfca <_Bfree+0x3a>
 800bfba:	69eb      	ldr	r3, [r5, #28]
 800bfbc:	6862      	ldr	r2, [r4, #4]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfc4:	6021      	str	r1, [r4, #0]
 800bfc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	0800d22d 	.word	0x0800d22d
 800bfd0:	0800d350 	.word	0x0800d350

0800bfd4 <__multadd>:
 800bfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd8:	690d      	ldr	r5, [r1, #16]
 800bfda:	4607      	mov	r7, r0
 800bfdc:	460c      	mov	r4, r1
 800bfde:	461e      	mov	r6, r3
 800bfe0:	f101 0c14 	add.w	ip, r1, #20
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	f8dc 3000 	ldr.w	r3, [ip]
 800bfea:	b299      	uxth	r1, r3
 800bfec:	fb02 6101 	mla	r1, r2, r1, r6
 800bff0:	0c1e      	lsrs	r6, r3, #16
 800bff2:	0c0b      	lsrs	r3, r1, #16
 800bff4:	fb02 3306 	mla	r3, r2, r6, r3
 800bff8:	b289      	uxth	r1, r1
 800bffa:	3001      	adds	r0, #1
 800bffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c000:	4285      	cmp	r5, r0
 800c002:	f84c 1b04 	str.w	r1, [ip], #4
 800c006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c00a:	dcec      	bgt.n	800bfe6 <__multadd+0x12>
 800c00c:	b30e      	cbz	r6, 800c052 <__multadd+0x7e>
 800c00e:	68a3      	ldr	r3, [r4, #8]
 800c010:	42ab      	cmp	r3, r5
 800c012:	dc19      	bgt.n	800c048 <__multadd+0x74>
 800c014:	6861      	ldr	r1, [r4, #4]
 800c016:	4638      	mov	r0, r7
 800c018:	3101      	adds	r1, #1
 800c01a:	f7ff ff79 	bl	800bf10 <_Balloc>
 800c01e:	4680      	mov	r8, r0
 800c020:	b928      	cbnz	r0, 800c02e <__multadd+0x5a>
 800c022:	4602      	mov	r2, r0
 800c024:	4b0c      	ldr	r3, [pc, #48]	@ (800c058 <__multadd+0x84>)
 800c026:	480d      	ldr	r0, [pc, #52]	@ (800c05c <__multadd+0x88>)
 800c028:	21ba      	movs	r1, #186	@ 0xba
 800c02a:	f7ff f807 	bl	800b03c <__assert_func>
 800c02e:	6922      	ldr	r2, [r4, #16]
 800c030:	3202      	adds	r2, #2
 800c032:	f104 010c 	add.w	r1, r4, #12
 800c036:	0092      	lsls	r2, r2, #2
 800c038:	300c      	adds	r0, #12
 800c03a:	f000 fdaf 	bl	800cb9c <memcpy>
 800c03e:	4621      	mov	r1, r4
 800c040:	4638      	mov	r0, r7
 800c042:	f7ff ffa5 	bl	800bf90 <_Bfree>
 800c046:	4644      	mov	r4, r8
 800c048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c04c:	3501      	adds	r5, #1
 800c04e:	615e      	str	r6, [r3, #20]
 800c050:	6125      	str	r5, [r4, #16]
 800c052:	4620      	mov	r0, r4
 800c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c058:	0800d33f 	.word	0x0800d33f
 800c05c:	0800d350 	.word	0x0800d350

0800c060 <__hi0bits>:
 800c060:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c064:	4603      	mov	r3, r0
 800c066:	bf36      	itet	cc
 800c068:	0403      	lslcc	r3, r0, #16
 800c06a:	2000      	movcs	r0, #0
 800c06c:	2010      	movcc	r0, #16
 800c06e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c072:	bf3c      	itt	cc
 800c074:	021b      	lslcc	r3, r3, #8
 800c076:	3008      	addcc	r0, #8
 800c078:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c07c:	bf3c      	itt	cc
 800c07e:	011b      	lslcc	r3, r3, #4
 800c080:	3004      	addcc	r0, #4
 800c082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c086:	bf3c      	itt	cc
 800c088:	009b      	lslcc	r3, r3, #2
 800c08a:	3002      	addcc	r0, #2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	db05      	blt.n	800c09c <__hi0bits+0x3c>
 800c090:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c094:	f100 0001 	add.w	r0, r0, #1
 800c098:	bf08      	it	eq
 800c09a:	2020      	moveq	r0, #32
 800c09c:	4770      	bx	lr

0800c09e <__lo0bits>:
 800c09e:	6803      	ldr	r3, [r0, #0]
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	f013 0007 	ands.w	r0, r3, #7
 800c0a6:	d00b      	beq.n	800c0c0 <__lo0bits+0x22>
 800c0a8:	07d9      	lsls	r1, r3, #31
 800c0aa:	d421      	bmi.n	800c0f0 <__lo0bits+0x52>
 800c0ac:	0798      	lsls	r0, r3, #30
 800c0ae:	bf49      	itett	mi
 800c0b0:	085b      	lsrmi	r3, r3, #1
 800c0b2:	089b      	lsrpl	r3, r3, #2
 800c0b4:	2001      	movmi	r0, #1
 800c0b6:	6013      	strmi	r3, [r2, #0]
 800c0b8:	bf5c      	itt	pl
 800c0ba:	6013      	strpl	r3, [r2, #0]
 800c0bc:	2002      	movpl	r0, #2
 800c0be:	4770      	bx	lr
 800c0c0:	b299      	uxth	r1, r3
 800c0c2:	b909      	cbnz	r1, 800c0c8 <__lo0bits+0x2a>
 800c0c4:	0c1b      	lsrs	r3, r3, #16
 800c0c6:	2010      	movs	r0, #16
 800c0c8:	b2d9      	uxtb	r1, r3
 800c0ca:	b909      	cbnz	r1, 800c0d0 <__lo0bits+0x32>
 800c0cc:	3008      	adds	r0, #8
 800c0ce:	0a1b      	lsrs	r3, r3, #8
 800c0d0:	0719      	lsls	r1, r3, #28
 800c0d2:	bf04      	itt	eq
 800c0d4:	091b      	lsreq	r3, r3, #4
 800c0d6:	3004      	addeq	r0, #4
 800c0d8:	0799      	lsls	r1, r3, #30
 800c0da:	bf04      	itt	eq
 800c0dc:	089b      	lsreq	r3, r3, #2
 800c0de:	3002      	addeq	r0, #2
 800c0e0:	07d9      	lsls	r1, r3, #31
 800c0e2:	d403      	bmi.n	800c0ec <__lo0bits+0x4e>
 800c0e4:	085b      	lsrs	r3, r3, #1
 800c0e6:	f100 0001 	add.w	r0, r0, #1
 800c0ea:	d003      	beq.n	800c0f4 <__lo0bits+0x56>
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	4770      	bx	lr
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	4770      	bx	lr
 800c0f4:	2020      	movs	r0, #32
 800c0f6:	4770      	bx	lr

0800c0f8 <__i2b>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	f7ff ff07 	bl	800bf10 <_Balloc>
 800c102:	4602      	mov	r2, r0
 800c104:	b928      	cbnz	r0, 800c112 <__i2b+0x1a>
 800c106:	4b05      	ldr	r3, [pc, #20]	@ (800c11c <__i2b+0x24>)
 800c108:	4805      	ldr	r0, [pc, #20]	@ (800c120 <__i2b+0x28>)
 800c10a:	f240 1145 	movw	r1, #325	@ 0x145
 800c10e:	f7fe ff95 	bl	800b03c <__assert_func>
 800c112:	2301      	movs	r3, #1
 800c114:	6144      	str	r4, [r0, #20]
 800c116:	6103      	str	r3, [r0, #16]
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	bf00      	nop
 800c11c:	0800d33f 	.word	0x0800d33f
 800c120:	0800d350 	.word	0x0800d350

0800c124 <__multiply>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	4614      	mov	r4, r2
 800c12a:	690a      	ldr	r2, [r1, #16]
 800c12c:	6923      	ldr	r3, [r4, #16]
 800c12e:	429a      	cmp	r2, r3
 800c130:	bfa8      	it	ge
 800c132:	4623      	movge	r3, r4
 800c134:	460f      	mov	r7, r1
 800c136:	bfa4      	itt	ge
 800c138:	460c      	movge	r4, r1
 800c13a:	461f      	movge	r7, r3
 800c13c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c140:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c144:	68a3      	ldr	r3, [r4, #8]
 800c146:	6861      	ldr	r1, [r4, #4]
 800c148:	eb0a 0609 	add.w	r6, sl, r9
 800c14c:	42b3      	cmp	r3, r6
 800c14e:	b085      	sub	sp, #20
 800c150:	bfb8      	it	lt
 800c152:	3101      	addlt	r1, #1
 800c154:	f7ff fedc 	bl	800bf10 <_Balloc>
 800c158:	b930      	cbnz	r0, 800c168 <__multiply+0x44>
 800c15a:	4602      	mov	r2, r0
 800c15c:	4b44      	ldr	r3, [pc, #272]	@ (800c270 <__multiply+0x14c>)
 800c15e:	4845      	ldr	r0, [pc, #276]	@ (800c274 <__multiply+0x150>)
 800c160:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c164:	f7fe ff6a 	bl	800b03c <__assert_func>
 800c168:	f100 0514 	add.w	r5, r0, #20
 800c16c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c170:	462b      	mov	r3, r5
 800c172:	2200      	movs	r2, #0
 800c174:	4543      	cmp	r3, r8
 800c176:	d321      	bcc.n	800c1bc <__multiply+0x98>
 800c178:	f107 0114 	add.w	r1, r7, #20
 800c17c:	f104 0214 	add.w	r2, r4, #20
 800c180:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c184:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c188:	9302      	str	r3, [sp, #8]
 800c18a:	1b13      	subs	r3, r2, r4
 800c18c:	3b15      	subs	r3, #21
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	3304      	adds	r3, #4
 800c194:	f104 0715 	add.w	r7, r4, #21
 800c198:	42ba      	cmp	r2, r7
 800c19a:	bf38      	it	cc
 800c19c:	2304      	movcc	r3, #4
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	9b02      	ldr	r3, [sp, #8]
 800c1a2:	9103      	str	r1, [sp, #12]
 800c1a4:	428b      	cmp	r3, r1
 800c1a6:	d80c      	bhi.n	800c1c2 <__multiply+0x9e>
 800c1a8:	2e00      	cmp	r6, #0
 800c1aa:	dd03      	ble.n	800c1b4 <__multiply+0x90>
 800c1ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d05b      	beq.n	800c26c <__multiply+0x148>
 800c1b4:	6106      	str	r6, [r0, #16]
 800c1b6:	b005      	add	sp, #20
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1bc:	f843 2b04 	str.w	r2, [r3], #4
 800c1c0:	e7d8      	b.n	800c174 <__multiply+0x50>
 800c1c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1c6:	f1ba 0f00 	cmp.w	sl, #0
 800c1ca:	d024      	beq.n	800c216 <__multiply+0xf2>
 800c1cc:	f104 0e14 	add.w	lr, r4, #20
 800c1d0:	46a9      	mov	r9, r5
 800c1d2:	f04f 0c00 	mov.w	ip, #0
 800c1d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1da:	f8d9 3000 	ldr.w	r3, [r9]
 800c1de:	fa1f fb87 	uxth.w	fp, r7
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1ec:	f8d9 7000 	ldr.w	r7, [r9]
 800c1f0:	4463      	add	r3, ip
 800c1f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c204:	4572      	cmp	r2, lr
 800c206:	f849 3b04 	str.w	r3, [r9], #4
 800c20a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c20e:	d8e2      	bhi.n	800c1d6 <__multiply+0xb2>
 800c210:	9b01      	ldr	r3, [sp, #4]
 800c212:	f845 c003 	str.w	ip, [r5, r3]
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c21c:	3104      	adds	r1, #4
 800c21e:	f1b9 0f00 	cmp.w	r9, #0
 800c222:	d021      	beq.n	800c268 <__multiply+0x144>
 800c224:	682b      	ldr	r3, [r5, #0]
 800c226:	f104 0c14 	add.w	ip, r4, #20
 800c22a:	46ae      	mov	lr, r5
 800c22c:	f04f 0a00 	mov.w	sl, #0
 800c230:	f8bc b000 	ldrh.w	fp, [ip]
 800c234:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c238:	fb09 770b 	mla	r7, r9, fp, r7
 800c23c:	4457      	add	r7, sl
 800c23e:	b29b      	uxth	r3, r3
 800c240:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c244:	f84e 3b04 	str.w	r3, [lr], #4
 800c248:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c24c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c250:	f8be 3000 	ldrh.w	r3, [lr]
 800c254:	fb09 330a 	mla	r3, r9, sl, r3
 800c258:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c25c:	4562      	cmp	r2, ip
 800c25e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c262:	d8e5      	bhi.n	800c230 <__multiply+0x10c>
 800c264:	9f01      	ldr	r7, [sp, #4]
 800c266:	51eb      	str	r3, [r5, r7]
 800c268:	3504      	adds	r5, #4
 800c26a:	e799      	b.n	800c1a0 <__multiply+0x7c>
 800c26c:	3e01      	subs	r6, #1
 800c26e:	e79b      	b.n	800c1a8 <__multiply+0x84>
 800c270:	0800d33f 	.word	0x0800d33f
 800c274:	0800d350 	.word	0x0800d350

0800c278 <__pow5mult>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4615      	mov	r5, r2
 800c27e:	f012 0203 	ands.w	r2, r2, #3
 800c282:	4607      	mov	r7, r0
 800c284:	460e      	mov	r6, r1
 800c286:	d007      	beq.n	800c298 <__pow5mult+0x20>
 800c288:	4c25      	ldr	r4, [pc, #148]	@ (800c320 <__pow5mult+0xa8>)
 800c28a:	3a01      	subs	r2, #1
 800c28c:	2300      	movs	r3, #0
 800c28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c292:	f7ff fe9f 	bl	800bfd4 <__multadd>
 800c296:	4606      	mov	r6, r0
 800c298:	10ad      	asrs	r5, r5, #2
 800c29a:	d03d      	beq.n	800c318 <__pow5mult+0xa0>
 800c29c:	69fc      	ldr	r4, [r7, #28]
 800c29e:	b97c      	cbnz	r4, 800c2c0 <__pow5mult+0x48>
 800c2a0:	2010      	movs	r0, #16
 800c2a2:	f7ff fd7f 	bl	800bda4 <malloc>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	61f8      	str	r0, [r7, #28]
 800c2aa:	b928      	cbnz	r0, 800c2b8 <__pow5mult+0x40>
 800c2ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c324 <__pow5mult+0xac>)
 800c2ae:	481e      	ldr	r0, [pc, #120]	@ (800c328 <__pow5mult+0xb0>)
 800c2b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2b4:	f7fe fec2 	bl	800b03c <__assert_func>
 800c2b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2bc:	6004      	str	r4, [r0, #0]
 800c2be:	60c4      	str	r4, [r0, #12]
 800c2c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2c8:	b94c      	cbnz	r4, 800c2de <__pow5mult+0x66>
 800c2ca:	f240 2171 	movw	r1, #625	@ 0x271
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	f7ff ff12 	bl	800c0f8 <__i2b>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2da:	4604      	mov	r4, r0
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	f04f 0900 	mov.w	r9, #0
 800c2e2:	07eb      	lsls	r3, r5, #31
 800c2e4:	d50a      	bpl.n	800c2fc <__pow5mult+0x84>
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	4638      	mov	r0, r7
 800c2ec:	f7ff ff1a 	bl	800c124 <__multiply>
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f7ff fe4b 	bl	800bf90 <_Bfree>
 800c2fa:	4646      	mov	r6, r8
 800c2fc:	106d      	asrs	r5, r5, #1
 800c2fe:	d00b      	beq.n	800c318 <__pow5mult+0xa0>
 800c300:	6820      	ldr	r0, [r4, #0]
 800c302:	b938      	cbnz	r0, 800c314 <__pow5mult+0x9c>
 800c304:	4622      	mov	r2, r4
 800c306:	4621      	mov	r1, r4
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ff0b 	bl	800c124 <__multiply>
 800c30e:	6020      	str	r0, [r4, #0]
 800c310:	f8c0 9000 	str.w	r9, [r0]
 800c314:	4604      	mov	r4, r0
 800c316:	e7e4      	b.n	800c2e2 <__pow5mult+0x6a>
 800c318:	4630      	mov	r0, r6
 800c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31e:	bf00      	nop
 800c320:	0800d3ac 	.word	0x0800d3ac
 800c324:	0800d22d 	.word	0x0800d22d
 800c328:	0800d350 	.word	0x0800d350

0800c32c <__lshift>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	6849      	ldr	r1, [r1, #4]
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	4607      	mov	r7, r0
 800c33e:	4691      	mov	r9, r2
 800c340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c344:	f108 0601 	add.w	r6, r8, #1
 800c348:	42b3      	cmp	r3, r6
 800c34a:	db0b      	blt.n	800c364 <__lshift+0x38>
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff fddf 	bl	800bf10 <_Balloc>
 800c352:	4605      	mov	r5, r0
 800c354:	b948      	cbnz	r0, 800c36a <__lshift+0x3e>
 800c356:	4602      	mov	r2, r0
 800c358:	4b28      	ldr	r3, [pc, #160]	@ (800c3fc <__lshift+0xd0>)
 800c35a:	4829      	ldr	r0, [pc, #164]	@ (800c400 <__lshift+0xd4>)
 800c35c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c360:	f7fe fe6c 	bl	800b03c <__assert_func>
 800c364:	3101      	adds	r1, #1
 800c366:	005b      	lsls	r3, r3, #1
 800c368:	e7ee      	b.n	800c348 <__lshift+0x1c>
 800c36a:	2300      	movs	r3, #0
 800c36c:	f100 0114 	add.w	r1, r0, #20
 800c370:	f100 0210 	add.w	r2, r0, #16
 800c374:	4618      	mov	r0, r3
 800c376:	4553      	cmp	r3, sl
 800c378:	db33      	blt.n	800c3e2 <__lshift+0xb6>
 800c37a:	6920      	ldr	r0, [r4, #16]
 800c37c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c380:	f104 0314 	add.w	r3, r4, #20
 800c384:	f019 091f 	ands.w	r9, r9, #31
 800c388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c38c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c390:	d02b      	beq.n	800c3ea <__lshift+0xbe>
 800c392:	f1c9 0e20 	rsb	lr, r9, #32
 800c396:	468a      	mov	sl, r1
 800c398:	2200      	movs	r2, #0
 800c39a:	6818      	ldr	r0, [r3, #0]
 800c39c:	fa00 f009 	lsl.w	r0, r0, r9
 800c3a0:	4310      	orrs	r0, r2
 800c3a2:	f84a 0b04 	str.w	r0, [sl], #4
 800c3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3aa:	459c      	cmp	ip, r3
 800c3ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3b0:	d8f3      	bhi.n	800c39a <__lshift+0x6e>
 800c3b2:	ebac 0304 	sub.w	r3, ip, r4
 800c3b6:	3b15      	subs	r3, #21
 800c3b8:	f023 0303 	bic.w	r3, r3, #3
 800c3bc:	3304      	adds	r3, #4
 800c3be:	f104 0015 	add.w	r0, r4, #21
 800c3c2:	4584      	cmp	ip, r0
 800c3c4:	bf38      	it	cc
 800c3c6:	2304      	movcc	r3, #4
 800c3c8:	50ca      	str	r2, [r1, r3]
 800c3ca:	b10a      	cbz	r2, 800c3d0 <__lshift+0xa4>
 800c3cc:	f108 0602 	add.w	r6, r8, #2
 800c3d0:	3e01      	subs	r6, #1
 800c3d2:	4638      	mov	r0, r7
 800c3d4:	612e      	str	r6, [r5, #16]
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	f7ff fdda 	bl	800bf90 <_Bfree>
 800c3dc:	4628      	mov	r0, r5
 800c3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	e7c5      	b.n	800c376 <__lshift+0x4a>
 800c3ea:	3904      	subs	r1, #4
 800c3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3f4:	459c      	cmp	ip, r3
 800c3f6:	d8f9      	bhi.n	800c3ec <__lshift+0xc0>
 800c3f8:	e7ea      	b.n	800c3d0 <__lshift+0xa4>
 800c3fa:	bf00      	nop
 800c3fc:	0800d33f 	.word	0x0800d33f
 800c400:	0800d350 	.word	0x0800d350

0800c404 <__mcmp>:
 800c404:	690a      	ldr	r2, [r1, #16]
 800c406:	4603      	mov	r3, r0
 800c408:	6900      	ldr	r0, [r0, #16]
 800c40a:	1a80      	subs	r0, r0, r2
 800c40c:	b530      	push	{r4, r5, lr}
 800c40e:	d10e      	bne.n	800c42e <__mcmp+0x2a>
 800c410:	3314      	adds	r3, #20
 800c412:	3114      	adds	r1, #20
 800c414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c41c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c424:	4295      	cmp	r5, r2
 800c426:	d003      	beq.n	800c430 <__mcmp+0x2c>
 800c428:	d205      	bcs.n	800c436 <__mcmp+0x32>
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295
 800c42e:	bd30      	pop	{r4, r5, pc}
 800c430:	42a3      	cmp	r3, r4
 800c432:	d3f3      	bcc.n	800c41c <__mcmp+0x18>
 800c434:	e7fb      	b.n	800c42e <__mcmp+0x2a>
 800c436:	2001      	movs	r0, #1
 800c438:	e7f9      	b.n	800c42e <__mcmp+0x2a>
	...

0800c43c <__mdiff>:
 800c43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c440:	4689      	mov	r9, r1
 800c442:	4606      	mov	r6, r0
 800c444:	4611      	mov	r1, r2
 800c446:	4648      	mov	r0, r9
 800c448:	4614      	mov	r4, r2
 800c44a:	f7ff ffdb 	bl	800c404 <__mcmp>
 800c44e:	1e05      	subs	r5, r0, #0
 800c450:	d112      	bne.n	800c478 <__mdiff+0x3c>
 800c452:	4629      	mov	r1, r5
 800c454:	4630      	mov	r0, r6
 800c456:	f7ff fd5b 	bl	800bf10 <_Balloc>
 800c45a:	4602      	mov	r2, r0
 800c45c:	b928      	cbnz	r0, 800c46a <__mdiff+0x2e>
 800c45e:	4b3f      	ldr	r3, [pc, #252]	@ (800c55c <__mdiff+0x120>)
 800c460:	f240 2137 	movw	r1, #567	@ 0x237
 800c464:	483e      	ldr	r0, [pc, #248]	@ (800c560 <__mdiff+0x124>)
 800c466:	f7fe fde9 	bl	800b03c <__assert_func>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c470:	4610      	mov	r0, r2
 800c472:	b003      	add	sp, #12
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	bfbc      	itt	lt
 800c47a:	464b      	movlt	r3, r9
 800c47c:	46a1      	movlt	r9, r4
 800c47e:	4630      	mov	r0, r6
 800c480:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c484:	bfba      	itte	lt
 800c486:	461c      	movlt	r4, r3
 800c488:	2501      	movlt	r5, #1
 800c48a:	2500      	movge	r5, #0
 800c48c:	f7ff fd40 	bl	800bf10 <_Balloc>
 800c490:	4602      	mov	r2, r0
 800c492:	b918      	cbnz	r0, 800c49c <__mdiff+0x60>
 800c494:	4b31      	ldr	r3, [pc, #196]	@ (800c55c <__mdiff+0x120>)
 800c496:	f240 2145 	movw	r1, #581	@ 0x245
 800c49a:	e7e3      	b.n	800c464 <__mdiff+0x28>
 800c49c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4a0:	6926      	ldr	r6, [r4, #16]
 800c4a2:	60c5      	str	r5, [r0, #12]
 800c4a4:	f109 0310 	add.w	r3, r9, #16
 800c4a8:	f109 0514 	add.w	r5, r9, #20
 800c4ac:	f104 0e14 	add.w	lr, r4, #20
 800c4b0:	f100 0b14 	add.w	fp, r0, #20
 800c4b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	46d9      	mov	r9, fp
 800c4c0:	f04f 0c00 	mov.w	ip, #0
 800c4c4:	9b01      	ldr	r3, [sp, #4]
 800c4c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	fa1f f38a 	uxth.w	r3, sl
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	b283      	uxth	r3, r0
 800c4d8:	1acb      	subs	r3, r1, r3
 800c4da:	0c00      	lsrs	r0, r0, #16
 800c4dc:	4463      	add	r3, ip
 800c4de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4ec:	4576      	cmp	r6, lr
 800c4ee:	f849 3b04 	str.w	r3, [r9], #4
 800c4f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4f6:	d8e5      	bhi.n	800c4c4 <__mdiff+0x88>
 800c4f8:	1b33      	subs	r3, r6, r4
 800c4fa:	3b15      	subs	r3, #21
 800c4fc:	f023 0303 	bic.w	r3, r3, #3
 800c500:	3415      	adds	r4, #21
 800c502:	3304      	adds	r3, #4
 800c504:	42a6      	cmp	r6, r4
 800c506:	bf38      	it	cc
 800c508:	2304      	movcc	r3, #4
 800c50a:	441d      	add	r5, r3
 800c50c:	445b      	add	r3, fp
 800c50e:	461e      	mov	r6, r3
 800c510:	462c      	mov	r4, r5
 800c512:	4544      	cmp	r4, r8
 800c514:	d30e      	bcc.n	800c534 <__mdiff+0xf8>
 800c516:	f108 0103 	add.w	r1, r8, #3
 800c51a:	1b49      	subs	r1, r1, r5
 800c51c:	f021 0103 	bic.w	r1, r1, #3
 800c520:	3d03      	subs	r5, #3
 800c522:	45a8      	cmp	r8, r5
 800c524:	bf38      	it	cc
 800c526:	2100      	movcc	r1, #0
 800c528:	440b      	add	r3, r1
 800c52a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c52e:	b191      	cbz	r1, 800c556 <__mdiff+0x11a>
 800c530:	6117      	str	r7, [r2, #16]
 800c532:	e79d      	b.n	800c470 <__mdiff+0x34>
 800c534:	f854 1b04 	ldr.w	r1, [r4], #4
 800c538:	46e6      	mov	lr, ip
 800c53a:	0c08      	lsrs	r0, r1, #16
 800c53c:	fa1c fc81 	uxtah	ip, ip, r1
 800c540:	4471      	add	r1, lr
 800c542:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c546:	b289      	uxth	r1, r1
 800c548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c54c:	f846 1b04 	str.w	r1, [r6], #4
 800c550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c554:	e7dd      	b.n	800c512 <__mdiff+0xd6>
 800c556:	3f01      	subs	r7, #1
 800c558:	e7e7      	b.n	800c52a <__mdiff+0xee>
 800c55a:	bf00      	nop
 800c55c:	0800d33f 	.word	0x0800d33f
 800c560:	0800d350 	.word	0x0800d350

0800c564 <__d2b>:
 800c564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c568:	460f      	mov	r7, r1
 800c56a:	2101      	movs	r1, #1
 800c56c:	ec59 8b10 	vmov	r8, r9, d0
 800c570:	4616      	mov	r6, r2
 800c572:	f7ff fccd 	bl	800bf10 <_Balloc>
 800c576:	4604      	mov	r4, r0
 800c578:	b930      	cbnz	r0, 800c588 <__d2b+0x24>
 800c57a:	4602      	mov	r2, r0
 800c57c:	4b23      	ldr	r3, [pc, #140]	@ (800c60c <__d2b+0xa8>)
 800c57e:	4824      	ldr	r0, [pc, #144]	@ (800c610 <__d2b+0xac>)
 800c580:	f240 310f 	movw	r1, #783	@ 0x30f
 800c584:	f7fe fd5a 	bl	800b03c <__assert_func>
 800c588:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c58c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c590:	b10d      	cbz	r5, 800c596 <__d2b+0x32>
 800c592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	f1b8 0300 	subs.w	r3, r8, #0
 800c59c:	d023      	beq.n	800c5e6 <__d2b+0x82>
 800c59e:	4668      	mov	r0, sp
 800c5a0:	9300      	str	r3, [sp, #0]
 800c5a2:	f7ff fd7c 	bl	800c09e <__lo0bits>
 800c5a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5aa:	b1d0      	cbz	r0, 800c5e2 <__d2b+0x7e>
 800c5ac:	f1c0 0320 	rsb	r3, r0, #32
 800c5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b4:	430b      	orrs	r3, r1
 800c5b6:	40c2      	lsrs	r2, r0
 800c5b8:	6163      	str	r3, [r4, #20]
 800c5ba:	9201      	str	r2, [sp, #4]
 800c5bc:	9b01      	ldr	r3, [sp, #4]
 800c5be:	61a3      	str	r3, [r4, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	bf0c      	ite	eq
 800c5c4:	2201      	moveq	r2, #1
 800c5c6:	2202      	movne	r2, #2
 800c5c8:	6122      	str	r2, [r4, #16]
 800c5ca:	b1a5      	cbz	r5, 800c5f6 <__d2b+0x92>
 800c5cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5d0:	4405      	add	r5, r0
 800c5d2:	603d      	str	r5, [r7, #0]
 800c5d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5d8:	6030      	str	r0, [r6, #0]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	b003      	add	sp, #12
 800c5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	6161      	str	r1, [r4, #20]
 800c5e4:	e7ea      	b.n	800c5bc <__d2b+0x58>
 800c5e6:	a801      	add	r0, sp, #4
 800c5e8:	f7ff fd59 	bl	800c09e <__lo0bits>
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	6163      	str	r3, [r4, #20]
 800c5f0:	3020      	adds	r0, #32
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	e7e8      	b.n	800c5c8 <__d2b+0x64>
 800c5f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5fe:	6038      	str	r0, [r7, #0]
 800c600:	6918      	ldr	r0, [r3, #16]
 800c602:	f7ff fd2d 	bl	800c060 <__hi0bits>
 800c606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c60a:	e7e5      	b.n	800c5d8 <__d2b+0x74>
 800c60c:	0800d33f 	.word	0x0800d33f
 800c610:	0800d350 	.word	0x0800d350

0800c614 <__ssputs_r>:
 800c614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c618:	688e      	ldr	r6, [r1, #8]
 800c61a:	461f      	mov	r7, r3
 800c61c:	42be      	cmp	r6, r7
 800c61e:	680b      	ldr	r3, [r1, #0]
 800c620:	4682      	mov	sl, r0
 800c622:	460c      	mov	r4, r1
 800c624:	4690      	mov	r8, r2
 800c626:	d82d      	bhi.n	800c684 <__ssputs_r+0x70>
 800c628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c62c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c630:	d026      	beq.n	800c680 <__ssputs_r+0x6c>
 800c632:	6965      	ldr	r5, [r4, #20]
 800c634:	6909      	ldr	r1, [r1, #16]
 800c636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c63a:	eba3 0901 	sub.w	r9, r3, r1
 800c63e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c642:	1c7b      	adds	r3, r7, #1
 800c644:	444b      	add	r3, r9
 800c646:	106d      	asrs	r5, r5, #1
 800c648:	429d      	cmp	r5, r3
 800c64a:	bf38      	it	cc
 800c64c:	461d      	movcc	r5, r3
 800c64e:	0553      	lsls	r3, r2, #21
 800c650:	d527      	bpl.n	800c6a2 <__ssputs_r+0x8e>
 800c652:	4629      	mov	r1, r5
 800c654:	f7ff fbd0 	bl	800bdf8 <_malloc_r>
 800c658:	4606      	mov	r6, r0
 800c65a:	b360      	cbz	r0, 800c6b6 <__ssputs_r+0xa2>
 800c65c:	6921      	ldr	r1, [r4, #16]
 800c65e:	464a      	mov	r2, r9
 800c660:	f000 fa9c 	bl	800cb9c <memcpy>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c66a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c66e:	81a3      	strh	r3, [r4, #12]
 800c670:	6126      	str	r6, [r4, #16]
 800c672:	6165      	str	r5, [r4, #20]
 800c674:	444e      	add	r6, r9
 800c676:	eba5 0509 	sub.w	r5, r5, r9
 800c67a:	6026      	str	r6, [r4, #0]
 800c67c:	60a5      	str	r5, [r4, #8]
 800c67e:	463e      	mov	r6, r7
 800c680:	42be      	cmp	r6, r7
 800c682:	d900      	bls.n	800c686 <__ssputs_r+0x72>
 800c684:	463e      	mov	r6, r7
 800c686:	6820      	ldr	r0, [r4, #0]
 800c688:	4632      	mov	r2, r6
 800c68a:	4641      	mov	r1, r8
 800c68c:	f000 fa3a 	bl	800cb04 <memmove>
 800c690:	68a3      	ldr	r3, [r4, #8]
 800c692:	1b9b      	subs	r3, r3, r6
 800c694:	60a3      	str	r3, [r4, #8]
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	4433      	add	r3, r6
 800c69a:	6023      	str	r3, [r4, #0]
 800c69c:	2000      	movs	r0, #0
 800c69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a2:	462a      	mov	r2, r5
 800c6a4:	f000 fab5 	bl	800cc12 <_realloc_r>
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d1e0      	bne.n	800c670 <__ssputs_r+0x5c>
 800c6ae:	6921      	ldr	r1, [r4, #16]
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	f7ff fb2d 	bl	800bd10 <_free_r>
 800c6b6:	230c      	movs	r3, #12
 800c6b8:	f8ca 3000 	str.w	r3, [sl]
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c8:	e7e9      	b.n	800c69e <__ssputs_r+0x8a>
	...

0800c6cc <_svfiprintf_r>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	4698      	mov	r8, r3
 800c6d2:	898b      	ldrh	r3, [r1, #12]
 800c6d4:	061b      	lsls	r3, r3, #24
 800c6d6:	b09d      	sub	sp, #116	@ 0x74
 800c6d8:	4607      	mov	r7, r0
 800c6da:	460d      	mov	r5, r1
 800c6dc:	4614      	mov	r4, r2
 800c6de:	d510      	bpl.n	800c702 <_svfiprintf_r+0x36>
 800c6e0:	690b      	ldr	r3, [r1, #16]
 800c6e2:	b973      	cbnz	r3, 800c702 <_svfiprintf_r+0x36>
 800c6e4:	2140      	movs	r1, #64	@ 0x40
 800c6e6:	f7ff fb87 	bl	800bdf8 <_malloc_r>
 800c6ea:	6028      	str	r0, [r5, #0]
 800c6ec:	6128      	str	r0, [r5, #16]
 800c6ee:	b930      	cbnz	r0, 800c6fe <_svfiprintf_r+0x32>
 800c6f0:	230c      	movs	r3, #12
 800c6f2:	603b      	str	r3, [r7, #0]
 800c6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f8:	b01d      	add	sp, #116	@ 0x74
 800c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fe:	2340      	movs	r3, #64	@ 0x40
 800c700:	616b      	str	r3, [r5, #20]
 800c702:	2300      	movs	r3, #0
 800c704:	9309      	str	r3, [sp, #36]	@ 0x24
 800c706:	2320      	movs	r3, #32
 800c708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c710:	2330      	movs	r3, #48	@ 0x30
 800c712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c8b0 <_svfiprintf_r+0x1e4>
 800c716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c71a:	f04f 0901 	mov.w	r9, #1
 800c71e:	4623      	mov	r3, r4
 800c720:	469a      	mov	sl, r3
 800c722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c726:	b10a      	cbz	r2, 800c72c <_svfiprintf_r+0x60>
 800c728:	2a25      	cmp	r2, #37	@ 0x25
 800c72a:	d1f9      	bne.n	800c720 <_svfiprintf_r+0x54>
 800c72c:	ebba 0b04 	subs.w	fp, sl, r4
 800c730:	d00b      	beq.n	800c74a <_svfiprintf_r+0x7e>
 800c732:	465b      	mov	r3, fp
 800c734:	4622      	mov	r2, r4
 800c736:	4629      	mov	r1, r5
 800c738:	4638      	mov	r0, r7
 800c73a:	f7ff ff6b 	bl	800c614 <__ssputs_r>
 800c73e:	3001      	adds	r0, #1
 800c740:	f000 80a7 	beq.w	800c892 <_svfiprintf_r+0x1c6>
 800c744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c746:	445a      	add	r2, fp
 800c748:	9209      	str	r2, [sp, #36]	@ 0x24
 800c74a:	f89a 3000 	ldrb.w	r3, [sl]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	f000 809f 	beq.w	800c892 <_svfiprintf_r+0x1c6>
 800c754:	2300      	movs	r3, #0
 800c756:	f04f 32ff 	mov.w	r2, #4294967295
 800c75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c75e:	f10a 0a01 	add.w	sl, sl, #1
 800c762:	9304      	str	r3, [sp, #16]
 800c764:	9307      	str	r3, [sp, #28]
 800c766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c76a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c76c:	4654      	mov	r4, sl
 800c76e:	2205      	movs	r2, #5
 800c770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c774:	484e      	ldr	r0, [pc, #312]	@ (800c8b0 <_svfiprintf_r+0x1e4>)
 800c776:	f7f3 fd63 	bl	8000240 <memchr>
 800c77a:	9a04      	ldr	r2, [sp, #16]
 800c77c:	b9d8      	cbnz	r0, 800c7b6 <_svfiprintf_r+0xea>
 800c77e:	06d0      	lsls	r0, r2, #27
 800c780:	bf44      	itt	mi
 800c782:	2320      	movmi	r3, #32
 800c784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c788:	0711      	lsls	r1, r2, #28
 800c78a:	bf44      	itt	mi
 800c78c:	232b      	movmi	r3, #43	@ 0x2b
 800c78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c792:	f89a 3000 	ldrb.w	r3, [sl]
 800c796:	2b2a      	cmp	r3, #42	@ 0x2a
 800c798:	d015      	beq.n	800c7c6 <_svfiprintf_r+0xfa>
 800c79a:	9a07      	ldr	r2, [sp, #28]
 800c79c:	4654      	mov	r4, sl
 800c79e:	2000      	movs	r0, #0
 800c7a0:	f04f 0c0a 	mov.w	ip, #10
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7aa:	3b30      	subs	r3, #48	@ 0x30
 800c7ac:	2b09      	cmp	r3, #9
 800c7ae:	d94b      	bls.n	800c848 <_svfiprintf_r+0x17c>
 800c7b0:	b1b0      	cbz	r0, 800c7e0 <_svfiprintf_r+0x114>
 800c7b2:	9207      	str	r2, [sp, #28]
 800c7b4:	e014      	b.n	800c7e0 <_svfiprintf_r+0x114>
 800c7b6:	eba0 0308 	sub.w	r3, r0, r8
 800c7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	9304      	str	r3, [sp, #16]
 800c7c2:	46a2      	mov	sl, r4
 800c7c4:	e7d2      	b.n	800c76c <_svfiprintf_r+0xa0>
 800c7c6:	9b03      	ldr	r3, [sp, #12]
 800c7c8:	1d19      	adds	r1, r3, #4
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	9103      	str	r1, [sp, #12]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfbb      	ittet	lt
 800c7d2:	425b      	neglt	r3, r3
 800c7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d8:	9307      	strge	r3, [sp, #28]
 800c7da:	9307      	strlt	r3, [sp, #28]
 800c7dc:	bfb8      	it	lt
 800c7de:	9204      	strlt	r2, [sp, #16]
 800c7e0:	7823      	ldrb	r3, [r4, #0]
 800c7e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7e4:	d10a      	bne.n	800c7fc <_svfiprintf_r+0x130>
 800c7e6:	7863      	ldrb	r3, [r4, #1]
 800c7e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7ea:	d132      	bne.n	800c852 <_svfiprintf_r+0x186>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	1d1a      	adds	r2, r3, #4
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	9203      	str	r2, [sp, #12]
 800c7f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7f8:	3402      	adds	r4, #2
 800c7fa:	9305      	str	r3, [sp, #20]
 800c7fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c8c0 <_svfiprintf_r+0x1f4>
 800c800:	7821      	ldrb	r1, [r4, #0]
 800c802:	2203      	movs	r2, #3
 800c804:	4650      	mov	r0, sl
 800c806:	f7f3 fd1b 	bl	8000240 <memchr>
 800c80a:	b138      	cbz	r0, 800c81c <_svfiprintf_r+0x150>
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	eba0 000a 	sub.w	r0, r0, sl
 800c812:	2240      	movs	r2, #64	@ 0x40
 800c814:	4082      	lsls	r2, r0
 800c816:	4313      	orrs	r3, r2
 800c818:	3401      	adds	r4, #1
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c820:	4824      	ldr	r0, [pc, #144]	@ (800c8b4 <_svfiprintf_r+0x1e8>)
 800c822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c826:	2206      	movs	r2, #6
 800c828:	f7f3 fd0a 	bl	8000240 <memchr>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	d036      	beq.n	800c89e <_svfiprintf_r+0x1d2>
 800c830:	4b21      	ldr	r3, [pc, #132]	@ (800c8b8 <_svfiprintf_r+0x1ec>)
 800c832:	bb1b      	cbnz	r3, 800c87c <_svfiprintf_r+0x1b0>
 800c834:	9b03      	ldr	r3, [sp, #12]
 800c836:	3307      	adds	r3, #7
 800c838:	f023 0307 	bic.w	r3, r3, #7
 800c83c:	3308      	adds	r3, #8
 800c83e:	9303      	str	r3, [sp, #12]
 800c840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c842:	4433      	add	r3, r6
 800c844:	9309      	str	r3, [sp, #36]	@ 0x24
 800c846:	e76a      	b.n	800c71e <_svfiprintf_r+0x52>
 800c848:	fb0c 3202 	mla	r2, ip, r2, r3
 800c84c:	460c      	mov	r4, r1
 800c84e:	2001      	movs	r0, #1
 800c850:	e7a8      	b.n	800c7a4 <_svfiprintf_r+0xd8>
 800c852:	2300      	movs	r3, #0
 800c854:	3401      	adds	r4, #1
 800c856:	9305      	str	r3, [sp, #20]
 800c858:	4619      	mov	r1, r3
 800c85a:	f04f 0c0a 	mov.w	ip, #10
 800c85e:	4620      	mov	r0, r4
 800c860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c864:	3a30      	subs	r2, #48	@ 0x30
 800c866:	2a09      	cmp	r2, #9
 800c868:	d903      	bls.n	800c872 <_svfiprintf_r+0x1a6>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d0c6      	beq.n	800c7fc <_svfiprintf_r+0x130>
 800c86e:	9105      	str	r1, [sp, #20]
 800c870:	e7c4      	b.n	800c7fc <_svfiprintf_r+0x130>
 800c872:	fb0c 2101 	mla	r1, ip, r1, r2
 800c876:	4604      	mov	r4, r0
 800c878:	2301      	movs	r3, #1
 800c87a:	e7f0      	b.n	800c85e <_svfiprintf_r+0x192>
 800c87c:	ab03      	add	r3, sp, #12
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	462a      	mov	r2, r5
 800c882:	4b0e      	ldr	r3, [pc, #56]	@ (800c8bc <_svfiprintf_r+0x1f0>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	4638      	mov	r0, r7
 800c888:	f7fd fcf8 	bl	800a27c <_printf_float>
 800c88c:	1c42      	adds	r2, r0, #1
 800c88e:	4606      	mov	r6, r0
 800c890:	d1d6      	bne.n	800c840 <_svfiprintf_r+0x174>
 800c892:	89ab      	ldrh	r3, [r5, #12]
 800c894:	065b      	lsls	r3, r3, #25
 800c896:	f53f af2d 	bmi.w	800c6f4 <_svfiprintf_r+0x28>
 800c89a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c89c:	e72c      	b.n	800c6f8 <_svfiprintf_r+0x2c>
 800c89e:	ab03      	add	r3, sp, #12
 800c8a0:	9300      	str	r3, [sp, #0]
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	4b05      	ldr	r3, [pc, #20]	@ (800c8bc <_svfiprintf_r+0x1f0>)
 800c8a6:	a904      	add	r1, sp, #16
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	f7fd ff7f 	bl	800a7ac <_printf_i>
 800c8ae:	e7ed      	b.n	800c88c <_svfiprintf_r+0x1c0>
 800c8b0:	0800d4a8 	.word	0x0800d4a8
 800c8b4:	0800d4b2 	.word	0x0800d4b2
 800c8b8:	0800a27d 	.word	0x0800a27d
 800c8bc:	0800c615 	.word	0x0800c615
 800c8c0:	0800d4ae 	.word	0x0800d4ae

0800c8c4 <__sflush_r>:
 800c8c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	0716      	lsls	r6, r2, #28
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	d454      	bmi.n	800c97e <__sflush_r+0xba>
 800c8d4:	684b      	ldr	r3, [r1, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dc02      	bgt.n	800c8e0 <__sflush_r+0x1c>
 800c8da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dd48      	ble.n	800c972 <__sflush_r+0xae>
 800c8e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8e2:	2e00      	cmp	r6, #0
 800c8e4:	d045      	beq.n	800c972 <__sflush_r+0xae>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8ec:	682f      	ldr	r7, [r5, #0]
 800c8ee:	6a21      	ldr	r1, [r4, #32]
 800c8f0:	602b      	str	r3, [r5, #0]
 800c8f2:	d030      	beq.n	800c956 <__sflush_r+0x92>
 800c8f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	0759      	lsls	r1, r3, #29
 800c8fa:	d505      	bpl.n	800c908 <__sflush_r+0x44>
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c902:	b10b      	cbz	r3, 800c908 <__sflush_r+0x44>
 800c904:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	2300      	movs	r3, #0
 800c90a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c90c:	6a21      	ldr	r1, [r4, #32]
 800c90e:	4628      	mov	r0, r5
 800c910:	47b0      	blx	r6
 800c912:	1c43      	adds	r3, r0, #1
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	d106      	bne.n	800c926 <__sflush_r+0x62>
 800c918:	6829      	ldr	r1, [r5, #0]
 800c91a:	291d      	cmp	r1, #29
 800c91c:	d82b      	bhi.n	800c976 <__sflush_r+0xb2>
 800c91e:	4a2a      	ldr	r2, [pc, #168]	@ (800c9c8 <__sflush_r+0x104>)
 800c920:	410a      	asrs	r2, r1
 800c922:	07d6      	lsls	r6, r2, #31
 800c924:	d427      	bmi.n	800c976 <__sflush_r+0xb2>
 800c926:	2200      	movs	r2, #0
 800c928:	6062      	str	r2, [r4, #4]
 800c92a:	04d9      	lsls	r1, r3, #19
 800c92c:	6922      	ldr	r2, [r4, #16]
 800c92e:	6022      	str	r2, [r4, #0]
 800c930:	d504      	bpl.n	800c93c <__sflush_r+0x78>
 800c932:	1c42      	adds	r2, r0, #1
 800c934:	d101      	bne.n	800c93a <__sflush_r+0x76>
 800c936:	682b      	ldr	r3, [r5, #0]
 800c938:	b903      	cbnz	r3, 800c93c <__sflush_r+0x78>
 800c93a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c93c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c93e:	602f      	str	r7, [r5, #0]
 800c940:	b1b9      	cbz	r1, 800c972 <__sflush_r+0xae>
 800c942:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c946:	4299      	cmp	r1, r3
 800c948:	d002      	beq.n	800c950 <__sflush_r+0x8c>
 800c94a:	4628      	mov	r0, r5
 800c94c:	f7ff f9e0 	bl	800bd10 <_free_r>
 800c950:	2300      	movs	r3, #0
 800c952:	6363      	str	r3, [r4, #52]	@ 0x34
 800c954:	e00d      	b.n	800c972 <__sflush_r+0xae>
 800c956:	2301      	movs	r3, #1
 800c958:	4628      	mov	r0, r5
 800c95a:	47b0      	blx	r6
 800c95c:	4602      	mov	r2, r0
 800c95e:	1c50      	adds	r0, r2, #1
 800c960:	d1c9      	bne.n	800c8f6 <__sflush_r+0x32>
 800c962:	682b      	ldr	r3, [r5, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d0c6      	beq.n	800c8f6 <__sflush_r+0x32>
 800c968:	2b1d      	cmp	r3, #29
 800c96a:	d001      	beq.n	800c970 <__sflush_r+0xac>
 800c96c:	2b16      	cmp	r3, #22
 800c96e:	d11e      	bne.n	800c9ae <__sflush_r+0xea>
 800c970:	602f      	str	r7, [r5, #0]
 800c972:	2000      	movs	r0, #0
 800c974:	e022      	b.n	800c9bc <__sflush_r+0xf8>
 800c976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c97a:	b21b      	sxth	r3, r3
 800c97c:	e01b      	b.n	800c9b6 <__sflush_r+0xf2>
 800c97e:	690f      	ldr	r7, [r1, #16]
 800c980:	2f00      	cmp	r7, #0
 800c982:	d0f6      	beq.n	800c972 <__sflush_r+0xae>
 800c984:	0793      	lsls	r3, r2, #30
 800c986:	680e      	ldr	r6, [r1, #0]
 800c988:	bf08      	it	eq
 800c98a:	694b      	ldreq	r3, [r1, #20]
 800c98c:	600f      	str	r7, [r1, #0]
 800c98e:	bf18      	it	ne
 800c990:	2300      	movne	r3, #0
 800c992:	eba6 0807 	sub.w	r8, r6, r7
 800c996:	608b      	str	r3, [r1, #8]
 800c998:	f1b8 0f00 	cmp.w	r8, #0
 800c99c:	dde9      	ble.n	800c972 <__sflush_r+0xae>
 800c99e:	6a21      	ldr	r1, [r4, #32]
 800c9a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c9a2:	4643      	mov	r3, r8
 800c9a4:	463a      	mov	r2, r7
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	47b0      	blx	r6
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	dc08      	bgt.n	800c9c0 <__sflush_r+0xfc>
 800c9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9b6:	81a3      	strh	r3, [r4, #12]
 800c9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c0:	4407      	add	r7, r0
 800c9c2:	eba8 0800 	sub.w	r8, r8, r0
 800c9c6:	e7e7      	b.n	800c998 <__sflush_r+0xd4>
 800c9c8:	dfbffffe 	.word	0xdfbffffe

0800c9cc <_fflush_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	690b      	ldr	r3, [r1, #16]
 800c9d0:	4605      	mov	r5, r0
 800c9d2:	460c      	mov	r4, r1
 800c9d4:	b913      	cbnz	r3, 800c9dc <_fflush_r+0x10>
 800c9d6:	2500      	movs	r5, #0
 800c9d8:	4628      	mov	r0, r5
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	b118      	cbz	r0, 800c9e6 <_fflush_r+0x1a>
 800c9de:	6a03      	ldr	r3, [r0, #32]
 800c9e0:	b90b      	cbnz	r3, 800c9e6 <_fflush_r+0x1a>
 800c9e2:	f7fe f88f 	bl	800ab04 <__sinit>
 800c9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0f3      	beq.n	800c9d6 <_fflush_r+0xa>
 800c9ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9f0:	07d0      	lsls	r0, r2, #31
 800c9f2:	d404      	bmi.n	800c9fe <_fflush_r+0x32>
 800c9f4:	0599      	lsls	r1, r3, #22
 800c9f6:	d402      	bmi.n	800c9fe <_fflush_r+0x32>
 800c9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9fa:	f7fe fb1c 	bl	800b036 <__retarget_lock_acquire_recursive>
 800c9fe:	4628      	mov	r0, r5
 800ca00:	4621      	mov	r1, r4
 800ca02:	f7ff ff5f 	bl	800c8c4 <__sflush_r>
 800ca06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca08:	07da      	lsls	r2, r3, #31
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	d4e4      	bmi.n	800c9d8 <_fflush_r+0xc>
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	059b      	lsls	r3, r3, #22
 800ca12:	d4e1      	bmi.n	800c9d8 <_fflush_r+0xc>
 800ca14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca16:	f7fe fb0f 	bl	800b038 <__retarget_lock_release_recursive>
 800ca1a:	e7dd      	b.n	800c9d8 <_fflush_r+0xc>

0800ca1c <fiprintf>:
 800ca1c:	b40e      	push	{r1, r2, r3}
 800ca1e:	b503      	push	{r0, r1, lr}
 800ca20:	4601      	mov	r1, r0
 800ca22:	ab03      	add	r3, sp, #12
 800ca24:	4805      	ldr	r0, [pc, #20]	@ (800ca3c <fiprintf+0x20>)
 800ca26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2a:	6800      	ldr	r0, [r0, #0]
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	f000 f955 	bl	800ccdc <_vfiprintf_r>
 800ca32:	b002      	add	sp, #8
 800ca34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca38:	b003      	add	sp, #12
 800ca3a:	4770      	bx	lr
 800ca3c:	200000d8 	.word	0x200000d8

0800ca40 <__swhatbuf_r>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	460c      	mov	r4, r1
 800ca44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca48:	2900      	cmp	r1, #0
 800ca4a:	b096      	sub	sp, #88	@ 0x58
 800ca4c:	4615      	mov	r5, r2
 800ca4e:	461e      	mov	r6, r3
 800ca50:	da0d      	bge.n	800ca6e <__swhatbuf_r+0x2e>
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca58:	f04f 0100 	mov.w	r1, #0
 800ca5c:	bf14      	ite	ne
 800ca5e:	2340      	movne	r3, #64	@ 0x40
 800ca60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca64:	2000      	movs	r0, #0
 800ca66:	6031      	str	r1, [r6, #0]
 800ca68:	602b      	str	r3, [r5, #0]
 800ca6a:	b016      	add	sp, #88	@ 0x58
 800ca6c:	bd70      	pop	{r4, r5, r6, pc}
 800ca6e:	466a      	mov	r2, sp
 800ca70:	f000 f862 	bl	800cb38 <_fstat_r>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	dbec      	blt.n	800ca52 <__swhatbuf_r+0x12>
 800ca78:	9901      	ldr	r1, [sp, #4]
 800ca7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca82:	4259      	negs	r1, r3
 800ca84:	4159      	adcs	r1, r3
 800ca86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca8a:	e7eb      	b.n	800ca64 <__swhatbuf_r+0x24>

0800ca8c <__smakebuf_r>:
 800ca8c:	898b      	ldrh	r3, [r1, #12]
 800ca8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca90:	079d      	lsls	r5, r3, #30
 800ca92:	4606      	mov	r6, r0
 800ca94:	460c      	mov	r4, r1
 800ca96:	d507      	bpl.n	800caa8 <__smakebuf_r+0x1c>
 800ca98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	6123      	str	r3, [r4, #16]
 800caa0:	2301      	movs	r3, #1
 800caa2:	6163      	str	r3, [r4, #20]
 800caa4:	b003      	add	sp, #12
 800caa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800caa8:	ab01      	add	r3, sp, #4
 800caaa:	466a      	mov	r2, sp
 800caac:	f7ff ffc8 	bl	800ca40 <__swhatbuf_r>
 800cab0:	9f00      	ldr	r7, [sp, #0]
 800cab2:	4605      	mov	r5, r0
 800cab4:	4639      	mov	r1, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff f99e 	bl	800bdf8 <_malloc_r>
 800cabc:	b948      	cbnz	r0, 800cad2 <__smakebuf_r+0x46>
 800cabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac2:	059a      	lsls	r2, r3, #22
 800cac4:	d4ee      	bmi.n	800caa4 <__smakebuf_r+0x18>
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	f043 0302 	orr.w	r3, r3, #2
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	e7e2      	b.n	800ca98 <__smakebuf_r+0xc>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	6020      	str	r0, [r4, #0]
 800cad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cada:	81a3      	strh	r3, [r4, #12]
 800cadc:	9b01      	ldr	r3, [sp, #4]
 800cade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cae2:	b15b      	cbz	r3, 800cafc <__smakebuf_r+0x70>
 800cae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cae8:	4630      	mov	r0, r6
 800caea:	f000 f837 	bl	800cb5c <_isatty_r>
 800caee:	b128      	cbz	r0, 800cafc <__smakebuf_r+0x70>
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	f043 0301 	orr.w	r3, r3, #1
 800cafa:	81a3      	strh	r3, [r4, #12]
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	431d      	orrs	r5, r3
 800cb00:	81a5      	strh	r5, [r4, #12]
 800cb02:	e7cf      	b.n	800caa4 <__smakebuf_r+0x18>

0800cb04 <memmove>:
 800cb04:	4288      	cmp	r0, r1
 800cb06:	b510      	push	{r4, lr}
 800cb08:	eb01 0402 	add.w	r4, r1, r2
 800cb0c:	d902      	bls.n	800cb14 <memmove+0x10>
 800cb0e:	4284      	cmp	r4, r0
 800cb10:	4623      	mov	r3, r4
 800cb12:	d807      	bhi.n	800cb24 <memmove+0x20>
 800cb14:	1e43      	subs	r3, r0, #1
 800cb16:	42a1      	cmp	r1, r4
 800cb18:	d008      	beq.n	800cb2c <memmove+0x28>
 800cb1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb22:	e7f8      	b.n	800cb16 <memmove+0x12>
 800cb24:	4402      	add	r2, r0
 800cb26:	4601      	mov	r1, r0
 800cb28:	428a      	cmp	r2, r1
 800cb2a:	d100      	bne.n	800cb2e <memmove+0x2a>
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb36:	e7f7      	b.n	800cb28 <memmove+0x24>

0800cb38 <_fstat_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d07      	ldr	r5, [pc, #28]	@ (800cb58 <_fstat_r+0x20>)
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	4611      	mov	r1, r2
 800cb44:	602b      	str	r3, [r5, #0]
 800cb46:	f7f4 ff13 	bl	8001970 <_fstat>
 800cb4a:	1c43      	adds	r3, r0, #1
 800cb4c:	d102      	bne.n	800cb54 <_fstat_r+0x1c>
 800cb4e:	682b      	ldr	r3, [r5, #0]
 800cb50:	b103      	cbz	r3, 800cb54 <_fstat_r+0x1c>
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	bd38      	pop	{r3, r4, r5, pc}
 800cb56:	bf00      	nop
 800cb58:	20000850 	.word	0x20000850

0800cb5c <_isatty_r>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4d06      	ldr	r5, [pc, #24]	@ (800cb78 <_isatty_r+0x1c>)
 800cb60:	2300      	movs	r3, #0
 800cb62:	4604      	mov	r4, r0
 800cb64:	4608      	mov	r0, r1
 800cb66:	602b      	str	r3, [r5, #0]
 800cb68:	f7f4 ff12 	bl	8001990 <_isatty>
 800cb6c:	1c43      	adds	r3, r0, #1
 800cb6e:	d102      	bne.n	800cb76 <_isatty_r+0x1a>
 800cb70:	682b      	ldr	r3, [r5, #0]
 800cb72:	b103      	cbz	r3, 800cb76 <_isatty_r+0x1a>
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	20000850 	.word	0x20000850

0800cb7c <_sbrk_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d06      	ldr	r5, [pc, #24]	@ (800cb98 <_sbrk_r+0x1c>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	602b      	str	r3, [r5, #0]
 800cb88:	f7f4 ff1a 	bl	80019c0 <_sbrk>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d102      	bne.n	800cb96 <_sbrk_r+0x1a>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b103      	cbz	r3, 800cb96 <_sbrk_r+0x1a>
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	20000850 	.word	0x20000850

0800cb9c <memcpy>:
 800cb9c:	440a      	add	r2, r1
 800cb9e:	4291      	cmp	r1, r2
 800cba0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cba4:	d100      	bne.n	800cba8 <memcpy+0xc>
 800cba6:	4770      	bx	lr
 800cba8:	b510      	push	{r4, lr}
 800cbaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbb2:	4291      	cmp	r1, r2
 800cbb4:	d1f9      	bne.n	800cbaa <memcpy+0xe>
 800cbb6:	bd10      	pop	{r4, pc}

0800cbb8 <abort>:
 800cbb8:	b508      	push	{r3, lr}
 800cbba:	2006      	movs	r0, #6
 800cbbc:	f000 f9ce 	bl	800cf5c <raise>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7f4 fe85 	bl	80018d0 <_exit>

0800cbc6 <_calloc_r>:
 800cbc6:	b570      	push	{r4, r5, r6, lr}
 800cbc8:	fba1 5402 	umull	r5, r4, r1, r2
 800cbcc:	b93c      	cbnz	r4, 800cbde <_calloc_r+0x18>
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7ff f912 	bl	800bdf8 <_malloc_r>
 800cbd4:	4606      	mov	r6, r0
 800cbd6:	b928      	cbnz	r0, 800cbe4 <_calloc_r+0x1e>
 800cbd8:	2600      	movs	r6, #0
 800cbda:	4630      	mov	r0, r6
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	220c      	movs	r2, #12
 800cbe0:	6002      	str	r2, [r0, #0]
 800cbe2:	e7f9      	b.n	800cbd8 <_calloc_r+0x12>
 800cbe4:	462a      	mov	r2, r5
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	f7fe f94c 	bl	800ae84 <memset>
 800cbec:	e7f5      	b.n	800cbda <_calloc_r+0x14>

0800cbee <__ascii_mbtowc>:
 800cbee:	b082      	sub	sp, #8
 800cbf0:	b901      	cbnz	r1, 800cbf4 <__ascii_mbtowc+0x6>
 800cbf2:	a901      	add	r1, sp, #4
 800cbf4:	b142      	cbz	r2, 800cc08 <__ascii_mbtowc+0x1a>
 800cbf6:	b14b      	cbz	r3, 800cc0c <__ascii_mbtowc+0x1e>
 800cbf8:	7813      	ldrb	r3, [r2, #0]
 800cbfa:	600b      	str	r3, [r1, #0]
 800cbfc:	7812      	ldrb	r2, [r2, #0]
 800cbfe:	1e10      	subs	r0, r2, #0
 800cc00:	bf18      	it	ne
 800cc02:	2001      	movne	r0, #1
 800cc04:	b002      	add	sp, #8
 800cc06:	4770      	bx	lr
 800cc08:	4610      	mov	r0, r2
 800cc0a:	e7fb      	b.n	800cc04 <__ascii_mbtowc+0x16>
 800cc0c:	f06f 0001 	mvn.w	r0, #1
 800cc10:	e7f8      	b.n	800cc04 <__ascii_mbtowc+0x16>

0800cc12 <_realloc_r>:
 800cc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc16:	4680      	mov	r8, r0
 800cc18:	4615      	mov	r5, r2
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	b921      	cbnz	r1, 800cc28 <_realloc_r+0x16>
 800cc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc22:	4611      	mov	r1, r2
 800cc24:	f7ff b8e8 	b.w	800bdf8 <_malloc_r>
 800cc28:	b92a      	cbnz	r2, 800cc36 <_realloc_r+0x24>
 800cc2a:	f7ff f871 	bl	800bd10 <_free_r>
 800cc2e:	2400      	movs	r4, #0
 800cc30:	4620      	mov	r0, r4
 800cc32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc36:	f000 f9ad 	bl	800cf94 <_malloc_usable_size_r>
 800cc3a:	4285      	cmp	r5, r0
 800cc3c:	4606      	mov	r6, r0
 800cc3e:	d802      	bhi.n	800cc46 <_realloc_r+0x34>
 800cc40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cc44:	d8f4      	bhi.n	800cc30 <_realloc_r+0x1e>
 800cc46:	4629      	mov	r1, r5
 800cc48:	4640      	mov	r0, r8
 800cc4a:	f7ff f8d5 	bl	800bdf8 <_malloc_r>
 800cc4e:	4607      	mov	r7, r0
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d0ec      	beq.n	800cc2e <_realloc_r+0x1c>
 800cc54:	42b5      	cmp	r5, r6
 800cc56:	462a      	mov	r2, r5
 800cc58:	4621      	mov	r1, r4
 800cc5a:	bf28      	it	cs
 800cc5c:	4632      	movcs	r2, r6
 800cc5e:	f7ff ff9d 	bl	800cb9c <memcpy>
 800cc62:	4621      	mov	r1, r4
 800cc64:	4640      	mov	r0, r8
 800cc66:	f7ff f853 	bl	800bd10 <_free_r>
 800cc6a:	463c      	mov	r4, r7
 800cc6c:	e7e0      	b.n	800cc30 <_realloc_r+0x1e>

0800cc6e <__ascii_wctomb>:
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	b141      	cbz	r1, 800cc86 <__ascii_wctomb+0x18>
 800cc74:	2aff      	cmp	r2, #255	@ 0xff
 800cc76:	d904      	bls.n	800cc82 <__ascii_wctomb+0x14>
 800cc78:	228a      	movs	r2, #138	@ 0x8a
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	4770      	bx	lr
 800cc82:	700a      	strb	r2, [r1, #0]
 800cc84:	2001      	movs	r0, #1
 800cc86:	4770      	bx	lr

0800cc88 <__sfputc_r>:
 800cc88:	6893      	ldr	r3, [r2, #8]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	b410      	push	{r4}
 800cc90:	6093      	str	r3, [r2, #8]
 800cc92:	da08      	bge.n	800cca6 <__sfputc_r+0x1e>
 800cc94:	6994      	ldr	r4, [r2, #24]
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	db01      	blt.n	800cc9e <__sfputc_r+0x16>
 800cc9a:	290a      	cmp	r1, #10
 800cc9c:	d103      	bne.n	800cca6 <__sfputc_r+0x1e>
 800cc9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cca2:	f7fe b85a 	b.w	800ad5a <__swbuf_r>
 800cca6:	6813      	ldr	r3, [r2, #0]
 800cca8:	1c58      	adds	r0, r3, #1
 800ccaa:	6010      	str	r0, [r2, #0]
 800ccac:	7019      	strb	r1, [r3, #0]
 800ccae:	4608      	mov	r0, r1
 800ccb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <__sfputs_r>:
 800ccb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb8:	4606      	mov	r6, r0
 800ccba:	460f      	mov	r7, r1
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	18d5      	adds	r5, r2, r3
 800ccc0:	42ac      	cmp	r4, r5
 800ccc2:	d101      	bne.n	800ccc8 <__sfputs_r+0x12>
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	e007      	b.n	800ccd8 <__sfputs_r+0x22>
 800ccc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cccc:	463a      	mov	r2, r7
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f7ff ffda 	bl	800cc88 <__sfputc_r>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d1f3      	bne.n	800ccc0 <__sfputs_r+0xa>
 800ccd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccdc <_vfiprintf_r>:
 800ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce0:	460d      	mov	r5, r1
 800cce2:	b09d      	sub	sp, #116	@ 0x74
 800cce4:	4614      	mov	r4, r2
 800cce6:	4698      	mov	r8, r3
 800cce8:	4606      	mov	r6, r0
 800ccea:	b118      	cbz	r0, 800ccf4 <_vfiprintf_r+0x18>
 800ccec:	6a03      	ldr	r3, [r0, #32]
 800ccee:	b90b      	cbnz	r3, 800ccf4 <_vfiprintf_r+0x18>
 800ccf0:	f7fd ff08 	bl	800ab04 <__sinit>
 800ccf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccf6:	07d9      	lsls	r1, r3, #31
 800ccf8:	d405      	bmi.n	800cd06 <_vfiprintf_r+0x2a>
 800ccfa:	89ab      	ldrh	r3, [r5, #12]
 800ccfc:	059a      	lsls	r2, r3, #22
 800ccfe:	d402      	bmi.n	800cd06 <_vfiprintf_r+0x2a>
 800cd00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd02:	f7fe f998 	bl	800b036 <__retarget_lock_acquire_recursive>
 800cd06:	89ab      	ldrh	r3, [r5, #12]
 800cd08:	071b      	lsls	r3, r3, #28
 800cd0a:	d501      	bpl.n	800cd10 <_vfiprintf_r+0x34>
 800cd0c:	692b      	ldr	r3, [r5, #16]
 800cd0e:	b99b      	cbnz	r3, 800cd38 <_vfiprintf_r+0x5c>
 800cd10:	4629      	mov	r1, r5
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7fe f860 	bl	800add8 <__swsetup_r>
 800cd18:	b170      	cbz	r0, 800cd38 <_vfiprintf_r+0x5c>
 800cd1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd1c:	07dc      	lsls	r4, r3, #31
 800cd1e:	d504      	bpl.n	800cd2a <_vfiprintf_r+0x4e>
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	b01d      	add	sp, #116	@ 0x74
 800cd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2a:	89ab      	ldrh	r3, [r5, #12]
 800cd2c:	0598      	lsls	r0, r3, #22
 800cd2e:	d4f7      	bmi.n	800cd20 <_vfiprintf_r+0x44>
 800cd30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd32:	f7fe f981 	bl	800b038 <__retarget_lock_release_recursive>
 800cd36:	e7f3      	b.n	800cd20 <_vfiprintf_r+0x44>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd3c:	2320      	movs	r3, #32
 800cd3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd42:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd46:	2330      	movs	r3, #48	@ 0x30
 800cd48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cef8 <_vfiprintf_r+0x21c>
 800cd4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd50:	f04f 0901 	mov.w	r9, #1
 800cd54:	4623      	mov	r3, r4
 800cd56:	469a      	mov	sl, r3
 800cd58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd5c:	b10a      	cbz	r2, 800cd62 <_vfiprintf_r+0x86>
 800cd5e:	2a25      	cmp	r2, #37	@ 0x25
 800cd60:	d1f9      	bne.n	800cd56 <_vfiprintf_r+0x7a>
 800cd62:	ebba 0b04 	subs.w	fp, sl, r4
 800cd66:	d00b      	beq.n	800cd80 <_vfiprintf_r+0xa4>
 800cd68:	465b      	mov	r3, fp
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f7ff ffa1 	bl	800ccb6 <__sfputs_r>
 800cd74:	3001      	adds	r0, #1
 800cd76:	f000 80a7 	beq.w	800cec8 <_vfiprintf_r+0x1ec>
 800cd7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd7c:	445a      	add	r2, fp
 800cd7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd80:	f89a 3000 	ldrb.w	r3, [sl]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 809f 	beq.w	800cec8 <_vfiprintf_r+0x1ec>
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd94:	f10a 0a01 	add.w	sl, sl, #1
 800cd98:	9304      	str	r3, [sp, #16]
 800cd9a:	9307      	str	r3, [sp, #28]
 800cd9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cda0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cda2:	4654      	mov	r4, sl
 800cda4:	2205      	movs	r2, #5
 800cda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdaa:	4853      	ldr	r0, [pc, #332]	@ (800cef8 <_vfiprintf_r+0x21c>)
 800cdac:	f7f3 fa48 	bl	8000240 <memchr>
 800cdb0:	9a04      	ldr	r2, [sp, #16]
 800cdb2:	b9d8      	cbnz	r0, 800cdec <_vfiprintf_r+0x110>
 800cdb4:	06d1      	lsls	r1, r2, #27
 800cdb6:	bf44      	itt	mi
 800cdb8:	2320      	movmi	r3, #32
 800cdba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdbe:	0713      	lsls	r3, r2, #28
 800cdc0:	bf44      	itt	mi
 800cdc2:	232b      	movmi	r3, #43	@ 0x2b
 800cdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdc8:	f89a 3000 	ldrb.w	r3, [sl]
 800cdcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdce:	d015      	beq.n	800cdfc <_vfiprintf_r+0x120>
 800cdd0:	9a07      	ldr	r2, [sp, #28]
 800cdd2:	4654      	mov	r4, sl
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f04f 0c0a 	mov.w	ip, #10
 800cdda:	4621      	mov	r1, r4
 800cddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cde0:	3b30      	subs	r3, #48	@ 0x30
 800cde2:	2b09      	cmp	r3, #9
 800cde4:	d94b      	bls.n	800ce7e <_vfiprintf_r+0x1a2>
 800cde6:	b1b0      	cbz	r0, 800ce16 <_vfiprintf_r+0x13a>
 800cde8:	9207      	str	r2, [sp, #28]
 800cdea:	e014      	b.n	800ce16 <_vfiprintf_r+0x13a>
 800cdec:	eba0 0308 	sub.w	r3, r0, r8
 800cdf0:	fa09 f303 	lsl.w	r3, r9, r3
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	9304      	str	r3, [sp, #16]
 800cdf8:	46a2      	mov	sl, r4
 800cdfa:	e7d2      	b.n	800cda2 <_vfiprintf_r+0xc6>
 800cdfc:	9b03      	ldr	r3, [sp, #12]
 800cdfe:	1d19      	adds	r1, r3, #4
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	9103      	str	r1, [sp, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	bfbb      	ittet	lt
 800ce08:	425b      	neglt	r3, r3
 800ce0a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce0e:	9307      	strge	r3, [sp, #28]
 800ce10:	9307      	strlt	r3, [sp, #28]
 800ce12:	bfb8      	it	lt
 800ce14:	9204      	strlt	r2, [sp, #16]
 800ce16:	7823      	ldrb	r3, [r4, #0]
 800ce18:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce1a:	d10a      	bne.n	800ce32 <_vfiprintf_r+0x156>
 800ce1c:	7863      	ldrb	r3, [r4, #1]
 800ce1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce20:	d132      	bne.n	800ce88 <_vfiprintf_r+0x1ac>
 800ce22:	9b03      	ldr	r3, [sp, #12]
 800ce24:	1d1a      	adds	r2, r3, #4
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	9203      	str	r2, [sp, #12]
 800ce2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce2e:	3402      	adds	r4, #2
 800ce30:	9305      	str	r3, [sp, #20]
 800ce32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf08 <_vfiprintf_r+0x22c>
 800ce36:	7821      	ldrb	r1, [r4, #0]
 800ce38:	2203      	movs	r2, #3
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	f7f3 fa00 	bl	8000240 <memchr>
 800ce40:	b138      	cbz	r0, 800ce52 <_vfiprintf_r+0x176>
 800ce42:	9b04      	ldr	r3, [sp, #16]
 800ce44:	eba0 000a 	sub.w	r0, r0, sl
 800ce48:	2240      	movs	r2, #64	@ 0x40
 800ce4a:	4082      	lsls	r2, r0
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	3401      	adds	r4, #1
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce56:	4829      	ldr	r0, [pc, #164]	@ (800cefc <_vfiprintf_r+0x220>)
 800ce58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce5c:	2206      	movs	r2, #6
 800ce5e:	f7f3 f9ef 	bl	8000240 <memchr>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d03f      	beq.n	800cee6 <_vfiprintf_r+0x20a>
 800ce66:	4b26      	ldr	r3, [pc, #152]	@ (800cf00 <_vfiprintf_r+0x224>)
 800ce68:	bb1b      	cbnz	r3, 800ceb2 <_vfiprintf_r+0x1d6>
 800ce6a:	9b03      	ldr	r3, [sp, #12]
 800ce6c:	3307      	adds	r3, #7
 800ce6e:	f023 0307 	bic.w	r3, r3, #7
 800ce72:	3308      	adds	r3, #8
 800ce74:	9303      	str	r3, [sp, #12]
 800ce76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce78:	443b      	add	r3, r7
 800ce7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce7c:	e76a      	b.n	800cd54 <_vfiprintf_r+0x78>
 800ce7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce82:	460c      	mov	r4, r1
 800ce84:	2001      	movs	r0, #1
 800ce86:	e7a8      	b.n	800cdda <_vfiprintf_r+0xfe>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	3401      	adds	r4, #1
 800ce8c:	9305      	str	r3, [sp, #20]
 800ce8e:	4619      	mov	r1, r3
 800ce90:	f04f 0c0a 	mov.w	ip, #10
 800ce94:	4620      	mov	r0, r4
 800ce96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce9a:	3a30      	subs	r2, #48	@ 0x30
 800ce9c:	2a09      	cmp	r2, #9
 800ce9e:	d903      	bls.n	800cea8 <_vfiprintf_r+0x1cc>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0c6      	beq.n	800ce32 <_vfiprintf_r+0x156>
 800cea4:	9105      	str	r1, [sp, #20]
 800cea6:	e7c4      	b.n	800ce32 <_vfiprintf_r+0x156>
 800cea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceac:	4604      	mov	r4, r0
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e7f0      	b.n	800ce94 <_vfiprintf_r+0x1b8>
 800ceb2:	ab03      	add	r3, sp, #12
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	4b12      	ldr	r3, [pc, #72]	@ (800cf04 <_vfiprintf_r+0x228>)
 800ceba:	a904      	add	r1, sp, #16
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7fd f9dd 	bl	800a27c <_printf_float>
 800cec2:	4607      	mov	r7, r0
 800cec4:	1c78      	adds	r0, r7, #1
 800cec6:	d1d6      	bne.n	800ce76 <_vfiprintf_r+0x19a>
 800cec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceca:	07d9      	lsls	r1, r3, #31
 800cecc:	d405      	bmi.n	800ceda <_vfiprintf_r+0x1fe>
 800cece:	89ab      	ldrh	r3, [r5, #12]
 800ced0:	059a      	lsls	r2, r3, #22
 800ced2:	d402      	bmi.n	800ceda <_vfiprintf_r+0x1fe>
 800ced4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ced6:	f7fe f8af 	bl	800b038 <__retarget_lock_release_recursive>
 800ceda:	89ab      	ldrh	r3, [r5, #12]
 800cedc:	065b      	lsls	r3, r3, #25
 800cede:	f53f af1f 	bmi.w	800cd20 <_vfiprintf_r+0x44>
 800cee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cee4:	e71e      	b.n	800cd24 <_vfiprintf_r+0x48>
 800cee6:	ab03      	add	r3, sp, #12
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	462a      	mov	r2, r5
 800ceec:	4b05      	ldr	r3, [pc, #20]	@ (800cf04 <_vfiprintf_r+0x228>)
 800ceee:	a904      	add	r1, sp, #16
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7fd fc5b 	bl	800a7ac <_printf_i>
 800cef6:	e7e4      	b.n	800cec2 <_vfiprintf_r+0x1e6>
 800cef8:	0800d4a8 	.word	0x0800d4a8
 800cefc:	0800d4b2 	.word	0x0800d4b2
 800cf00:	0800a27d 	.word	0x0800a27d
 800cf04:	0800ccb7 	.word	0x0800ccb7
 800cf08:	0800d4ae 	.word	0x0800d4ae

0800cf0c <_raise_r>:
 800cf0c:	291f      	cmp	r1, #31
 800cf0e:	b538      	push	{r3, r4, r5, lr}
 800cf10:	4605      	mov	r5, r0
 800cf12:	460c      	mov	r4, r1
 800cf14:	d904      	bls.n	800cf20 <_raise_r+0x14>
 800cf16:	2316      	movs	r3, #22
 800cf18:	6003      	str	r3, [r0, #0]
 800cf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf22:	b112      	cbz	r2, 800cf2a <_raise_r+0x1e>
 800cf24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf28:	b94b      	cbnz	r3, 800cf3e <_raise_r+0x32>
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	f000 f830 	bl	800cf90 <_getpid_r>
 800cf30:	4622      	mov	r2, r4
 800cf32:	4601      	mov	r1, r0
 800cf34:	4628      	mov	r0, r5
 800cf36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf3a:	f000 b817 	b.w	800cf6c <_kill_r>
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d00a      	beq.n	800cf58 <_raise_r+0x4c>
 800cf42:	1c59      	adds	r1, r3, #1
 800cf44:	d103      	bne.n	800cf4e <_raise_r+0x42>
 800cf46:	2316      	movs	r3, #22
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	e7e7      	b.n	800cf1e <_raise_r+0x12>
 800cf4e:	2100      	movs	r1, #0
 800cf50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf54:	4620      	mov	r0, r4
 800cf56:	4798      	blx	r3
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e7e0      	b.n	800cf1e <_raise_r+0x12>

0800cf5c <raise>:
 800cf5c:	4b02      	ldr	r3, [pc, #8]	@ (800cf68 <raise+0xc>)
 800cf5e:	4601      	mov	r1, r0
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f7ff bfd3 	b.w	800cf0c <_raise_r>
 800cf66:	bf00      	nop
 800cf68:	200000d8 	.word	0x200000d8

0800cf6c <_kill_r>:
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4d07      	ldr	r5, [pc, #28]	@ (800cf8c <_kill_r+0x20>)
 800cf70:	2300      	movs	r3, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	4608      	mov	r0, r1
 800cf76:	4611      	mov	r1, r2
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	f7f4 fc99 	bl	80018b0 <_kill>
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	d102      	bne.n	800cf88 <_kill_r+0x1c>
 800cf82:	682b      	ldr	r3, [r5, #0]
 800cf84:	b103      	cbz	r3, 800cf88 <_kill_r+0x1c>
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	bd38      	pop	{r3, r4, r5, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000850 	.word	0x20000850

0800cf90 <_getpid_r>:
 800cf90:	f7f4 bc86 	b.w	80018a0 <_getpid>

0800cf94 <_malloc_usable_size_r>:
 800cf94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf98:	1f18      	subs	r0, r3, #4
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	bfbc      	itt	lt
 800cf9e:	580b      	ldrlt	r3, [r1, r0]
 800cfa0:	18c0      	addlt	r0, r0, r3
 800cfa2:	4770      	bx	lr

0800cfa4 <_init>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	bf00      	nop
 800cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfaa:	bc08      	pop	{r3}
 800cfac:	469e      	mov	lr, r3
 800cfae:	4770      	bx	lr

0800cfb0 <_fini>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	bf00      	nop
 800cfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfb6:	bc08      	pop	{r3}
 800cfb8:	469e      	mov	lr, r3
 800cfba:	4770      	bx	lr
